{"version":3,"file":"lisco.cjs","sources":["../src/common/Utils.js","../src/common/I18nLoader.js","../src/common/JsonResponse.js","../src/common/TokenGenerator.js","../src/server/Server.js","../src/server/ClusterServer.js","../src/events/EventHandler.js","../src/logger/Logger.js","../src/auth/AuthController.js","../src/auth/IAuthHandler.js","../src/auth/jwt/JwtAuthHandler.js","../src/auth/cookie/CookieAuthHandler.js","../src/db/knex/KnexConnector.js","../src/db/knex/filters/KnexFilterParser.js","../src/db/knex/dao/BaseKnexDao.js","../src/db/IUserDao.js","../src/base/BaseController.js","../src/base/BaseService.js","../src/App.js","../src/common/Runtime.js"],"sourcesContent":["import crypto from 'crypto';\r\nimport util from 'util';\r\n\r\nexport default class Utils {\r\n    static arrayToLower(mcArray) {\r\n        let tmp = mcArray.join('~').toLowerCase();\r\n        return tmp.split('~');\r\n    }\r\n\r\n    static replaceAll(str, find, replace) {\r\n        return str.replace(new RegExp(find.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replace);\r\n    }\r\n\r\n    /**\r\n     * Metodo de encript para las contraseñas y demas.\r\n     * \r\n     * @param {*} text \r\n     */\r\n    static encrypt(text) {\r\n        const algorithm = 'aes-256-cbc';\r\n        const secret = Buffer.from(process.env.CRYPT_SECRET, 'hex');\r\n        const iv = Buffer.from(process.env.CRYPT_IV, 'hex');\r\n\r\n        const cipher = crypto.createCipheriv(algorithm, secret, iv);\r\n        let encrypted = cipher.update(text);\r\n        encrypted = Buffer.concat([encrypted, cipher.final()]);\r\n        return encrypted.toString('hex');\r\n    }\r\n\r\n    /**\r\n     * Metodo de decrypt para las contraseñas y demas\r\n     * @param {*} text \r\n     */\r\n    static decrypt(text) {\r\n        const algorithm = 'aes-256-cbc';\r\n        const secret = Buffer.from(process.env.CRYPT_SECRET, 'hex');\r\n        const iv = Buffer.from(process.env.CRYPT_IV, 'hex');\r\n\r\n        const encryptedText = Buffer.from(text, 'hex');\r\n\r\n        const decipher = crypto.createDecipheriv(algorithm, secret, iv);\r\n        let decrypted = decipher.update(encryptedText);\r\n        decrypted = Buffer.concat([decrypted, decipher.final()]);\r\n        return decrypted.toString();\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * Utiliza una promise para ejecutar un setTimeout y hacer un falso sleep.\r\n     * \r\n     * @param {*} ms \r\n     */\r\n    static sleep(ms) {\r\n        let promise_sleep = util.promisify(setTimeout);\r\n\r\n        return promise_sleep(ms);\r\n    }\r\n\r\n    /**\r\n     * Genera dos claves para los metodos crypt y decrypt\r\n     */\r\n    static generateKeys() {\r\n        return {\r\n            key: crypto.randomBytes(32).toString('hex'),\r\n            iv: crypto.randomBytes(16).toString('hex')\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * \"aplana\" un objeto jerarquico en una estructura clave-valor.\r\n     * \r\n     * @param {*} ob \r\n     * @returns \r\n     */\r\n    static flattenObject(ob) {\r\n        let toReturn = {};\r\n        let flatObject;\r\n        for (let i in ob) {\r\n            if (!ob.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n            //Devolver los arrays tal cual\r\n            if (ob[i] && Array === ob[i].constructor) {\r\n                toReturn[i] = ob[i];\r\n                continue;\r\n            }\r\n            if ((typeof ob[i]) === 'object') {\r\n                flatObject = Utils.flattenObject(ob[i]);\r\n                for (let x in flatObject) {\r\n                    if (!flatObject.hasOwnProperty(x)) {\r\n                        continue;\r\n                    }\r\n                    //Exclude arrays from the final result\r\n                    if (flatObject[x] && Array === flatObject.constructor) {\r\n                        continue;\r\n                    }\r\n                    toReturn[i + (!!isNaN(x) ? '.' + x : '')] = flatObject[x];\r\n                }\r\n            } else {\r\n                toReturn[i] = ob[i];\r\n            }\r\n        }\r\n        return toReturn;\r\n    }\r\n\r\n    /**\r\n     * Invierte un objeto aplanado recuperando su forma original\r\n     * \r\n     * @param {*} data \r\n     * @returns \r\n     */\r\n    static unflatten(data) {\r\n        var result = {}\r\n        for (var i in data) {\r\n            var keys = i.split('.')\r\n            keys.reduce(function (r, e, j) {\r\n                return r[e] || (r[e] = isNaN(Number(keys[j + 1])) ? (keys.length - 1 == j ? data[i] : {}) : [])\r\n            }, result)\r\n        }\r\n        return result\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @returns \r\n     */\r\n    static expressHandler() {\r\n\r\n        return (fn) => {\r\n            return function asyncUtilWrap(...args) {\r\n                const fnReturn = fn(...args);\r\n                const next = args[args.length - 1];\r\n                return Promise.resolve(fnReturn).catch((e) => {\r\n                    return next(e);\r\n                });\r\n            };\r\n        };\r\n    }\r\n}\r\n\r\n","import fs from \"fs\";\r\nimport util from \"util\";\r\nimport Utils from \"./Utils.js\";\r\n\r\nimport chokidar from \"chokidar\";\r\n\r\nexport default class I18nLoader {\r\n    constructor() {\r\n        this.watcher = {};\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param lang\r\n     * @param callback\r\n     */\r\n    async load(custom) {\r\n        const lang = custom || process.env.DEFAULT_LANG;\r\n\r\n        if (!this.currentData) {\r\n            this.currentData = {};\r\n        }\r\n        if (!this.currentDataFlat) {\r\n            this.currentDataFlat = {};\r\n        }\r\n\r\n        const file = process.cwd() + \"/i18n/lang_\" + lang + \".json\";\r\n\r\n        // Initialize watcher.\r\n        this.watcher[lang] = chokidar.watch(file, {\r\n            ignored: /(^|[/\\\\])\\../, // ignore dotfiles\r\n            persistent: true,\r\n        });\r\n        //Add change watcher\r\n        this.watcher[lang].on(\"change\", (path) => this.loadFile(path, lang));\r\n\r\n        //Initialize file load\r\n        await this.loadFile(file, lang);\r\n    }\r\n\r\n    /**\r\n     * Carga el archivo de traducciones.\r\n     *\r\n     * @param {*} file\r\n     * @param {*} lang\r\n     */\r\n    async loadFile(file, lang) {\r\n        const readfile = util.promisify(fs.readFile);\r\n        try {\r\n            const data = await readfile(file, \"utf8\");\r\n            var parsedData = JSON.parse(data);\r\n\r\n            this.currentDataFlat[lang] = Utils.flattenObject(parsedData);\r\n            this.currentData[lang] = parsedData;\r\n        } catch (ex) {\r\n            if (ex?.code === \"ENOENT\") {\r\n                return console.log(\"Lang file does not exist. Create it on ./i18n/lang_{xx}.json\");\r\n            }\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} key\r\n     */\r\n    async translate(key, lang) {\r\n        if (!lang) lang = process.env.DEFAULT_LANG;\r\n\r\n        if (this.currentDataFlat && this.currentDataFlat[lang] && this.currentDataFlat[lang][key]) {\r\n            return this.currentData[lang][key];\r\n        }\r\n\r\n        if (!this.currentDataFlat || !this.currentDataFlat[lang]) {\r\n            await this.load(lang);\r\n            if (this.currentDataFlat && this.currentDataFlat[lang] && this.currentDataFlat[key]) {\r\n                return this.currentDataFlat[lang][key];\r\n            }\r\n        }\r\n        return \"undefined.\" + key;\r\n    }\r\n}\r\n","export default class JsonResponse {\r\n    constructor(success, data, message, total) {\r\n        this.data = data;\r\n        this.success = success;\r\n        this.total = total;\r\n        this.message = message || '';\r\n    }\r\n\r\n    toJson() {\r\n        return (this);\r\n    }\r\n}\r\n","/**\r\n * Example to refresh tokens using https://github.com/auth0/node-jsonwebtoken\r\n * It was requested to be introduced at as part of the jsonwebtoken library,\r\n * since we feel it does not add too much value but it will add code to mantain\r\n * we won't include it.\r\n *\r\n * I create this gist just to help those who want to auto-refresh JWTs.\r\n */\r\nimport jsonwebtoken from 'jsonwebtoken';\r\nimport * as uuid from 'uuid';\r\n\r\nexport default class TokenGenerator {\r\n\r\n    constructor(privateKey, options) {\r\n        this.privateKey = privateKey;\r\n        this.options = options;\r\n    }\r\n\r\n    sign(payload) {\r\n        const jwtSignOptions = { ...this.options, jwtid: uuid.v4() };\r\n        return jsonwebtoken.sign(payload, this.privateKey, jwtSignOptions);\r\n    }\r\n\r\n    verify(token) {\r\n        return jsonwebtoken.verify(token, this.privateKey, this.options);\r\n    }\r\n\r\n    refresh(token) {\r\n        const payload = jsonwebtoken.verify(token, this.privateKey, this.options);\r\n        delete payload.sub;\r\n        delete payload.iss;\r\n        delete payload.aud;\r\n        delete payload.iat;\r\n        delete payload.exp;\r\n        delete payload.nbf;\r\n        delete payload.jti; //We are generating a new token, if you are using jwtid during signing, pass it in refreshOptions\r\n        const jwtSignOptions = { ...this.options, jwtid: uuid.v4() };\r\n        // The first signing converted all needed options into claims, they are already in the payload\r\n        return jsonwebtoken.sign(payload, this.privateKey, jwtSignOptions);\r\n    }\r\n}\r\n","import helmet from \"helmet\";\r\nimport express from \"express\";\r\nimport compression from \"compression\";\r\nimport cors from \"cors\";\r\nimport fileUpload from \"express-fileupload\";\r\nimport url from \"url\";\r\nimport lodash from \"lodash\";\r\nimport { JsonResponse, Utils } from \"../common/index.js\";\r\n\r\n/**\r\n * Clase servidor encargada de configurar las rutas.\r\n *\r\n * que el codigo se disperse entre diferentes proyectos.\r\n */\r\nexport default class Server {\r\n    /**\r\n     *\r\n     * @param {*} config\r\n     * @param {*} statics\r\n     * @param {*} routes\r\n     */\r\n    constructor(config, statics, routes) {\r\n        this.app = express();\r\n        this.express_config = lodash.defaultsDeep(config, {\r\n            helmet: true,\r\n            json: true,\r\n            urlencoded: true,\r\n            compression: true,\r\n            cors: { origin: true, credentials: true },\r\n            fileupload: true,\r\n            socketio: { transports: [\"websocket\"] },\r\n            traceRequests: false,\r\n        });\r\n        this.statics = statics;\r\n        this.routes = routes;\r\n    }\r\n\r\n    /**\r\n     * Inicializa el servidor\r\n     */\r\n    async initialize() {\r\n        this.config(this.express_config);\r\n        if (this.customizeExpress) {\r\n            await this.customizeExpress(this.app);\r\n        }\r\n        await this.configureRoutes(this.routes);\r\n        await this.errorHandler();\r\n    }\r\n\r\n    /**\r\n     * Funcion sobreescribible para personalizar los componentes cargados en Express\r\n     *\r\n     * Aqui se pueden poner cosas como:\r\n     *\r\n     * this.app.use(cookieParser())... etc\r\n     */\r\n    customizeExpress() {}\r\n\r\n    /**\r\n     * Se encarga de realizar la configuración inicial del servidor\r\n     *\r\n     */\r\n    config(config) {\r\n        if (config && config.helmet) {\r\n            //Security\r\n            this.app.use(helmet(config && lodash.isObject(config.helmet) && config.helmet));\r\n        }\r\n        if (config && config.json) {\r\n            //mount json form parser\r\n            this.app.use(express.json());\r\n        }\r\n\r\n        if (config && config.urlencoded) {\r\n            //mount query string parser\r\n            this.app.use(express.urlencoded({ extended: true }));\r\n        }\r\n        if (config && config.compression) {\r\n            // compress responses\r\n            this.app.use(compression());\r\n        }\r\n        if (config && config.cors) {\r\n            //Enable cors to allow external references\r\n            this.app.options(\"*\", cors(config && lodash.isObject(config.cors) && config.cors));\r\n            this.app.use(cors(config && lodash.isObject(config.cors) && config.cors));\r\n        }\r\n        if (config && config.fileupload) {\r\n            // upload middleware\r\n            this.app.use(fileUpload());\r\n        }\r\n\r\n        if (this.statics) {\r\n            //add static paths\r\n            for (const idx in this.statics) {\r\n                this.app.use(idx, express.static(this.statics[idx]));\r\n            }\r\n        }\r\n\r\n        //Logging\r\n        if (config && config.traceRequests === true && process.env.DISABLE_LOGGER != \"true\") {\r\n            this.app.use((request, response, next) => {\r\n                request.requestTime = Date.now();\r\n                response.on(\"finish\", () => {\r\n                    let pathname = url.parse(request.url).pathname;\r\n                    let end = Date.now() - request.requestTime;\r\n                    let user = (request && request.session && request.session.user_id) || \"\";\r\n\r\n                    console.debug(\"APIRequest[\" + process.pid + \"]::. [\" + request.method + \"] (user:\" + user + \")  \" + pathname + \" |-> took: \" + end + \" ms\");\r\n                    console.debug(JSON.stringify(request.body));\r\n                });\r\n                next();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Crea el cargador automatico de rutas\r\n     */\r\n    configureRoutes(routes) {\r\n        const router = express.Router();\r\n        this.app.use(router);\r\n\r\n        //create controllers\r\n        this.loadRoutes(this.app, routes);\r\n    }\r\n\r\n    /**\r\n     * Instancia la lista de rutas disponibles\r\n     * @param apps\r\n     * @returns {*}\r\n     */\r\n    loadRoutes(app, routes) {\r\n        if (!routes) return;\r\n\r\n        for (const route of routes) {\r\n            if (!route) {\r\n                console.warn(\"Empty route\");\r\n                continue;\r\n            }\r\n            const router = route.configure();\r\n\r\n            if (!lodash.isEmpty(route.routes)) {\r\n                const exAsync = Utils.expressHandler();\r\n                console.log(\"loading shorthand routes\");\r\n                for (const path in route.routes) {\r\n                    const cfg = route.routes[path];\r\n                    for (const method in cfg) {\r\n                        const handler = cfg[method];\r\n                        if (Array.isArray(handler)) {\r\n                            //Securización (keycloak)\r\n                            router[method](path, handler[0], exAsync(handler[1]));\r\n                        } else {\r\n                            router[method](path, exAsync(handler));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (router) {\r\n                app.use(router);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Errores\r\n     */\r\n    errorHandler() {\r\n        // error handler\r\n        this.app.use((err, req, res, next) => {\r\n            let jsRes = new JsonResponse();\r\n            jsRes.success = false;\r\n            jsRes.message = err.message; //!FIXME protect error displaying in REST Responses\r\n            console.error(err);\r\n\r\n            res.status(500).json(jsRes.toJson());\r\n        });\r\n    }\r\n}\r\n","import http from \"http\";\r\nimport https from \"https\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport cluster from \"cluster\";\r\nimport { Server } from \"socket.io\";\r\nimport os from \"os\";\r\nimport { EventEmitter } from \"events\";\r\n\r\nimport ClusterMessages from \"cluster-messages\";\r\n\r\n/**\r\n * Inicializa la escucha del server en modo cluster\r\n */\r\nexport default class ClusterServer extends EventEmitter {\r\n    constructor(app) {\r\n        super();\r\n\r\n        if (!process.env.PORT) {\r\n            console.log(\"Using 3000 as default port. Customize via env PORT.\");\r\n        }\r\n        this.port = this.normalizePort(process.env.PORT || 3000);\r\n        this.clustered = process.env.CLUSTERED;\r\n        this.workers = [];\r\n        this.app = app;\r\n\r\n        this.executeOnlyMain = () => {};\r\n    }\r\n\r\n    setServerCls(cls) {\r\n        this.server = cls;\r\n    }\r\n\r\n    /**\r\n     * Iniciar el servidor en el puerto y con la configuración seleccionadas.\r\n     */\r\n    async start() {\r\n        if (this.clustered == \"true\") {\r\n            this.initClustered();\r\n        } else {\r\n            this.configureSocketIO();\r\n            this.executeOnlyMain();\r\n\r\n            await this.initUnclustered();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Inicializa el servidor de socketio en el puerto siguiente al configurado.\r\n     *\r\n     * Se puede desactivar mediante la config socketio: false al realizar el App.init()\r\n     */\r\n    configureSocketIO() {\r\n        if (this.server.express_config && this.server.express_config.socketio) {\r\n            this.app.io = new Server(this.server.express_config && this.server.express_config.socketio);\r\n            this.app.io.listen(this.port + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Inicializa la clase server encargada del control de las solicitudes en forma multiproceso.\r\n     *\r\n     */\r\n    async initClustered() {\r\n        //Launch cluster\r\n        if (cluster.isPrimary) {\r\n            this.configureSocketIO();\r\n\r\n            this.executeOnlyMain();\r\n\r\n            let messages = new ClusterMessages();\r\n            messages.on(\"event\", (msg, callback) => {\r\n                if (msg && msg.event) {\r\n                    if (process.env.DEBUG_EVENTS == true) {\r\n                        console.debug(`Received '${msg.event}' from ${msg.props.owner} at Master`);\r\n                    }\r\n                    //Desencadenar en el proceso principal tambien\r\n                    this.app.events.emit(msg.event, msg.props, callback);\r\n                }\r\n            });\r\n\r\n            //Count the machine's CPUs\r\n            const cpuCount = os.cpus().length;\r\n\r\n            //Create a worker for each CPU\r\n            for (let idx = 0; idx < cpuCount; idx += 1) {\r\n                this.initWorker();\r\n            }\r\n\r\n            //Listen for dying workers\r\n            cluster.on(\"exit\", (worker) => {\r\n                //Replace the dead worker, we're not sentimental\r\n                console.log(\"Worker \" + worker.id + \" died :(\");\r\n                this.initWorker();\r\n            });\r\n        } else {\r\n            await this.initUnclustered();\r\n            console.log(`Worker ${process.pid} started`);\r\n        }\r\n    }\r\n    /**\r\n     * Inicia un worker\r\n     */\r\n    initWorker() {\r\n        let worker = cluster.fork();\r\n        console.log(`Running worker ${worker.process.pid}`);\r\n\r\n        this.workers.push(worker);\r\n    }\r\n\r\n    /**\r\n     * Inicializa la clase server encargada del control de las solicitudes en un unico proceso.\r\n     *\r\n     */\r\n    async initUnclustered() {\r\n        this.server.port = this.port;\r\n        //create http server\r\n        let server = http.Server(this.server.app);\r\n\r\n        await this.server.initialize();\r\n\r\n        if (this.server.beforeListen) await this.server.beforeListen();\r\n        //listen on provided ports\r\n        server.listen(this.server.port);\r\n\r\n        if (this.server.afterListen) await this.server.afterListen();\r\n\r\n        //add error handler\r\n        server.on(\"error\", (err) => {\r\n            this.handleErrors(err, this.server.port);\r\n        });\r\n        //start listening on port\r\n        server.on(\"listening\", () => {\r\n            console.log(\"Server Worker running on port: \" + this.port + \"!\");\r\n            this.emit(\"listening\", this.port);\r\n        });\r\n\r\n        if (process.env.SSL && process.env.SSL == \"true\") {\r\n            if (!process.env.SSL_KEY || !process.env.SSL_CERT || !process.env.SSL_PASS) {\r\n                console.error(\"Invalid SSL configuration. SLL_KEY, SSL_CERT and SSL_PASS needed\");\r\n                process.exit(0);\r\n            }\r\n\r\n            var key = fs.readFileSync(path.resolve(process.cwd(), process.env.SSL_KEY || \"key.pem\"));\r\n            var cert = fs.readFileSync(path.resolve(process.cwd(), process.env.SSL_CERT || \"cert.pem\"));\r\n\r\n            var options = {\r\n                key: key,\r\n                cert: cert,\r\n                passphrase: process.env.SSL_PASS,\r\n            };\r\n\r\n            if (!process.env.SSL_PORT) {\r\n                console.log(\"Using 3443 as ssl default port. Customize via env SSL_PORT.\");\r\n            }\r\n            var sslPort = this.normalizePort(process.env.SSL_PORT || 3443);\r\n            var serverSsl = https.createServer(options, this.server.app);\r\n            serverSsl.listen(sslPort);\r\n            //add error handler\r\n            serverSsl.on(\"error\", (err) => {\r\n                this.handleErrors(err, sslPort);\r\n            });\r\n            //start listening on port\r\n            serverSsl.on(\"listening\", () => {\r\n                console.log(\"Server Worker running on port: \" + sslPort + \"!\");\r\n                this.emit(\"listening_ssl\", sslPort);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Controla los posibles errores de formato en el puerto\r\n     * @param val\r\n     * @returns {*}\r\n     */\r\n    normalizePort(val) {\r\n        let port = parseInt(val, 10);\r\n\r\n        if (isNaN(port)) {\r\n            //named pipe\r\n            return val;\r\n        }\r\n\r\n        if (port >= 0) {\r\n            //port number\r\n            return port;\r\n        }\r\n\r\n        return false;\r\n    }\r\n    /**\r\n     * Gestiona los errores en el listen del servidor\r\n     */\r\n    handleErrors(error, port) {\r\n        if (error.syscall !== \"listen\") {\r\n            throw error;\r\n        }\r\n\r\n        let bind = typeof port === \"string\" ? \"Pipe \" + port : \"Port \" + port;\r\n\r\n        //handle specific listen errors with friendly messages\r\n        switch (error.code) {\r\n            case \"EACCES\":\r\n                console.error(bind + \" requires elevated privileges\");\r\n                process.exit(1);\r\n                break;\r\n            case \"EADDRINUSE\":\r\n                console.error(bind + \" is already in use\");\r\n                process.exit(1);\r\n                break;\r\n            default:\r\n                throw error;\r\n        }\r\n    }\r\n}\r\n","import cluster from \"cluster\";\r\nimport { EventEmitter } from \"events\";\r\nimport ClusterMessages from \"cluster-messages\";\r\n\r\n/**\r\n * Clase encargada de la generacion de eventos.\r\n */\r\nexport default class EventHandler extends EventEmitter {\r\n    constructor(app) {\r\n        super();\r\n        this.messages = new ClusterMessages();\r\n\r\n        this.app = app; //Se recibe el singleton App para evitar referencias cruzadas\r\n\r\n        if (cluster.isWorker) {\r\n            // Levanto, en los worker, la escucha para recibir los eventos en broadcast de los demas hilos\r\n            this.messages.on(\"event\", (msg, callback) => {\r\n                if (msg && msg.event && process.pid !== msg.props.owner) {\r\n                    if (process.env.DEBUG_EVENTS == true) {\r\n                        console.debug(`Receiving broadcast ${msg.event} - ${process.pid}`);\r\n                    }\r\n                    super.emit(msg.event, { ...msg.props }, callback);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sobreescribir el emitter para notificar a los hijos\r\n     *\r\n     * @param {*} evt\r\n     * @param {*} props\r\n     */\r\n    emit(evt, props, callback) {\r\n        //Desencadenar en local\r\n        super.emit(evt, props, callback);\r\n\r\n        if (evt && props && cluster.isWorker && process.pid !== props.owner) {\r\n            if (process.env.DEBUG_EVENTS == true) {\r\n                console.debug(`${evt} -> Firing from ${process.pid} to master`);\r\n            }\r\n            if (!props) {\r\n                props = {};\r\n            }\r\n            props.owner = process.pid;\r\n            this.messages.send(\"event\", { event: evt, props: { ...props } }, callback);\r\n        }\r\n\r\n        if (evt && props && cluster.isPrimary && this.app && this.app.server && this.app.server.workers) {\r\n            if (process.env.DEBUG_EVENTS == true) {\r\n                console.debug(`${evt} -> Firing from master to workers`);\r\n            }\r\n            this.messages.send(\"event\", { event: evt, props: { ...props } }, callback);\r\n        }\r\n    }\r\n}\r\n","import log4js from \"log4js\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport util from \"util\";\r\n\r\nconst { configure, getLogger } = log4js;\r\n\r\nexport default class Logger {\r\n    static async configure() {\r\n        const readfile = util.promisify(fs.readFile);\r\n\r\n        const json = await readfile(path.resolve(process.cwd(), \"./log4js.json\"), \"utf8\");\r\n\r\n        configure(JSON.parse(json));\r\n\r\n        //Nota para el futuro:\r\n        // Esto sobreescribe los metodos de console.log\r\n        // Es necesario que la sitaxis se mantenga tal cual....\r\n        (() => {\r\n            const log_logger = getLogger(\"log\");\r\n            const error_logger = getLogger(\"error\");\r\n            const debug_logger = getLogger(\"debug\");\r\n            console.log = function () {\r\n                let args = Array.prototype.slice.call(arguments);\r\n                // log.apply(this, args);\r\n                log_logger.log(\"info\", args[0]);\r\n            };\r\n            console.error = function () {\r\n                let args = Array.prototype.slice.call(arguments);\r\n                // error.apply(this, args);\r\n                error_logger.log(\"error\", args[0]);\r\n            };\r\n            console.info = function () {\r\n                let args = Array.prototype.slice.call(arguments);\r\n                // info.apply(this, args);\r\n                log_logger.log(\"info\", args[0]);\r\n            };\r\n            console.debug = function () {\r\n                /*if (global.settings.debug.value) {*/\r\n                let args = Array.prototype.slice.call(arguments);\r\n                // debug.apply(this, [args[1], args[2]]);\r\n                debug_logger.log(\"debug\", args[0]);\r\n            };\r\n\r\n            console.custom = function (logger, level, message) {\r\n                const custom_logger = getLogger(logger);\r\n                custom_logger.log(level, message);\r\n            };\r\n        })();\r\n    }\r\n}\r\n","import express from \"express\";\r\nimport url from \"url\";\r\nimport { JsonResponse, Utils } from \"../common/index.js\";\r\n\r\nimport { pathToRegexp } from \"path-to-regexp\";\r\n\r\nexport default class AuthController {\r\n    constructor(publicPathsList, AuthHandler) {\r\n        this.router = express.Router();\r\n        this.publicPathsList = [...publicPathsList, \"/login\"];\r\n\r\n        this.AuthHandler = AuthHandler;\r\n    }\r\n\r\n    configure() {\r\n        const exAsync = Utils.expressHandler();\r\n        this.router.use(exAsync((...args) => this.check(...args)));\r\n        this.router.post(\r\n            \"/login\",\r\n            exAsync((...args) => this.loginPost(...args))\r\n        );\r\n        this.router.post(\r\n            \"/logout\",\r\n            exAsync((...args) => this.logout(...args))\r\n        );\r\n\r\n        return this.router;\r\n    }\r\n\r\n    /**\r\n     * Controla que los usuarios tengan sesion para acceder a los metodos privados de la API\r\n     *\r\n     * @param {*} request\r\n     * @param {*} response\r\n     * @param {*} next\r\n     */\r\n    async check(request, response, next) {\r\n        try {\r\n            //Rutas ublicas\r\n            for (let path of this.publicPathsList) {\r\n                const expr = pathToRegexp(path);\r\n                if (expr.exec(url.parse(request.url).pathname) !== null) {\r\n                    return next();\r\n                }\r\n            }\r\n\r\n            if (await this.AuthHandler.check(request)) {\r\n                return next();\r\n            }\r\n\r\n            return response.status(403).json(new JsonResponse(false, null, \"Forbidden\").toJson());\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return response.status(403).json(new JsonResponse(false, null, \"Forbidden\").toJson());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Valida los credenciales de un usuario\r\n     *\r\n     * TODO logger console.custom(\"access\", INFO);\r\n     *\r\n     * @param {*} request\r\n     * @param {*} response\r\n     */\r\n    async loginPost(request, response) {\r\n        if (request.body.username) {\r\n            try {\r\n                let data = await this.AuthHandler.validate(request, request.body.username, request.body.password);\r\n                if (data) {\r\n                    return response.status(200).json(new JsonResponse(true, data).toJson());\r\n                }\r\n                return response.status(401).json(new JsonResponse(false, null, \"Unauthorized - Incorrect credentials\").toJson());\r\n            } catch (ex) {\r\n                console.error(ex);\r\n                return response.status(401).json(new JsonResponse(false, null, \"Unauthorized - Error, check log\").toJson());\r\n            }\r\n        }\r\n        return response.status(401).json(new JsonResponse(false, null, \"Unauthorized - Missing parameters\").toJson());\r\n    }\r\n\r\n    /**\r\n     * Cierra la sesion del usuario\r\n     *\r\n     * @param {*} request\r\n     * @param {*} response\r\n     */\r\n    async logout(request, response) {\r\n        if (this.AuthHandler.logout) {\r\n            //Depende de que el authHandler implementado pueda realizar esta accion\r\n            try {\r\n                await this.AuthHandler.logout(request);\r\n                return response.status(200).json(new JsonResponse(true).toJson());\r\n            } catch (ex) {\r\n                console.error(ex);\r\n                return response.status(500).json(new JsonResponse(false, null, ex).toJson());\r\n            }\r\n        }\r\n        return response.status(200).json(new JsonResponse(true).toJson());\r\n    }\r\n}\r\n","export default class IAuthHandler {\r\n    constructor() {\r\n        if (!this.check) {\r\n            throw new Error(\"AuthHandler must have 'check' vethod\");\r\n        }\r\n        if (!this.validate) {\r\n            throw new Error(\"AuthHandler must have 'validate' vethod\");\r\n        }\r\n        // logout method is optional\r\n    }\r\n}\r\n\r\n","import { TokenGenerator, Utils } from '../../common/index.js';\r\nimport IAuthHandler from '../IAuthHandler.js'\r\nimport lodash from 'lodash';\r\nimport moment from 'moment';\r\n\r\nexport default class JwtAuthHandler extends IAuthHandler {\r\n    constructor(UserDao) {\r\n        super();\r\n\r\n        this.tokenGenerator = new TokenGenerator(process.env.JWT_SECRET, { audience: process.env.JWT_AUDIENCE, issuer: process.env.JWT_ISSUER, subject: process.env.JWT_SUBJECT, algorithm: process.env.JWT_ALGORITHM, expiresIn: process.env.JWT_EXPIRES })\r\n\r\n        if (!UserDao) {\r\n            throw new Error(\"Need 'UserDao' for user validation. Create 'UserDao' class extending 'IUserDao'\");\r\n        }\r\n        this.userDao = UserDao;\r\n    }\r\n\r\n    /**\r\n     * Metodo encargado de realizar la comprobacion para validar si la sesion del usuario es válida\r\n     * \r\n     * @param {*} request \r\n     */\r\n    async check(request) {\r\n        if (request.headers.authorization) {\r\n            const token = (request.headers.authorization || '').split(' ')[1] || '';\r\n\r\n            if (!token) {\r\n                console.error(\"Token needed\");\r\n                return false;\r\n            }\r\n            try {\r\n                var decoded = this.tokenGenerator.verify(token);\r\n                const { sub, username, exp } = decoded;\r\n\r\n                if (!sub || !username || moment(exp).isAfter(new Date())) {\r\n                    return false;\r\n                }\r\n\r\n                //Si la sesion es valida, lo introducimos en el contexto de la solicitud\r\n                request.session = { ...request.session, ...decoded };\r\n                return true;\r\n            } catch (ex) {\r\n                console.error(ex);\r\n                return false;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Método encargado de realizar la validación de un usuario. Utiliza IUserDao como interfaz para la realización de la query a BD.\r\n     * \r\n     * @param {*} username \r\n     * @param {*} password \r\n     */\r\n    async validate(request, username, password) {\r\n\r\n        const user = await this.userDao.findByUsername(username);\r\n\r\n        if (user && user.username === username && user.password === Utils.encrypt(password)) {\r\n            return this.tokenGenerator.sign(lodash.omit(user, ['password']));\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n}","import { Utils } from \"../../common/index.js\";\r\nimport IAuthHandler from \"../IAuthHandler.js\";\r\nimport lodash from \"lodash\";\r\n\r\n/**\r\n * Necesario:\r\n *  Instalar -->   express-session y algun session store\r\n * \r\n *  Mas info: https://www.npmjs.com/package/express-session\r\n * \r\n *  App.customizeExpress = () => {\r\n       this.app.use(session({\r\n            secret: 'keyboard cat',\r\n            resave: false,\r\n            saveUninitialized: true,\r\n            cookie: { secure: true }\r\n        }));\r\n    }\r\n */\r\n\r\nexport default class CookieAuthHandler extends IAuthHandler {\r\n    constructor(UserDao) {\r\n        super();\r\n\r\n        if (!UserDao) {\r\n            throw new Error(\"Need 'UserDao' for user validation. Create 'UserDao' class extending 'IUserDao'\");\r\n        }\r\n        this.userDao = UserDao;\r\n    }\r\n\r\n    /**\r\n     * Metodo encargado de realizar la comprobacion para validar si la sesion del usuario es válida\r\n     *\r\n     * @param {*} request\r\n     */\r\n    async check(request) {\r\n        if (request.headers.authorization) {\r\n            //Si se recibe por Auth Basic\r\n            const token = (request.headers.authorization || \"\").split(\" \")[1] || \"\";\r\n\r\n            const creds = Buffer.from(token, \"base64\").toString().split(\":\");\r\n            const login = creds[0];\r\n            const password = creds[1];\r\n\r\n            if (!(await this.validate(request, login, password))) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        if (request.session && request.session.username) {\r\n            //Si hay sesion almacenada\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Método encargado de realizar la validación de un usuario. Utiliza IUserDao como interfaz para la realización de la query a BD.\r\n     *\r\n     * @param {*} username\r\n     * @param {*} password\r\n     */\r\n    async validate(request, username, password) {\r\n        const user = await this.userDao.findByUsername(username);\r\n\r\n        if (user && user.username === username && user.password === Utils.encrypt(password)) {\r\n            request.session = { ...request.session, ...lodash.omit(user, [\"password\"]) };\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} request\r\n     */\r\n    logout(request) {\r\n        return new Promise((resolve) => {\r\n            if (request.session) {\r\n                request.session.destroy(resolve);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import Knex from 'knex'\r\n\r\nclass KnexConnector {\r\n\r\n\r\n    init(config) {\r\n\r\n        /**\r\n         * References the current connection of the app\r\n         * @type {Knex}\r\n         * @public\r\n         */\r\n        this.connection = Knex(config)\r\n    }\r\n\r\n    /**\r\n     * Configura de forma global los aliases de las columnas para utilizar en FQL.\r\n     * \r\n     * La estructura es \r\n     * {\r\n            \"table1\": {\r\n                \"alias1\": \"column1\",\r\n                \"alias2\": \"column2\"\r\n            },\r\n            \"table2\": {\r\n                \"alias1\": \"column1\"\r\n            }\r\n        }\r\n     *\r\n     * @param {*} aliases \r\n     */\r\n    setColumnAliases(aliases) {\r\n        this.columnAliases = aliases;\r\n    }\r\n    \r\n\r\n\r\n    test() {\r\n        return this.connection.raw('select 1+1 as result');\r\n    }\r\n}\r\n\r\n\r\nexport default new KnexConnector();","import { Utils } from \"../../../common/index.js\";\r\n\r\nimport { FQLParser, KnexParser } from \"@landra_sistemas/fql-parser\";\r\nimport KnexConnector from \"../KnexConnector.js\";\r\n\r\nexport default class KnexFilterParser {\r\n    /**\r\n     *\r\n     * @param {*} builder\r\n     * @param {*} string\r\n     * @returns\r\n     */\r\n    static parseQueryString(builder, string, tableName) {\r\n        const options = {\r\n            allowGlobalSearch: true,\r\n            caseInsensitive: true,\r\n        };\r\n        //Agregar los aliases en caso de que se hayan configurado de forma global\r\n        if (KnexConnector.columnAliases && KnexConnector.columnAliases[tableName]) {\r\n            options.aliases = KnexConnector.columnAliases[tableName];\r\n        }\r\n        //Options\r\n        if (KnexConnector.caseInsensitive !== undefined) {\r\n            options.caseInsensitive = KnexConnector.caseInsensitive;\r\n        }\r\n        if (KnexConnector.allowGlobalSearch !== undefined) {\r\n            options.allowGlobalSearch = KnexConnector.allowGlobalSearch;\r\n        }\r\n        const parser = new FQLParser(options);\r\n        const data = parser.parse(string);\r\n\r\n        return new KnexParser(tableName).toKnex(builder, data);\r\n    }\r\n\r\n    /**\r\n     * Convierte un objeto clave valor en un conjunto de filtros.\r\n     *\r\n     * - Filtro estandar:\r\n     *    filters: {\r\n     *       \"column\": \"value\" -> filtro generico exact\r\n     *    }\r\n     * - Filtro Objeto:\r\n     *    filters:{\r\n     *       \"column\": {\r\n     *       \"type\": \"date|between|exists|notexists|greater|greaterEq|less|lessEq|exact|exactI|not|null|notnull|like|likeI\"\r\n     *       \"start\": \"xxx\", //inicio de rango para el filtro de date y between\r\n     *       \"end\": \"xxx\", //fin de rango para el filtro date y between\r\n     *       \"value\": \"xxx\" //valor a utilizar para el resto de filtros\r\n     *     }\r\n     * }\r\n     *  - Filtro Lista:\r\n     *     filters: {\r\n     *       \"column\": [1, 2, 3]\r\n     *     }\r\n     *    Filtro de tipo IN, todos los elementos que coincidan\r\n     *\r\n     * - Definicion de tipos:\r\n     *    date: filtro de fechas desde y hasta\r\n     *    between: filtro entre dos valores concretos\r\n     *    exists: busca si existe la propiedad\r\n     *    notexists: busca si existe la propiedad\r\n     *    greater: mayor que\r\n     *    greaterEq: mayor o igual que\r\n     *    less: menor que\r\n     *    lessEq: menor o igual que\r\n     *    exact: valor exacto\r\n     *    exactI: valor exacto ignorando mayusculas y minusculas\r\n     *    not: distinto de\r\n     *    null: igual a null\r\n     *    notnull: distinto de null\r\n     *    like: filtro like\r\n     *    likeI: filtro like ignorando mayusculas y minusculas\r\n     */\r\n    static parseFilters(builder, filter, tableName) {\r\n        let query = builder;\r\n\r\n        for (let prop in filter) {\r\n            let elm = filter[prop];\r\n\r\n            if (typeof elm === \"object\") {\r\n                switch (elm.type) {\r\n                    case \"fql\":\r\n                        query = KnexFilterParser.parseQueryString(query, elm.value, tableName);\r\n                        break;\r\n                    case \"date\":\r\n                    case \"between\":\r\n                        if (elm.start && elm.end) {\r\n                            query = query.whereBetween(prop, [elm.start, elm.end]);\r\n                        }\r\n                        if (elm.start && !elm.end) {\r\n                            query = query.where(prop, \">=\", elm.start);\r\n                        }\r\n                        if (!elm.start && elm.end) {\r\n                            query = query.where(prop, \">=\", elm.end);\r\n                        }\r\n                        break;\r\n                    case \"dateraw\":\r\n                    case \"betweenraw\":\r\n                        if (elm.start && elm.end) {\r\n                            query = query.whereRaw(`${prop} BETWEEN ? AND ?`, [elm.start, elm.end]);\r\n                        }\r\n                        if (elm.start && !elm.end) {\r\n                            query = query.whereRaw(`${prop} >= ?`, [elm.start]);\r\n                        }\r\n                        if (!elm.start && elm.end) {\r\n                            query = query.whereRaw(`${prop} >= ?`, [elm.end]);\r\n                        }\r\n                        break;\r\n                    case \"jsonb\":\r\n                        query = query.whereRaw(`${prop} ILIKE ?`, [\"%\" + elm.value + \"%\"]);\r\n                        break;\r\n                    case \"full-text-psql\":\r\n                        query = query.whereRaw(`to_tsvector(${prop}::text) @@ to_tsquery(?)`, [elm.value]);\r\n                        break;\r\n\r\n                    case \"greater\":\r\n                    case \"greaterraw\":\r\n                        query = query.whereRaw(`${prop} > ?`, [elm.value]);\r\n                        break;\r\n                    case \"greaterEq\":\r\n                    case \"greaterEqraw\":\r\n                        query = query.whereRaw(`${prop} >= ?`, [elm.value]);\r\n                        break;\r\n                    case \"less\":\r\n                    case \"lessraw\":\r\n                        query = query.whereRaw(`${prop} < ?`, [elm.value]);\r\n                        break;\r\n                    case \"lessEq\":\r\n                    case \"lessEqraw\":\r\n                        query = query.whereRaw(`${prop} <= ?`, [elm.value]);\r\n                        break;\r\n                    case \"exists\":\r\n                        query = query.whereExists(prop);\r\n                        break;\r\n                    case \"notexists\":\r\n                        query = query.whereNotExists(prop);\r\n                        break;\r\n                    case \"exact\":\r\n                    case \"exactraw\":\r\n                        query = query.whereRaw(`${prop} = ?`, [elm.value]);\r\n                        break;\r\n                    case \"in\":\r\n                        let propComplex = prop;\r\n                        if (propComplex.includes(\",\")) {\r\n                            propComplex = prop.split(\",\");\r\n                        }\r\n                        if (!Array.isArray(elm.value) && elm.value != undefined) {\r\n                            query = query.whereIn(propComplex, elm.value.split(\",\"));\r\n                        } else {\r\n                            if (elm.value != undefined) {\r\n                                query = query.whereIn(propComplex, elm.value);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"inraw\":\r\n                        if (!Array.isArray(elm.value) && elm.value != undefined) {\r\n                            query = query.whereRaw(`${prop} IN (?)`, [\r\n                                elm.value\r\n                                    .split(\",\")\r\n                                    .map((e) => `'${e}'`)\r\n                                    .join(\",\"),\r\n                            ]);\r\n                        } else {\r\n                            if (elm.value != undefined) {\r\n                                query = query.whereRaw(`${prop} IN (?)`, [elm.value.map((e) => `'${e}'`).join(\",\")]);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"not\":\r\n                    case \"notraw\":\r\n                        query = query.whereRaw(`${prop} != ?`, [elm.value]);\r\n                        break;\r\n                    case \"like\":\r\n                    case \"likeraw\":\r\n                        let value_likeraw = Utils.replaceAll(elm.value, \"*\", \"%\");\r\n                        query = query.whereRaw(` ${prop} LIKE ?`, [value_likeraw]);\r\n                        break;\r\n                    case \"notlike\":\r\n                    case \"notlikeraw\":\r\n                        let value_nolikeraw = Utils.replaceAll(elm.value, \"*\", \"%\");\r\n                        query = query.whereRaw(` ${prop} NOT LIKE ?`, [value_nolikeraw]);\r\n                        break;\r\n                    case \"likeI\":\r\n                        let value_rawilike = Utils.replaceAll(elm.value, \"*\", \"%\");\r\n                        query = query.whereRaw(` ${prop} ILIKE ?`, [value_rawilike]);\r\n                        break;\r\n                    case \"notlikeI\":\r\n                        let value_notrawilike = Utils.replaceAll(elm.value, \"*\", \"%\");\r\n                        query = query.whereRaw(` ${prop} NOT ILIKE ?`, [value_notrawilike]);\r\n                        break;\r\n                    case \"null\":\r\n                    case \"nullraw\":\r\n                        query = query.whereRaw(`${prop} is NULL`);\r\n                        break;\r\n                    case \"notnull\":\r\n                    case \"notnullraw\":\r\n                        query = query.whereRaw(`${prop} is not NULL`);\r\n                        break;\r\n                }\r\n            } else {\r\n                //Si el valor no es un objeto se devuelve\r\n                query = query.where(prop, elm);\r\n            }\r\n        }\r\n\r\n        // console.log(query.toSQL());\r\n        return query;\r\n    }\r\n\r\n    /**\r\n     * Conversion de un objeto {property: XX, direction: ASC|DESC - ascend|descend} a un ORDER BY\r\n     *\r\n     * @param {*} sorts\r\n     */\r\n    static parseSort(sort) {\r\n        if (!sort.field || !sort.direction) {\r\n            return 1;\r\n        }\r\n\r\n        let direction = \"ASC\";\r\n        if (sort.direction === \"descend\") {\r\n            direction = \"DESC\";\r\n        }\r\n\r\n        return sort.field + \" \" + direction;\r\n    }\r\n}\r\n","import KnexFilterParser from \"../filters/KnexFilterParser.js\";\r\nimport KnexConnector from \"../KnexConnector.js\";\r\n\r\nimport lodash from \"lodash\";\r\n\r\n/**\r\n * Crear un dao con los métodos básicos\r\n */\r\nexport default class BaseKnexDao {\r\n    constructor() {\r\n        this.tableName = \"\";\r\n    }\r\n\r\n    loadAllData(start, limit) {\r\n        return KnexConnector.connection\r\n            .select(\"*\")\r\n            .from(this.tableName)\r\n            .limit(limit || 10000)\r\n            .offset(start);\r\n    }\r\n\r\n    async loadFilteredData(filters, start, limit) {\r\n        let sorts = 1;\r\n        if (filters.sort) {\r\n            sorts = KnexFilterParser.parseSort(filters.sort);\r\n        }\r\n\r\n        return KnexConnector.connection\r\n            .from(this.tableName)\r\n            .where((builder) => KnexFilterParser.parseFilters(builder, lodash.omit(filters, [\"sort\", \"start\", \"limit\"]), this.tableName))\r\n            .orderByRaw(sorts)\r\n            .limit(limit)\r\n            .offset(start);\r\n    }\r\n\r\n    async countFilteredData(filters) {\r\n        let data = await KnexConnector.connection\r\n            .from(this.tableName)\r\n            .where((builder) => KnexFilterParser.parseFilters(builder, lodash.omit(filters, [\"sort\", \"start\", \"limit\"]), this.tableName))\r\n            .count(\"id\", { as: \"total\" });\r\n\r\n        return data && data[0].total;\r\n    }\r\n\r\n    async loadById(objectId) {\r\n        const data = await KnexConnector.connection.from(this.tableName).where(\"id\", objectId);\r\n\r\n        if (data && data[0]) {\r\n            return data[0];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    save(object) {\r\n        return KnexConnector.connection.from(this.tableName).insert(object).returning(\"*\");\r\n    }\r\n    update(objectId, newObject) {\r\n        return KnexConnector.connection.from(this.tableName).where(\"id\", objectId).update(newObject).returning(\"*\");\r\n    }\r\n    async delete(objectId) {\r\n        const existing = await this.loadById(objectId);\r\n        if (!existing) {\r\n            throw \"NotFound\";\r\n        }\r\n        return KnexConnector.connection.from(this.tableName).where(\"id\", objectId).delete();\r\n    }\r\n}\r\n","import BaseKnexDao from \"./knex/dao/BaseKnexDao.js\";\r\n\r\nexport default class IUserDao extends BaseKnexDao {\r\n    constructor(tableName) {\r\n        super(tableName);\r\n\r\n        if (!this.findByUsername) {\r\n            throw new Error(\"AuthHandler must have 'findByUsername' method\");\r\n        }\r\n    }\r\n}\r\n","import express from \"express\";\r\nimport { JsonResponse, Utils } from \"../common/index.js\";\r\n\r\nexport class BaseController {\r\n    constructor() {\r\n        this.router = express.Router();\r\n        this.routes = {};\r\n        //Example routes shorthand\r\n        /*\r\n         {\r\n            \"/\": {\r\n                \"get\": this.listEntidad.bind(this),\r\n                \"post\": this.listEntidad.bind(this)\r\n            }\r\n         } \r\n         */\r\n    }\r\n\r\n    configure(entity, config) {\r\n        if (!entity) {\r\n            return this.router;\r\n        }\r\n\r\n        const exAsync = Utils.expressHandler();\r\n        this.router.get(\r\n            `/${entity}`,\r\n            exAsync((...args) => this.listEntidad(...args))\r\n        );\r\n        this.router.post(\r\n            `/${entity}/list`,\r\n            exAsync((...args) => this.listEntidad(...args))\r\n        );\r\n        this.router.get(\r\n            `/${entity}/:id`,\r\n            exAsync((...args) => this.getEntidad(...args))\r\n        );\r\n        this.router.post(\r\n            `/${entity}`,\r\n            exAsync((...args) => this.saveEntidad(...args))\r\n        );\r\n        this.router.put(\r\n            `/${entity}/:id`,\r\n            exAsync((...args) => this.updateEntidad(...args))\r\n        );\r\n        this.router.delete(\r\n            `/${entity}/:id`,\r\n            exAsync((...args) => this.deleteEntidad(...args))\r\n        );\r\n\r\n        this.service = config.service;\r\n        this.table = config.table;\r\n\r\n        return this.router;\r\n    }\r\n\r\n    /**\r\n     * Lista entidades en la aplicacion, es posible enviarle parametros de filtrado.\r\n     *\r\n     *\r\n     * @api {post} /:entidad/list Listar entidades\r\n     * @apiName Listar entidades\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async listEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n            let filters = request.method === \"POST\" ? request.body : request.query && request.query.filters ? JSON.parse(request.query.filters) : {};\r\n\r\n            let data = await service.list(filters, filters.start, filters.limit);\r\n            let jsRes = new JsonResponse(true, data.data, null, data.total);\r\n\r\n            response.json(jsRes.toJson());\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    }\r\n    /**\r\n     *Obtiene un elemento concreto mediante su identificador\r\n     *\r\n     *\r\n     * @api {get} /:entidad/:id Obtener entidad\r\n     * @apiName Obtener entidad\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async getEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n            let data = await service.loadById(request.params.id);\r\n            let jsRes = new JsonResponse(true, data);\r\n            let code = 200;\r\n            if (data == null) {\r\n                code = 404;\r\n                let message = \"Element not found\";\r\n                jsRes = new JsonResponse(false, null, message, 0);\r\n            }\r\n\r\n            response.status(code).json(jsRes.toJson());\r\n        } catch (e) {\r\n            console.error(e);\r\n            let message = \"\";\r\n            if (e.code == \"22P02\") {\r\n                //PostgreSQL error Code form string_to_UUID\r\n                message = \"Expected uiid\";\r\n            }\r\n            let jsRes = new JsonResponse(false, null, message, 0);\r\n            response.status(400).json(jsRes.toJson());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Almacena un elemento en BD\r\n     *\r\n     *\r\n     * @api {post} /:entidad/:id Crear entidad\r\n     * @apiName Crear entidad\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async saveEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n\r\n            let data = await service.save(request.body);\r\n            let jsRes = new JsonResponse(true, (data && data[0]) || { id: request.body.id });\r\n\r\n            response.setHeader(\"Location\", `/entity/${jsRes.data.id}`);\r\n            response.status(201).json(jsRes.toJson());\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Almacena un elemento en BD\r\n     *\r\n     *\r\n     * @api {put} /:entidad/:id Actualizar entidad\r\n     * @apiName Actualizar entidad\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async updateEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n\r\n            let data = await service.update(request.params.id, request.body);\r\n            let jsRes = new JsonResponse(true, (data && data[0]) || { id: request.body.id });\r\n\r\n            response.json(jsRes.toJson());\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Elimina un elemento correspondiente al identificador recibido\r\n     *\r\n     *\r\n     * @api {delete} /:entidad/:id/delete Delete entidad\r\n     * @apiName Eliminar entidad\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async deleteEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n            let data = await service.delete(request.params.id);\r\n            let jsRes = new JsonResponse(true, data);\r\n\r\n            response.status(204).json(jsRes.toJson());\r\n        } catch (e) {\r\n            console.error(e);\r\n            if (e == \"NotFound\") {\r\n                let message = \"Element not found\";\r\n                let jsRes = new JsonResponse(false, null, message, 0);\r\n                response.status(404).json(jsRes.toJson());\r\n            } else {\r\n                next(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { BaseKnexDao } from \"../db/index.js\";\r\n\r\nexport class BaseService {\r\n    constructor(cls, table) {\r\n        if (cls) {\r\n            this.dao = new cls();\r\n        } else {\r\n            this.dao = new BaseKnexDao(); //El sistema por defecto utiliza knex, si se pasa un dao personalizado se puede sobreescribir este comportamiento\r\n        }\r\n        if (table) {\r\n            this.dao.tableName = table;\r\n        }\r\n    }\r\n    /**\r\n     * Obtencion de una lista de elementos.\r\n     *\r\n     * filters, es opcional. Si no se pasan se devuelve lo que hay ;\r\n     */\r\n    async list(filters, start, limit) {\r\n        //Pagination\r\n        const st = start || 0;\r\n        const lm = limit || 1000; //Default limit\r\n\r\n        let response = {};\r\n        response.total = await this.dao.countFilteredData(filters, st, lm);\r\n\r\n        if (filters && Object.keys(filters).length !== 0) {\r\n            let filteredData = await this.dao.loadFilteredData(filters, st, lm);\r\n            response.data = filteredData;\r\n            return response;\r\n        }\r\n\r\n        response.data = await this.dao.loadAllData(start, limit);\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Obtencion de un elemento mediante su identificador\r\n     */\r\n    loadById(id) {\r\n        return this.dao.loadById(id);\r\n    }\r\n    /**\r\n     * Metodo de creacion.\r\n     *\r\n     * Si el identificador se pasa como undefined se creara un nuevo elemento,\r\n     * sino se modifica el correspondiente.\r\n     */\r\n    save(data) {\r\n        //Create\r\n        return this.dao.save(data);\r\n    }\r\n    /**\r\n     * Metodo de creacion.\r\n     *\r\n     * Si el identificador se pasa como undefined se creara un nuevo elemento,\r\n     * sino se modifica el correspondiente.\r\n     */\r\n    update(id, data) {\r\n        if (id) {\r\n            //Update\r\n            return this.dao.update(id, data);\r\n        }\r\n    }\r\n    /**\r\n     * Metodo de eliminado.\r\n     *\r\n     * El identificador es obligatorio para poder localizar el elemento a eliminar.\r\n     */\r\n    delete(id) {\r\n        if (id) {\r\n            return this.dao.delete(id);\r\n        }\r\n    }\r\n}\r\n","import { I18nLoader, Utils } from \"./common/index.js\";\r\nimport { EventHandler } from \"./events/index.js\";\r\nimport { ClusterServer, Server } from \"./server/index.js\";\r\nimport { Logger } from \"./logger/index.js\";\r\n\r\nimport net from \"net\";\r\nimport repl from \"repl\";\r\nimport { KnexConnector } from \"./db/index.js\";\r\nimport Runtime from \"./common/Runtime.js\";\r\n\r\nclass App {\r\n    constructor() {\r\n        this.serverClass = Server;\r\n        this.clusterClass = ClusterServer;\r\n    }\r\n\r\n    /**\r\n     * Inicializa la runtime de la aplicación para poder recibir parámetros por consola y generar claves.\r\n     * @returns\r\n     */\r\n    runtime() {\r\n        return Runtime();\r\n    }\r\n\r\n    /**\r\n     * Initializa las configuraciones para la app\r\n     *\r\n     */\r\n    async init(serverConfig) {\r\n        if (process.env.DISABLE_LOGGER != \"true\") {\r\n            await Logger.configure();\r\n        }\r\n\r\n        //Instanciar la clase server\r\n        const server = new this.serverClass(serverConfig, this.statics, this.routes);\r\n        if (this.customizeExpress) {\r\n            server.customizeExpress = this.customizeExpress;\r\n        }\r\n        if (this.beforeListen) {\r\n            server.beforeListen = this.beforeListen;\r\n        }\r\n        if (this.afterListen) {\r\n            server.afterListen = this.afterListen;\r\n        }\r\n\r\n        /**\r\n         * Gestor de eventos\r\n         * @type {EventHandler}\r\n         * @public\r\n         */\r\n        this.events = new EventHandler(this);\r\n\r\n        /**\r\n         * Gestor de traducciones\r\n         * @type {I18nLoader}\r\n         * @public\r\n         */\r\n        this.i18n = new I18nLoader();\r\n        await this.i18n.load();\r\n        /**\r\n         * Servidor actual\r\n         * @type {ClusterServer}\r\n         * @public\r\n         */\r\n        this.server = new this.clusterClass(this);\r\n\r\n        this.server.setServerCls(server);\r\n        this.server.executeOnlyMain = () => {\r\n            if (this.executeOnlyMain) this.executeOnlyMain();\r\n\r\n            if (process.env.REPL_ENABLED == \"true\") {\r\n                this.startRepl();\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Ejecuta el servidor con la configuracion de #init()\r\n     */\r\n    async start() {\r\n        if (!this.server) {\r\n            throw new Error(\"Call init first\");\r\n        }\r\n        await this.server.start();\r\n    }\r\n\r\n    /**\r\n     * Inicia el server replify para poder conectar terminales remotas\r\n     *\r\n     *\r\n     * Para que arranque es necesario especificar REPL_ENABLED en el archivo .env\r\n     */\r\n    startRepl() {\r\n        try {\r\n            net.createServer((socket) => {\r\n                const remote = repl.start({\r\n                    prompt: \"lisco::remote> \",\r\n                    input: socket,\r\n                    output: socket,\r\n                    terminal: true,\r\n                    useColors: true,\r\n                    preview: false,\r\n                });\r\n                remote.context.app = this;\r\n                remote.context.Utils = Utils;\r\n                remote.context.db = KnexConnector.connection;\r\n                remote.on(\"exit\", socket.end.bind(socket));\r\n            }).listen(process.env.REPL_PORT || 5001);\r\n        } catch (e) {\r\n            console.log(\"Remote REPL Conn: \" + e);\r\n        }\r\n\r\n        console.log(`Remote REPL started on port ${process.env.REPL_PORT || 5001}`);\r\n    }\r\n}\r\n\r\nexport default new App();\r\n","import Utils from \"./Utils.js\";\r\n\r\nimport yargs from \"yargs/yargs\";\r\nimport { hideBin } from \"yargs/helpers\";\r\nexport default function Runtime() {\r\n    const argv = yargs(hideBin(process.argv))\r\n        .usage(\r\n            `Como usar: \r\n            node execute.js [--generateKeys , --encrypt xxx] \r\n            \r\n            ---> Si no se especifican parámetros el servidor arrancará normalmente.`\r\n        )\r\n        .alias('g', 'generateKeys')\r\n        .describe('g', 'Genera unas claves para la aplicación')\r\n        .alias('c', 'encrypt')\r\n        .describe('c', 'Codifica el String proporcionado en base a la contraseña de .env')\r\n        .nargs('c', 1)\r\n        .help(\"h\")\r\n        .alias(\"h\", \"help\").argv;\r\n\r\n    //Parámetro para no arrancar el servidor y generar las claves JWT\r\n    if (argv.generateKeys) {\r\n        console.log(\"Generando claves para encriptación:\");\r\n        console.log(Utils.generateKeys());\r\n        return process.exit(1);\r\n    }\r\n\r\n    if (argv.encrypt) {\r\n        console.log(\"Resultado encryptación:\");\r\n        console.log(Utils.encrypt(argv.encrypt));\r\n        return process.exit(1);\r\n    }\r\n}\r\n"],"names":["Utils","arrayToLower","mcArray","join","toLowerCase","split","replaceAll","str","find","replace","RegExp","encrypt","text","secret","Buffer","from","process","env","CRYPT_SECRET","iv","CRYPT_IV","cipher","crypto","createCipheriv","encrypted","update","concat","toString","decrypt","encryptedText","decipher","createDecipheriv","decrypted","sleep","ms","util","promisify","setTimeout","promise_sleep","generateKeys","key","randomBytes","flattenObject","ob","flatObject","toReturn","i","hasOwnProperty","Array","constructor","x","isNaN","unflatten","data","result","keys","reduce","r","e","j","Number","length","expressHandler","fn","args","slice","call","arguments","fnReturn","apply","next","resolve","I18nLoader","this","watcher","load","custom","_this2","lang","DEFAULT_LANG","currentData","currentDataFlat","cwd","chokidar","watch","file","ignored","persistent","on","path","loadFile","Promise","_this4","readfile","fs","readFile","body","recover","parsedData","JSON","parse","then","_catch","ex","code","console","log","error","translate","_exit2","_temp3","_result2","_this6","_temp4","JsonResponse","success","message","total","toJson","privateKey","options","sign","payload","jwtSignOptions","jwtid","uuid","v4","jsonwebtoken","verify","token","refresh","sub","iss","aud","iat","exp","nbf","jti","Server","config","statics","routes","app","express","express_config","lodash","defaultsDeep","helmet","json","urlencoded","compression","cors","origin","credentials","fileupload","socketio","transports","traceRequests","initialize","configureRoutes","errorHandler","customizeExpress","use","isObject","extended","fileUpload","idx","DISABLE_LOGGER","request","response","requestTime","Date","now","pathname","url","debug","pid","method","session","user_id","end","stringify","router","Router","loadRoutes","_step","_iterator","_createForOfIteratorHelperLoose","done","value","route","configure","isEmpty","exAsync","cfg","isArray","handler","warn","err","req","res","jsRes","status","_this","PORT","port","normalizePort","clustered","CLUSTERED","workers","executeOnlyMain","setServerCls","cls","server","start","_this3","_temp2","configureSocketIO","initUnclustered","initClustered","io","listen","_this5","cluster","isPrimary","ClusterMessages","msg","callback","event","DEBUG_EVENTS","props","owner","events","emit","cpuCount","os","cpus","initWorker","worker","id","fork","push","_this7","http","handleErrors","SSL","SSL_KEY","SSL_CERT","SSL_PASS","exit","readFileSync","cert","passphrase","SSL_PORT","serverSsl","https","createServer","sslPort","_temp5","afterListen","_temp6","_temp7","beforeListen","_temp8","val","parseInt","syscall","bind","EventEmitter","messages","isWorker","_EventEmitter","prototype","_assertThisInitialized","_extends","evt","send","log4js","getLogger","Logger","log_logger","error_logger","debug_logger","info","logger","level","AuthController","publicPathsList","AuthHandler","check","post","loginPost","logout","pathToRegexp","exec","_this2$AuthHandler$ch","_exit5","_result","username","validate","password","_response$status$json4","_response$status$json2","_response$status$json3","_exit7","_response$status$json5","_response$status$json6","IAuthHandler","Error","JwtAuthHandler","UserDao","tokenGenerator","JWT_SECRET","audience","JWT_AUDIENCE","issuer","JWT_ISSUER","subject","JWT_SUBJECT","algorithm","JWT_ALGORITHM","expiresIn","JWT_EXPIRES","userDao","headers","authorization","decoded","moment","isAfter","findByUsername","user","omit","_IAuthHandler","creds","_this2$validate","destroy","KnexConnector$1","init","connection","Knex","setColumnAliases","aliases","columnAliases","test","raw","KnexFilterParser","parseQueryString","builder","string","tableName","allowGlobalSearch","caseInsensitive","KnexConnector","undefined","FQLParser","KnexParser","toKnex","parseFilters","filter","query","prop","elm","type","whereBetween","where","whereRaw","whereExists","whereNotExists","propComplex","includes","whereIn","map","value_likeraw","value_nolikeraw","value_rawilike","value_notrawilike","parseSort","sort","field","direction","loadAllData","limit","select","offset","loadFilteredData","filters","sorts","orderByRaw","countFilteredData","count","as","loadById","objectId","save","object","insert","returning","newObject","_this8","existing","BaseKnexDao","BaseController","entity","get","listEntidad","getEntidad","saveEntidad","put","updateEntidad","deleteEntidad","service","table","_proto","list","reject","params","setHeader","_this9","_this11","_temp10","BaseService","dao","st","lm","_this$dao$countFilter","_exit","_this$dao$loadAllData","_temp","Object","filteredData","serverClass","clusterClass","ClusterServer","runtime","argv","yargs","hideBin","usage","alias","describe","nargs","help","Runtime","serverConfig","EventHandler","i18n","REPL_ENABLED","startRepl","net","socket","remote","repl","prompt","input","output","terminal","useColors","preview","context","db","REPL_PORT","App"],"mappings":"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"}