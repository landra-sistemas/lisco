{"version":3,"file":"lisco.umd.js","sources":["../src/common/Utils.js","../src/common/I18nLoader.js","../src/common/JsonResponse.js","../src/common/TokenGenerator.js","../src/server/Server.js","../src/server/ClusterServer.js","../src/events/EventHandler.js","../src/logger/Logger.js","../src/auth/AuthController.js","../src/auth/IAuthHandler.js","../src/auth/jwt/JwtAuthHandler.js","../src/auth/cookie/CookieAuthHandler.js","../src/db/knex/KnexConnector.js","../src/db/knex/filters/KnexFilterParser.js","../src/db/knex/dao/BaseKnexDao.js","../src/db/IUserDao.js","../src/base/BaseController.js","../src/base/BaseService.js","../src/common/Runtime.js","../src/App.js"],"sourcesContent":["import crypto from 'crypto';\r\nimport util from 'util';\r\n\r\nexport default class Utils {\r\n    static arrayToLower(mcArray) {\r\n        let tmp = mcArray.join('~').toLowerCase();\r\n        return tmp.split('~');\r\n    }\r\n\r\n    static replaceAll(str, find, replace) {\r\n        return str.replace(new RegExp(find.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replace);\r\n    }\r\n\r\n    /**\r\n     * Metodo de encript para las contraseñas y demas.\r\n     * \r\n     * @param {*} text \r\n     */\r\n    static encrypt(text) {\r\n        const algorithm = 'aes-256-cbc';\r\n        const secret = Buffer.from(process.env.CRYPT_SECRET, 'hex');\r\n        const iv = Buffer.from(process.env.CRYPT_IV, 'hex');\r\n\r\n        const cipher = crypto.createCipheriv(algorithm, secret, iv);\r\n        let encrypted = cipher.update(text);\r\n        encrypted = Buffer.concat([encrypted, cipher.final()]);\r\n        return encrypted.toString('hex');\r\n    }\r\n\r\n    /**\r\n     * Metodo de decrypt para las contraseñas y demas\r\n     * @param {*} text \r\n     */\r\n    static decrypt(text) {\r\n        const algorithm = 'aes-256-cbc';\r\n        const secret = Buffer.from(process.env.CRYPT_SECRET, 'hex');\r\n        const iv = Buffer.from(process.env.CRYPT_IV, 'hex');\r\n\r\n        const encryptedText = Buffer.from(text, 'hex');\r\n\r\n        const decipher = crypto.createDecipheriv(algorithm, secret, iv);\r\n        let decrypted = decipher.update(encryptedText);\r\n        decrypted = Buffer.concat([decrypted, decipher.final()]);\r\n        return decrypted.toString();\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * Utiliza una promise para ejecutar un setTimeout y hacer un falso sleep.\r\n     * \r\n     * @param {*} ms \r\n     */\r\n    static sleep(ms) {\r\n        let promise_sleep = util.promisify(setTimeout);\r\n\r\n        return promise_sleep(ms);\r\n    }\r\n\r\n    /**\r\n     * Genera dos claves para los metodos crypt y decrypt\r\n     */\r\n    static generateKeys() {\r\n        return {\r\n            key: crypto.randomBytes(32).toString('hex'),\r\n            iv: crypto.randomBytes(16).toString('hex')\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * \"aplana\" un objeto jerarquico en una estructura clave-valor.\r\n     * \r\n     * @param {*} ob \r\n     * @returns \r\n     */\r\n    static flattenObject(ob) {\r\n        let toReturn = {};\r\n        let flatObject;\r\n        for (let i in ob) {\r\n            if (!ob.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n            //Devolver los arrays tal cual\r\n            if (ob[i] && Array === ob[i].constructor) {\r\n                toReturn[i] = ob[i];\r\n                continue;\r\n            }\r\n            if ((typeof ob[i]) === 'object') {\r\n                flatObject = Utils.flattenObject(ob[i]);\r\n                for (let x in flatObject) {\r\n                    if (!flatObject.hasOwnProperty(x)) {\r\n                        continue;\r\n                    }\r\n                    //Exclude arrays from the final result\r\n                    if (flatObject[x] && Array === flatObject.constructor) {\r\n                        continue;\r\n                    }\r\n                    toReturn[i + (!!isNaN(x) ? '.' + x : '')] = flatObject[x];\r\n                }\r\n            } else {\r\n                toReturn[i] = ob[i];\r\n            }\r\n        }\r\n        return toReturn;\r\n    }\r\n\r\n    /**\r\n     * Invierte un objeto aplanado recuperando su forma original\r\n     * \r\n     * @param {*} data \r\n     * @returns \r\n     */\r\n    static unflatten(data) {\r\n        var result = {}\r\n        for (var i in data) {\r\n            var keys = i.split('.')\r\n            keys.reduce(function (r, e, j) {\r\n                return r[e] || (r[e] = isNaN(Number(keys[j + 1])) ? (keys.length - 1 == j ? data[i] : {}) : [])\r\n            }, result)\r\n        }\r\n        return result\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @returns \r\n     */\r\n    static expressHandler() {\r\n\r\n        return (fn) => {\r\n            return function asyncUtilWrap(...args) {\r\n                const fnReturn = fn(...args);\r\n                const next = args[args.length - 1];\r\n                return Promise.resolve(fnReturn).catch((e) => {\r\n                    return next(e);\r\n                });\r\n            };\r\n        };\r\n    }\r\n}\r\n\r\n","import fs from \"fs\";\r\nimport util from \"util\";\r\nimport Utils from \"./Utils.js\";\r\n\r\nimport chokidar from \"chokidar\";\r\n\r\nexport default class I18nLoader {\r\n    constructor() {\r\n        this.watcher = {};\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param lang\r\n     * @param callback\r\n     */\r\n    async load(custom) {\r\n        const lang = custom || process.env.DEFAULT_LANG;\r\n\r\n        if (!this.currentData) {\r\n            this.currentData = {};\r\n        }\r\n        if (!this.currentDataFlat) {\r\n            this.currentDataFlat = {};\r\n        }\r\n\r\n        const file = process.cwd() + \"/i18n/lang_\" + lang + \".json\";\r\n\r\n        // Initialize watcher.\r\n        this.watcher[lang] = chokidar.watch(file, {\r\n            ignored: /(^|[/\\\\])\\../, // ignore dotfiles\r\n            persistent: true,\r\n        });\r\n        //Add change watcher\r\n        this.watcher[lang].on(\"change\", (path) => this.loadFile(path, lang));\r\n\r\n        //Initialize file load\r\n        await this.loadFile(file, lang);\r\n    }\r\n\r\n    /**\r\n     * Carga el archivo de traducciones.\r\n     *\r\n     * @param {*} file\r\n     * @param {*} lang\r\n     */\r\n    async loadFile(file, lang) {\r\n        const readfile = util.promisify(fs.readFile);\r\n        try {\r\n            const data = await readfile(file, \"utf8\");\r\n            var parsedData = JSON.parse(data);\r\n\r\n            this.currentDataFlat[lang] = Utils.flattenObject(parsedData);\r\n            this.currentData[lang] = parsedData;\r\n        } catch (ex) {\r\n            if (ex?.code === \"ENOENT\") {\r\n                return console.log(\"Lang file does not exist. Create it on ./i18n/lang_{xx}.json\");\r\n            }\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} key\r\n     */\r\n    async translate(key, lang) {\r\n        if (!lang) lang = process.env.DEFAULT_LANG;\r\n\r\n        if (this.currentDataFlat && this.currentDataFlat[lang] && this.currentDataFlat[lang][key]) {\r\n            return this.currentData[lang][key];\r\n        }\r\n\r\n        if (!this.currentDataFlat || !this.currentDataFlat[lang]) {\r\n            await this.load(lang);\r\n            if (this.currentDataFlat && this.currentDataFlat[lang] && this.currentDataFlat[key]) {\r\n                return this.currentDataFlat[lang][key];\r\n            }\r\n        }\r\n        return \"undefined.\" + key;\r\n    }\r\n}\r\n","export default class JsonResponse {\r\n    constructor(success, data, message, total) {\r\n        this.data = data;\r\n        this.success = success;\r\n        this.total = total;\r\n        this.message = message || '';\r\n    }\r\n\r\n    toJson() {\r\n        return (this);\r\n    }\r\n}\r\n","/**\r\n * Example to refresh tokens using https://github.com/auth0/node-jsonwebtoken\r\n * It was requested to be introduced at as part of the jsonwebtoken library,\r\n * since we feel it does not add too much value but it will add code to mantain\r\n * we won't include it.\r\n *\r\n * I create this gist just to help those who want to auto-refresh JWTs.\r\n */\r\nimport jsonwebtoken from 'jsonwebtoken';\r\nimport * as uuid from 'uuid';\r\n\r\nexport default class TokenGenerator {\r\n\r\n    constructor(privateKey, options) {\r\n        this.privateKey = privateKey;\r\n        this.options = options;\r\n    }\r\n\r\n    sign(payload) {\r\n        const jwtSignOptions = { ...this.options, jwtid: uuid.v4() };\r\n        return jsonwebtoken.sign(payload, this.privateKey, jwtSignOptions);\r\n    }\r\n\r\n    verify(token) {\r\n        return jsonwebtoken.verify(token, this.privateKey, this.options);\r\n    }\r\n\r\n    refresh(token) {\r\n        const payload = jsonwebtoken.verify(token, this.privateKey, this.options);\r\n        delete payload.sub;\r\n        delete payload.iss;\r\n        delete payload.aud;\r\n        delete payload.iat;\r\n        delete payload.exp;\r\n        delete payload.nbf;\r\n        delete payload.jti; //We are generating a new token, if you are using jwtid during signing, pass it in refreshOptions\r\n        const jwtSignOptions = { ...this.options, jwtid: uuid.v4() };\r\n        // The first signing converted all needed options into claims, they are already in the payload\r\n        return jsonwebtoken.sign(payload, this.privateKey, jwtSignOptions);\r\n    }\r\n}\r\n","import helmet from \"helmet\";\r\nimport express from \"express\";\r\nimport compression from \"compression\";\r\nimport cors from \"cors\";\r\nimport fileUpload from \"express-fileupload\";\r\nimport url from \"url\";\r\nimport lodash from \"lodash\";\r\nimport { JsonResponse } from \"../common/index.js\";\r\n\r\n/**\r\n * Clase servidor encargada de configurar las rutas.\r\n *\r\n * que el codigo se disperse entre diferentes proyectos.\r\n */\r\nexport default class Server {\r\n    /**\r\n     *\r\n     * @param {*} config\r\n     * @param {*} statics\r\n     * @param {*} routes\r\n     */\r\n    constructor(config, statics, routes) {\r\n        this.app = express();\r\n        this.express_config = lodash.defaultsDeep(config, {\r\n            helmet: true,\r\n            json: true,\r\n            urlencoded: true,\r\n            compression: true,\r\n            cors: { origin: true, credentials: true },\r\n            fileupload: true,\r\n            socketio: { transports: [\"websocket\"] },\r\n            traceRequests: false,\r\n        });\r\n        this.statics = statics;\r\n        this.routes = routes;\r\n    }\r\n\r\n    /**\r\n     * Inicializa el servidor\r\n     */\r\n    async initialize() {\r\n        this.config(this.express_config);\r\n        if (this.customizeExpress) {\r\n            await this.customizeExpress(this.app);\r\n        }\r\n        await this.configureRoutes(this.routes);\r\n        await this.errorHandler();\r\n    }\r\n\r\n    /**\r\n     * Funcion sobreescribible para personalizar los componentes cargados en Express\r\n     *\r\n     * Aqui se pueden poner cosas como:\r\n     *\r\n     * this.app.use(cookieParser())... etc\r\n     */\r\n    customizeExpress() {}\r\n\r\n    /**\r\n     * Se encarga de realizar la configuración inicial del servidor\r\n     *\r\n     */\r\n    config(config) {\r\n        if (config && config.helmet) {\r\n            //Security\r\n            this.app.use(helmet(config && lodash.isObject(config.helmet) && config.helmet));\r\n        }\r\n        if (config && config.json) {\r\n            //mount json form parser\r\n            this.app.use(express.json());\r\n        }\r\n\r\n        if (config && config.urlencoded) {\r\n            //mount query string parser\r\n            this.app.use(express.urlencoded({ extended: true }));\r\n        }\r\n        if (config && config.compression) {\r\n            // compress responses\r\n            this.app.use(compression());\r\n        }\r\n        if (config && config.cors) {\r\n            //Enable cors to allow external references\r\n            this.app.options(\"*\", cors(config && lodash.isObject(config.cors) && config.cors));\r\n            this.app.use(cors(config && lodash.isObject(config.cors) && config.cors));\r\n        }\r\n        if (config && config.fileupload) {\r\n            // upload middleware\r\n            this.app.use(fileUpload());\r\n        }\r\n\r\n        if (this.statics) {\r\n            //add static paths\r\n            for (const idx in this.statics) {\r\n                this.app.use(idx, express.static(this.statics[idx]));\r\n            }\r\n        }\r\n\r\n        //Logging\r\n        if (config && config.traceRequests === true && process.env.DISABLE_LOGGER != \"true\") {\r\n            this.app.use((request, response, next) => {\r\n                request.requestTime = Date.now();\r\n                response.on(\"finish\", () => {\r\n                    let pathname = url.parse(request.url).pathname;\r\n                    let end = Date.now() - request.requestTime;\r\n                    let user = (request && request.session && request.session.user_id) || \"\";\r\n\r\n                    console.debug(\"APIRequest[\" + process.pid + \"]::. [\" + request.method + \"] (user:\" + user + \")  \" + pathname + \" |-> took: \" + end + \" ms\");\r\n                    console.debug(JSON.stringify(request.body));\r\n                });\r\n                next();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Crea el cargador automatico de rutas\r\n     */\r\n    configureRoutes(routes) {\r\n        const router = express.Router();\r\n        this.app.use(router);\r\n\r\n        //create controllers\r\n        this.loadRoutes(this.app, routes);\r\n    }\r\n\r\n    /**\r\n     * Instancia la lista de rutas disponibles\r\n     * @param apps\r\n     * @returns {*}\r\n     */\r\n    loadRoutes(app, routes) {\r\n        if (!routes) return;\r\n\r\n        for (const route of routes) {\r\n            if (!route) continue;\r\n            //TODO -> FIXME traze if null?\r\n            const router = route.configure();\r\n            if (router) {\r\n                app.use(router);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Errores\r\n     */\r\n    errorHandler() {\r\n        // error handler\r\n        this.app.use((err, req, res, next) => {\r\n            let jsRes = new JsonResponse();\r\n            jsRes.success = false;\r\n            jsRes.message = err.message; //!FIXME protect error displaying in REST Responses\r\n            console.error(err);\r\n\r\n            res.status(500).json(jsRes.toJson());\r\n        });\r\n    }\r\n}\r\n","import http from \"http\";\r\nimport https from \"https\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport cluster from \"cluster\";\r\nimport { Server } from \"socket.io\";\r\nimport os from \"os\";\r\nimport { EventEmitter } from \"events\";\r\n\r\nimport ClusterMessages from \"cluster-messages\";\r\n\r\n/**\r\n * Inicializa la escucha del server en modo cluster\r\n */\r\nexport default class ClusterServer extends EventEmitter {\r\n    constructor(app) {\r\n        super();\r\n\r\n        if (!process.env.PORT) {\r\n            console.log(\"Using 3000 as default port. Customize via env PORT.\");\r\n        }\r\n        this.port = this.normalizePort(process.env.PORT || 3000);\r\n        this.clustered = process.env.CLUSTERED;\r\n        this.workers = [];\r\n        this.app = app;\r\n\r\n        this.executeOnlyMain = () => {};\r\n    }\r\n\r\n    setServerCls(cls) {\r\n        this.server = cls;\r\n    }\r\n\r\n    /**\r\n     * Iniciar el servidor en el puerto y con la configuración seleccionadas.\r\n     */\r\n    async start() {\r\n        if (this.clustered == \"true\") {\r\n            this.initClustered();\r\n        } else {\r\n            this.configureSocketIO();\r\n            this.executeOnlyMain();\r\n\r\n            await this.initUnclustered();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Inicializa el servidor de socketio en el puerto siguiente al configurado.\r\n     *\r\n     * Se puede desactivar mediante la config socketio: false al realizar el App.init()\r\n     */\r\n    configureSocketIO() {\r\n        if (this.server.express_config && this.server.express_config.socketio) {\r\n            this.app.io = new Server(this.server.express_config && this.server.express_config.socketio);\r\n            this.app.io.listen(this.port + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Inicializa la clase server encargada del control de las solicitudes en forma multiproceso.\r\n     *\r\n     */\r\n    async initClustered() {\r\n        //Launch cluster\r\n        if (cluster.isPrimary) {\r\n            this.configureSocketIO();\r\n\r\n            this.executeOnlyMain();\r\n\r\n            let messages = new ClusterMessages();\r\n            messages.on(\"event\", (msg, callback) => {\r\n                if (msg && msg.event) {\r\n                    if (process.env.DEBUG_EVENTS == true) {\r\n                        console.debug(`Received '${msg.event}' from ${msg.props.owner} at Master`);\r\n                    }\r\n                    //Desencadenar en el proceso principal tambien\r\n                    this.app.events.emit(msg.event, msg.props, callback);\r\n                }\r\n            });\r\n\r\n            //Count the machine's CPUs\r\n            const cpuCount = os.cpus().length;\r\n\r\n            //Create a worker for each CPU\r\n            for (let idx = 0; idx < cpuCount; idx += 1) {\r\n                this.initWorker();\r\n            }\r\n\r\n            //Listen for dying workers\r\n            cluster.on(\"exit\", (worker) => {\r\n                //Replace the dead worker, we're not sentimental\r\n                console.log(\"Worker \" + worker.id + \" died :(\");\r\n                this.initWorker();\r\n            });\r\n        } else {\r\n            await this.initUnclustered();\r\n            console.log(`Worker ${process.pid} started`);\r\n        }\r\n    }\r\n    /**\r\n     * Inicia un worker\r\n     */\r\n    initWorker() {\r\n        let worker = cluster.fork();\r\n        console.log(`Running worker ${worker.process.pid}`);\r\n\r\n        this.workers.push(worker);\r\n    }\r\n\r\n    /**\r\n     * Inicializa la clase server encargada del control de las solicitudes en un unico proceso.\r\n     *\r\n     */\r\n    async initUnclustered() {\r\n        this.server.port = this.port;\r\n        //create http server\r\n        let server = http.Server(this.server.app);\r\n\r\n        await this.server.initialize();\r\n\r\n        if (this.server.beforeListen) await this.server.beforeListen();\r\n        //listen on provided ports\r\n        server.listen(this.server.port);\r\n\r\n        if (this.server.afterListen) await this.server.afterListen();\r\n\r\n        //add error handler\r\n        server.on(\"error\", (err) => {\r\n            this.handleErrors(err, this.server.port);\r\n        });\r\n        //start listening on port\r\n        server.on(\"listening\", () => {\r\n            console.log(\"Server Worker running on port: \" + this.port + \"!\");\r\n            this.emit(\"listening\", this.port);\r\n        });\r\n\r\n        if (process.env.SSL && process.env.SSL == \"true\") {\r\n            if (!process.env.SSL_KEY || !process.env.SSL_CERT || !process.env.SSL_PASS) {\r\n                console.error(\"Invalid SSL configuration. SLL_KEY, SSL_CERT and SSL_PASS needed\");\r\n                process.exit(0);\r\n            }\r\n\r\n            var key = fs.readFileSync(path.resolve(process.cwd(), process.env.SSL_KEY || \"key.pem\"));\r\n            var cert = fs.readFileSync(path.resolve(process.cwd(), process.env.SSL_CERT || \"cert.pem\"));\r\n\r\n            var options = {\r\n                key: key,\r\n                cert: cert,\r\n                passphrase: process.env.SSL_PASS,\r\n            };\r\n\r\n            if (!process.env.SSL_PORT) {\r\n                console.log(\"Using 3443 as ssl default port. Customize via env SSL_PORT.\");\r\n            }\r\n            var sslPort = this.normalizePort(process.env.SSL_PORT || 3443);\r\n            var serverSsl = https.createServer(options, this.server.app);\r\n            serverSsl.listen(sslPort);\r\n            //add error handler\r\n            serverSsl.on(\"error\", (err) => {\r\n                this.handleErrors(err, sslPort);\r\n            });\r\n            //start listening on port\r\n            serverSsl.on(\"listening\", () => {\r\n                console.log(\"Server Worker running on port: \" + sslPort + \"!\");\r\n                this.emit(\"listening_ssl\", sslPort);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Controla los posibles errores de formato en el puerto\r\n     * @param val\r\n     * @returns {*}\r\n     */\r\n    normalizePort(val) {\r\n        let port = parseInt(val, 10);\r\n\r\n        if (isNaN(port)) {\r\n            //named pipe\r\n            return val;\r\n        }\r\n\r\n        if (port >= 0) {\r\n            //port number\r\n            return port;\r\n        }\r\n\r\n        return false;\r\n    }\r\n    /**\r\n     * Gestiona los errores en el listen del servidor\r\n     */\r\n    handleErrors(error, port) {\r\n        if (error.syscall !== \"listen\") {\r\n            throw error;\r\n        }\r\n\r\n        let bind = typeof port === \"string\" ? \"Pipe \" + port : \"Port \" + port;\r\n\r\n        //handle specific listen errors with friendly messages\r\n        switch (error.code) {\r\n            case \"EACCES\":\r\n                console.error(bind + \" requires elevated privileges\");\r\n                process.exit(1);\r\n                break;\r\n            case \"EADDRINUSE\":\r\n                console.error(bind + \" is already in use\");\r\n                process.exit(1);\r\n                break;\r\n            default:\r\n                throw error;\r\n        }\r\n    }\r\n}\r\n","import cluster from \"cluster\";\r\nimport { EventEmitter } from \"events\";\r\nimport ClusterMessages from \"cluster-messages\";\r\n\r\n/**\r\n * Clase encargada de la generacion de eventos.\r\n */\r\nexport default class EventHandler extends EventEmitter {\r\n    constructor(app) {\r\n        super();\r\n        this.messages = new ClusterMessages();\r\n\r\n        this.app = app; //Se recibe el singleton App para evitar referencias cruzadas\r\n\r\n        if (cluster.isWorker) {\r\n            // Levanto, en los worker, la escucha para recibir los eventos en broadcast de los demas hilos\r\n            this.messages.on(\"event\", (msg, callback) => {\r\n                if (msg && msg.event && process.pid !== msg.props.owner) {\r\n                    if (process.env.DEBUG_EVENTS == true) {\r\n                        console.debug(`Receiving broadcast ${msg.event} - ${process.pid}`);\r\n                    }\r\n                    super.emit(msg.event, { ...msg.props }, callback);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sobreescribir el emitter para notificar a los hijos\r\n     *\r\n     * @param {*} evt\r\n     * @param {*} props\r\n     */\r\n    emit(evt, props, callback) {\r\n        //Desencadenar en local\r\n        super.emit(evt, props, callback);\r\n\r\n        if (evt && props && cluster.isWorker && process.pid !== props.owner) {\r\n            if (process.env.DEBUG_EVENTS == true) {\r\n                console.debug(`${evt} -> Firing from ${process.pid} to master`);\r\n            }\r\n            if (!props) {\r\n                props = {};\r\n            }\r\n            props.owner = process.pid;\r\n            this.messages.send(\"event\", { event: evt, props: { ...props } }, callback);\r\n        }\r\n\r\n        if (evt && props && cluster.isPrimary && this.app && this.app.server && this.app.server.workers) {\r\n            if (process.env.DEBUG_EVENTS == true) {\r\n                console.debug(`${evt} -> Firing from master to workers`);\r\n            }\r\n            this.messages.send(\"event\", { event: evt, props: { ...props } }, callback);\r\n        }\r\n    }\r\n}\r\n","import log4js from \"log4js\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport util from \"util\";\r\n\r\nconst { configure, getLogger } = log4js;\r\n\r\nexport default class Logger {\r\n    static async configure() {\r\n        const readfile = util.promisify(fs.readFile);\r\n\r\n        const json = await readfile(path.resolve(process.cwd(), \"./log4js.json\"), \"utf8\");\r\n\r\n        configure(JSON.parse(json));\r\n\r\n        //Nota para el futuro:\r\n        // Esto sobreescribe los metodos de console.log\r\n        // Es necesario que la sitaxis se mantenga tal cual....\r\n        (() => {\r\n            const log_logger = getLogger(\"log\");\r\n            const error_logger = getLogger(\"error\");\r\n            const debug_logger = getLogger(\"debug\");\r\n            console.log = function () {\r\n                let args = Array.prototype.slice.call(arguments);\r\n                // log.apply(this, args);\r\n                log_logger.log(\"info\", args[0]);\r\n            };\r\n            console.error = function () {\r\n                let args = Array.prototype.slice.call(arguments);\r\n                // error.apply(this, args);\r\n                error_logger.log(\"error\", args[0]);\r\n            };\r\n            console.info = function () {\r\n                let args = Array.prototype.slice.call(arguments);\r\n                // info.apply(this, args);\r\n                log_logger.log(\"info\", args[0]);\r\n            };\r\n            console.debug = function () {\r\n                /*if (global.settings.debug.value) {*/\r\n                let args = Array.prototype.slice.call(arguments);\r\n                // debug.apply(this, [args[1], args[2]]);\r\n                debug_logger.log(\"debug\", args[0]);\r\n            };\r\n\r\n            console.custom = function (logger, level, message) {\r\n                const custom_logger = getLogger(logger);\r\n                custom_logger.log(level, message);\r\n            };\r\n        })();\r\n    }\r\n}\r\n","import express from \"express\";\r\nimport url from \"url\";\r\nimport { JsonResponse, Utils } from \"../common/index.js\";\r\n\r\nimport { pathToRegexp } from \"path-to-regexp\";\r\n\r\nexport default class AuthController {\r\n    constructor(publicPathsList, AuthHandler) {\r\n        this.router = express.Router();\r\n        this.publicPathsList = [...publicPathsList, \"/login\"];\r\n\r\n        this.AuthHandler = AuthHandler;\r\n    }\r\n\r\n    configure() {\r\n        const exAsync = Utils.expressHandler();\r\n        this.router.use(exAsync((...args) => this.check(...args)));\r\n        this.router.post(\r\n            \"/login\",\r\n            exAsync((...args) => this.loginPost(...args))\r\n        );\r\n        this.router.post(\r\n            \"/logout\",\r\n            exAsync((...args) => this.logout(...args))\r\n        );\r\n\r\n        return this.router;\r\n    }\r\n\r\n    /**\r\n     * Controla que los usuarios tengan sesion para acceder a los metodos privados de la API\r\n     *\r\n     * @param {*} request\r\n     * @param {*} response\r\n     * @param {*} next\r\n     */\r\n    async check(request, response, next) {\r\n        try {\r\n            //Rutas ublicas\r\n            for (let path of this.publicPathsList) {\r\n                const expr = pathToRegexp(path);\r\n                if (expr.exec(url.parse(request.url).pathname) !== null) {\r\n                    return next();\r\n                }\r\n            }\r\n\r\n            if (await this.AuthHandler.check(request)) {\r\n                return next();\r\n            }\r\n\r\n            return response.status(403).json(new JsonResponse(false, null, \"Forbidden\").toJson());\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return response.status(403).json(new JsonResponse(false, null, \"Forbidden\").toJson());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Valida los credenciales de un usuario\r\n     *\r\n     * TODO logger console.custom(\"access\", INFO);\r\n     *\r\n     * @param {*} request\r\n     * @param {*} response\r\n     */\r\n    async loginPost(request, response) {\r\n        if (request.body.username) {\r\n            try {\r\n                let data = await this.AuthHandler.validate(request, request.body.username, request.body.password);\r\n                if (data) {\r\n                    return response.status(200).json(new JsonResponse(true, data).toJson());\r\n                }\r\n                return response.status(401).json(new JsonResponse(false, null, \"Unauthorized - Incorrect credentials\").toJson());\r\n            } catch (ex) {\r\n                console.error(ex);\r\n                return response.status(401).json(new JsonResponse(false, null, \"Unauthorized - Error, check log\").toJson());\r\n            }\r\n        }\r\n        return response.status(401).json(new JsonResponse(false, null, \"Unauthorized - Missing parameters\").toJson());\r\n    }\r\n\r\n    /**\r\n     * Cierra la sesion del usuario\r\n     *\r\n     * @param {*} request\r\n     * @param {*} response\r\n     */\r\n    async logout(request, response) {\r\n        if (this.AuthHandler.logout) {\r\n            //Depende de que el authHandler implementado pueda realizar esta accion\r\n            try {\r\n                await this.AuthHandler.logout(request);\r\n                return response.status(200).json(new JsonResponse(true).toJson());\r\n            } catch (ex) {\r\n                console.error(ex);\r\n                return response.status(500).json(new JsonResponse(false, null, ex).toJson());\r\n            }\r\n        }\r\n        return response.status(200).json(new JsonResponse(true).toJson());\r\n    }\r\n}\r\n","export default class IAuthHandler {\r\n    constructor() {\r\n        if (!this.check) {\r\n            throw new Error(\"AuthHandler must have 'check' vethod\");\r\n        }\r\n        if (!this.validate) {\r\n            throw new Error(\"AuthHandler must have 'validate' vethod\");\r\n        }\r\n        // logout method is optional\r\n    }\r\n}\r\n\r\n","import { TokenGenerator, Utils } from '../../common/index.js';\r\nimport IAuthHandler from '../IAuthHandler.js'\r\nimport lodash from 'lodash';\r\nimport moment from 'moment';\r\n\r\nexport default class JwtAuthHandler extends IAuthHandler {\r\n    constructor(UserDao) {\r\n        super();\r\n\r\n        this.tokenGenerator = new TokenGenerator(process.env.JWT_SECRET, { audience: process.env.JWT_AUDIENCE, issuer: process.env.JWT_ISSUER, subject: process.env.JWT_SUBJECT, algorithm: process.env.JWT_ALGORITHM, expiresIn: process.env.JWT_EXPIRES })\r\n\r\n        if (!UserDao) {\r\n            throw new Error(\"Need 'UserDao' for user validation. Create 'UserDao' class extending 'IUserDao'\");\r\n        }\r\n        this.userDao = UserDao;\r\n    }\r\n\r\n    /**\r\n     * Metodo encargado de realizar la comprobacion para validar si la sesion del usuario es válida\r\n     * \r\n     * @param {*} request \r\n     */\r\n    async check(request) {\r\n        if (request.headers.authorization) {\r\n            const token = (request.headers.authorization || '').split(' ')[1] || '';\r\n\r\n            if (!token) {\r\n                console.error(\"Token needed\");\r\n                return false;\r\n            }\r\n            try {\r\n                var decoded = this.tokenGenerator.verify(token);\r\n                const { sub, username, exp } = decoded;\r\n\r\n                if (!sub || !username || moment(exp).isAfter(new Date())) {\r\n                    return false;\r\n                }\r\n\r\n                //Si la sesion es valida, lo introducimos en el contexto de la solicitud\r\n                request.session = { ...request.session, ...decoded };\r\n                return true;\r\n            } catch (ex) {\r\n                console.error(ex);\r\n                return false;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Método encargado de realizar la validación de un usuario. Utiliza IUserDao como interfaz para la realización de la query a BD.\r\n     * \r\n     * @param {*} username \r\n     * @param {*} password \r\n     */\r\n    async validate(request, username, password) {\r\n\r\n        const user = await this.userDao.findByUsername(username);\r\n\r\n        if (user && user.username === username && user.password === Utils.encrypt(password)) {\r\n            return this.tokenGenerator.sign(lodash.omit(user, ['password']));\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n}","import { Utils } from \"../../common/index.js\";\r\nimport IAuthHandler from \"../IAuthHandler.js\";\r\nimport lodash from \"lodash\";\r\n\r\n/**\r\n * Necesario:\r\n *  Instalar -->   express-session y algun session store\r\n * \r\n *  Mas info: https://www.npmjs.com/package/express-session\r\n * \r\n *  App.customizeExpress = () => {\r\n       this.app.use(session({\r\n            secret: 'keyboard cat',\r\n            resave: false,\r\n            saveUninitialized: true,\r\n            cookie: { secure: true }\r\n        }));\r\n    }\r\n */\r\n\r\nexport default class CookieAuthHandler extends IAuthHandler {\r\n    constructor(UserDao) {\r\n        super();\r\n\r\n        if (!UserDao) {\r\n            throw new Error(\"Need 'UserDao' for user validation. Create 'UserDao' class extending 'IUserDao'\");\r\n        }\r\n        this.userDao = UserDao;\r\n    }\r\n\r\n    /**\r\n     * Metodo encargado de realizar la comprobacion para validar si la sesion del usuario es válida\r\n     *\r\n     * @param {*} request\r\n     */\r\n    async check(request) {\r\n        if (request.headers.authorization) {\r\n            //Si se recibe por Auth Basic\r\n            const token = (request.headers.authorization || \"\").split(\" \")[1] || \"\";\r\n\r\n            const creds = Buffer.from(token, \"base64\").toString().split(\":\");\r\n            const login = creds[0];\r\n            const password = creds[1];\r\n\r\n            if (!(await this.validate(request, login, password))) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        if (request.session && request.session.username) {\r\n            //Si hay sesion almacenada\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Método encargado de realizar la validación de un usuario. Utiliza IUserDao como interfaz para la realización de la query a BD.\r\n     *\r\n     * @param {*} username\r\n     * @param {*} password\r\n     */\r\n    async validate(request, username, password) {\r\n        const user = await this.userDao.findByUsername(username);\r\n\r\n        if (user && user.username === username && user.password === Utils.encrypt(password)) {\r\n            request.session = { ...request.session, ...lodash.omit(user, [\"password\"]) };\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} request\r\n     */\r\n    logout(request) {\r\n        return new Promise((resolve) => {\r\n            if (request.session) {\r\n                request.session.destroy(resolve);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import Knex from 'knex'\r\n\r\nclass KnexConnector {\r\n\r\n\r\n    init(config) {\r\n\r\n        /**\r\n         * References the current connection of the app\r\n         * @type {Knex}\r\n         * @public\r\n         */\r\n        this.connection = Knex(config)\r\n    }\r\n\r\n    /**\r\n     * Configura de forma global los aliases de las columnas para utilizar en FQL.\r\n     * \r\n     * La estructura es \r\n     * {\r\n            \"table1\": {\r\n                \"alias1\": \"column1\",\r\n                \"alias2\": \"column2\"\r\n            },\r\n            \"table2\": {\r\n                \"alias1\": \"column1\"\r\n            }\r\n        }\r\n     *\r\n     * @param {*} aliases \r\n     */\r\n    setColumnAliases(aliases) {\r\n        this.columnAliases = aliases;\r\n    }\r\n    \r\n\r\n\r\n    test() {\r\n        return this.connection.raw('select 1+1 as result');\r\n    }\r\n}\r\n\r\n\r\nexport default new KnexConnector();","import { Utils } from \"../../../common/index.js\";\r\n\r\nimport { FQLParser, KnexParser } from \"@landra_sistemas/fql-parser\";\r\nimport KnexConnector from \"../KnexConnector.js\";\r\n\r\nexport default class KnexFilterParser {\r\n    /**\r\n     *\r\n     * @param {*} builder\r\n     * @param {*} string\r\n     * @returns\r\n     */\r\n    static parseQueryString(builder, string, tableName) {\r\n        const options = {\r\n            allowGlobalSearch: true,\r\n            caseInsensitive: true,\r\n        };\r\n        //Agregar los aliases en caso de que se hayan configurado de forma global\r\n        if (KnexConnector.columnAliases && KnexConnector.columnAliases[tableName]) {\r\n            options.aliases = KnexConnector.columnAliases[tableName];\r\n        }\r\n        //Options\r\n        if (KnexConnector.caseInsensitive !== undefined) {\r\n            options.caseInsensitive = KnexConnector.caseInsensitive;\r\n        }\r\n        if (KnexConnector.allowGlobalSearch !== undefined) {\r\n            options.allowGlobalSearch = KnexConnector.allowGlobalSearch;\r\n        }\r\n        const parser = new FQLParser(options);\r\n        const data = parser.parse(string);\r\n\r\n        return new KnexParser(tableName).toKnex(builder, data);\r\n    }\r\n\r\n    /**\r\n     * Convierte un objeto clave valor en un conjunto de filtros.\r\n     *\r\n     * - Filtro estandar:\r\n     *    filters: {\r\n     *       \"column\": \"value\" -> filtro generico exact\r\n     *    }\r\n     * - Filtro Objeto:\r\n     *    filters:{\r\n     *       \"column\": {\r\n     *       \"type\": \"date|between|exists|notexists|greater|greaterEq|less|lessEq|exact|exactI|not|null|notnull|like|likeI\"\r\n     *       \"start\": \"xxx\", //inicio de rango para el filtro de date y between\r\n     *       \"end\": \"xxx\", //fin de rango para el filtro date y between\r\n     *       \"value\": \"xxx\" //valor a utilizar para el resto de filtros\r\n     *     }\r\n     * }\r\n     *  - Filtro Lista:\r\n     *     filters: {\r\n     *       \"column\": [1, 2, 3]\r\n     *     }\r\n     *    Filtro de tipo IN, todos los elementos que coincidan\r\n     *\r\n     * - Definicion de tipos:\r\n     *    date: filtro de fechas desde y hasta\r\n     *    between: filtro entre dos valores concretos\r\n     *    exists: busca si existe la propiedad\r\n     *    notexists: busca si existe la propiedad\r\n     *    greater: mayor que\r\n     *    greaterEq: mayor o igual que\r\n     *    less: menor que\r\n     *    lessEq: menor o igual que\r\n     *    exact: valor exacto\r\n     *    exactI: valor exacto ignorando mayusculas y minusculas\r\n     *    not: distinto de\r\n     *    null: igual a null\r\n     *    notnull: distinto de null\r\n     *    like: filtro like\r\n     *    likeI: filtro like ignorando mayusculas y minusculas\r\n     */\r\n    static parseFilters(builder, filter, tableName) {\r\n        let query = builder;\r\n\r\n        for (let prop in filter) {\r\n            let elm = filter[prop];\r\n\r\n            if (typeof elm === \"object\") {\r\n                switch (elm.type) {\r\n                    case \"fql\":\r\n                        query = KnexFilterParser.parseQueryString(query, elm.value, tableName);\r\n                        break;\r\n                    case \"date\":\r\n                    case \"between\":\r\n                        if (elm.start && elm.end) {\r\n                            query = query.whereBetween(prop, [elm.start, elm.end]);\r\n                        }\r\n                        if (elm.start && !elm.end) {\r\n                            query = query.where(prop, \">=\", elm.start);\r\n                        }\r\n                        if (!elm.start && elm.end) {\r\n                            query = query.where(prop, \">=\", elm.end);\r\n                        }\r\n                        break;\r\n                    case \"dateraw\":\r\n                    case \"betweenraw\":\r\n                        if (elm.start && elm.end) {\r\n                            query = query.whereRaw(`${prop} BETWEEN ? AND ?`, [elm.start, elm.end]);\r\n                        }\r\n                        if (elm.start && !elm.end) {\r\n                            query = query.whereRaw(`${prop} >= ?`, [elm.start]);\r\n                        }\r\n                        if (!elm.start && elm.end) {\r\n                            query = query.whereRaw(`${prop} >= ?`, [elm.end]);\r\n                        }\r\n                        break;\r\n                    case \"jsonb\":\r\n                        query = query.whereRaw(`${prop} ILIKE ?`, [\"%\" + elm.value + \"%\"]);\r\n                        break;\r\n                    case \"full-text-psql\":\r\n                        query = query.whereRaw(`to_tsvector(${prop}::text) @@ to_tsquery(?)`, [elm.value]);\r\n                        break;\r\n\r\n                    case \"greater\":\r\n                    case \"greaterraw\":\r\n                        query = query.whereRaw(`${prop} > ?`, [elm.value]);\r\n                        break;\r\n                    case \"greaterEq\":\r\n                    case \"greaterEqraw\":\r\n                        query = query.whereRaw(`${prop} >= ?`, [elm.value]);\r\n                        break;\r\n                    case \"less\":\r\n                    case \"lessraw\":\r\n                        query = query.whereRaw(`${prop} < ?`, [elm.value]);\r\n                        break;\r\n                    case \"lessEq\":\r\n                    case \"lessEqraw\":\r\n                        query = query.whereRaw(`${prop} <= ?`, [elm.value]);\r\n                        break;\r\n                    case \"exists\":\r\n                        query = query.whereExists(prop);\r\n                        break;\r\n                    case \"notexists\":\r\n                        query = query.whereNotExists(prop);\r\n                        break;\r\n                    case \"exact\":\r\n                    case \"exactraw\":\r\n                        query = query.whereRaw(`${prop} = ?`, [elm.value]);\r\n                        break;\r\n                    case \"in\":\r\n                        let propComplex = prop;\r\n                        if (propComplex.includes(\",\")) {\r\n                            propComplex = prop.split(\",\");\r\n                        }\r\n                        if (!Array.isArray(elm.value) && elm.value != undefined) {\r\n                            query = query.whereIn(propComplex, elm.value.split(\",\"));\r\n                        } else {\r\n                            if (elm.value != undefined) {\r\n                                query = query.whereIn(propComplex, elm.value);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"inraw\":\r\n                        if (!Array.isArray(elm.value) && elm.value != undefined) {\r\n                            query = query.whereRaw(`${prop} IN (?)`, [\r\n                                elm.value\r\n                                    .split(\",\")\r\n                                    .map((e) => `'${e}'`)\r\n                                    .join(\",\"),\r\n                            ]);\r\n                        } else {\r\n                            if (elm.value != undefined) {\r\n                                query = query.whereRaw(`${prop} IN (?)`, [elm.value.map((e) => `'${e}'`).join(\",\")]);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"not\":\r\n                    case \"notraw\":\r\n                        query = query.whereRaw(`${prop} != ?`, [elm.value]);\r\n                        break;\r\n                    case \"like\":\r\n                    case \"likeraw\":\r\n                        let value_likeraw = Utils.replaceAll(elm.value, \"*\", \"%\");\r\n                        query = query.whereRaw(` ${prop} LIKE ?`, [value_likeraw]);\r\n                        break;\r\n                    case \"notlike\":\r\n                    case \"notlikeraw\":\r\n                        let value_nolikeraw = Utils.replaceAll(elm.value, \"*\", \"%\");\r\n                        query = query.whereRaw(` ${prop} NOT LIKE ?`, [value_nolikeraw]);\r\n                        break;\r\n                    case \"likeI\":\r\n                        let value_rawilike = Utils.replaceAll(elm.value, \"*\", \"%\");\r\n                        query = query.whereRaw(` ${prop} ILIKE ?`, [value_rawilike]);\r\n                        break;\r\n                    case \"notlikeI\":\r\n                        let value_notrawilike = Utils.replaceAll(elm.value, \"*\", \"%\");\r\n                        query = query.whereRaw(` ${prop} NOT ILIKE ?`, [value_notrawilike]);\r\n                        break;\r\n                    case \"null\":\r\n                    case \"nullraw\":\r\n                        query = query.whereRaw(`${prop} is NULL`);\r\n                        break;\r\n                    case \"notnull\":\r\n                    case \"notnullraw\":\r\n                        query = query.whereRaw(`${prop} is not NULL`);\r\n                        break;\r\n                }\r\n            } else {\r\n                //Si el valor no es un objeto se devuelve\r\n                query = query.where(prop, elm);\r\n            }\r\n        }\r\n\r\n        // console.log(query.toSQL());\r\n        return query;\r\n    }\r\n\r\n    /**\r\n     * Conversion de un objeto {property: XX, direction: ASC|DESC - ascend|descend} a un ORDER BY\r\n     *\r\n     * @param {*} sorts\r\n     */\r\n    static parseSort(sort) {\r\n        if (!sort.field || !sort.direction) {\r\n            return 1;\r\n        }\r\n\r\n        let direction = \"ASC\";\r\n        if (sort.direction === \"descend\") {\r\n            direction = \"DESC\";\r\n        }\r\n\r\n        return sort.field + \" \" + direction;\r\n    }\r\n}\r\n","import KnexFilterParser from \"../filters/KnexFilterParser.js\";\r\nimport KnexConnector from \"../KnexConnector.js\";\r\n\r\nimport lodash from \"lodash\";\r\n\r\n/**\r\n * Crear un dao con los métodos básicos\r\n */\r\nexport default class BaseKnexDao {\r\n    constructor() {\r\n        this.tableName = \"\";\r\n    }\r\n\r\n    loadAllData(start, limit) {\r\n        return KnexConnector.connection\r\n            .select(\"*\")\r\n            .from(this.tableName)\r\n            .limit(limit || 10000)\r\n            .offset(start);\r\n    }\r\n\r\n    async loadFilteredData(filters, start, limit) {\r\n        let sorts = 1;\r\n        if (filters.sort) {\r\n            sorts = KnexFilterParser.parseSort(filters.sort);\r\n        }\r\n\r\n        return KnexConnector.connection\r\n            .from(this.tableName)\r\n            .where((builder) => KnexFilterParser.parseFilters(builder, lodash.omit(filters, [\"sort\", \"start\", \"limit\"]), this.tableName))\r\n            .orderByRaw(sorts)\r\n            .limit(limit)\r\n            .offset(start);\r\n    }\r\n\r\n    async countFilteredData(filters) {\r\n        let data = await KnexConnector.connection\r\n            .from(this.tableName)\r\n            .where((builder) => KnexFilterParser.parseFilters(builder, lodash.omit(filters, [\"sort\", \"start\", \"limit\"]), this.tableName))\r\n            .count(\"id\", { as: \"total\" });\r\n\r\n        return data && data[0].total;\r\n    }\r\n\r\n    async loadById(objectId) {\r\n        const data = await KnexConnector.connection.from(this.tableName).where(\"id\", objectId);\r\n\r\n        if (data && data[0]) {\r\n            return data[0];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    save(object) {\r\n        return KnexConnector.connection.from(this.tableName).insert(object).returning(\"*\");\r\n    }\r\n    update(objectId, newObject) {\r\n        return KnexConnector.connection.from(this.tableName).where(\"id\", objectId).update(newObject).returning(\"*\");\r\n    }\r\n    async delete(objectId) {\r\n        const existing = await this.loadById(objectId);\r\n        if (!existing) {\r\n            throw \"NotFound\";\r\n        }\r\n        return KnexConnector.connection.from(this.tableName).where(\"id\", objectId).delete();\r\n    }\r\n}\r\n","import BaseKnexDao from \"./knex/dao/BaseKnexDao.js\";\r\n\r\nexport default class IUserDao extends BaseKnexDao {\r\n    constructor(tableName) {\r\n        super(tableName);\r\n\r\n        if (!this.findByUsername) {\r\n            throw new Error(\"AuthHandler must have 'findByUsername' method\");\r\n        }\r\n    }\r\n}\r\n","import express from \"express\";\r\nimport { JsonResponse, Utils } from \"../common/index.js\";\r\n\r\nexport class BaseController {\r\n    constructor() {\r\n        this.router = express.Router();\r\n    }\r\n\r\n    configure(entity, config) {\r\n        const exAsync = Utils.expressHandler();\r\n        this.router.get(\r\n            `/${entity}`,\r\n            exAsync((...args) => this.listEntidad(...args))\r\n        );\r\n        this.router.post(\r\n            `/${entity}/list`,\r\n            exAsync((...args) => this.listEntidad(...args))\r\n        );\r\n        this.router.get(\r\n            `/${entity}/:id`,\r\n            exAsync((...args) => this.getEntidad(...args))\r\n        );\r\n        this.router.post(\r\n            `/${entity}`,\r\n            exAsync((...args) => this.saveEntidad(...args))\r\n        );\r\n        this.router.put(\r\n            `/${entity}/:id`,\r\n            exAsync((...args) => this.updateEntidad(...args))\r\n        );\r\n        this.router.delete(\r\n            `/${entity}/:id`,\r\n            exAsync((...args) => this.deleteEntidad(...args))\r\n        );\r\n\r\n        this.service = config.service;\r\n        this.table = config.table;\r\n\r\n        return this.router;\r\n    }\r\n\r\n    /**\r\n     * Lista entidades en la aplicacion, es posible enviarle parametros de filtrado.\r\n     *\r\n     *\r\n     * @api {post} /:entidad/list Listar entidades\r\n     * @apiName Listar entidades\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async listEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n            let filters = request.method === \"POST\" ? request.body : request.query && request.query.filters ? JSON.parse(request.query.filters) : {};\r\n\r\n            let data = await service.list(filters, filters.start, filters.limit);\r\n            let jsRes = new JsonResponse(true, data.data, null, data.total);\r\n\r\n            response.json(jsRes.toJson());\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    }\r\n    /**\r\n     *Obtiene un elemento concreto mediante su identificador\r\n     *\r\n     *\r\n     * @api {get} /:entidad/:id Obtener entidad\r\n     * @apiName Obtener entidad\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async getEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n            let data = await service.loadById(request.params.id);\r\n            let jsRes = new JsonResponse(true, data);\r\n            let code = 200;\r\n            if (data == null) {\r\n                code = 404;\r\n                let message = \"Element not found\";\r\n                jsRes = new JsonResponse(false, null, message, 0);\r\n            }\r\n\r\n            response.status(code).json(jsRes.toJson());\r\n        } catch (e) {\r\n            console.error(e);\r\n            let message = \"\";\r\n            if (e.code == \"22P02\") {\r\n                //PostgreSQL error Code form string_to_UUID\r\n                message = \"Expected uiid\";\r\n            }\r\n            let jsRes = new JsonResponse(false, null, message, 0);\r\n            response.status(400).json(jsRes.toJson());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Almacena un elemento en BD\r\n     *\r\n     *\r\n     * @api {post} /:entidad/:id Crear entidad\r\n     * @apiName Crear entidad\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async saveEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n\r\n            let data = await service.save(request.body);\r\n            let jsRes = new JsonResponse(true, (data && data[0]) || { id: request.body.id });\r\n\r\n            response.setHeader(\"Location\", `/entity/${jsRes.data.id}`);\r\n            response.status(201).json(jsRes.toJson());\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Almacena un elemento en BD\r\n     *\r\n     *\r\n     * @api {put} /:entidad/:id Actualizar entidad\r\n     * @apiName Actualizar entidad\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async updateEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n\r\n            let data = await service.update(request.params.id, request.body);\r\n            let jsRes = new JsonResponse(true, (data && data[0]) || { id: request.body.id });\r\n\r\n            response.json(jsRes.toJson());\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Elimina un elemento correspondiente al identificador recibido\r\n     *\r\n     *\r\n     * @api {delete} /:entidad/:id/delete Delete entidad\r\n     * @apiName Eliminar entidad\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async deleteEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n            let data = await service.delete(request.params.id);\r\n            let jsRes = new JsonResponse(true, data);\r\n\r\n            response.status(204).json(jsRes.toJson());\r\n        } catch (e) {\r\n            console.error(e);\r\n            if (e == \"NotFound\") {\r\n                let message = \"Element not found\";\r\n                let jsRes = new JsonResponse(false, null, message, 0);\r\n                response.status(404).json(jsRes.toJson());\r\n            } else {\r\n                next(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { BaseKnexDao } from \"../db/index.js\";\r\n\r\nexport class BaseService {\r\n    constructor(cls, table) {\r\n        if (cls) {\r\n            this.dao = new cls();\r\n        } else {\r\n            this.dao = new BaseKnexDao(); //El sistema por defecto utiliza knex, si se pasa un dao personalizado se puede sobreescribir este comportamiento\r\n        }\r\n        if (table) {\r\n            this.dao.tableName = table;\r\n        }\r\n    }\r\n    /**\r\n     * Obtencion de una lista de elementos.\r\n     *\r\n     * filters, es opcional. Si no se pasan se devuelve lo que hay ;\r\n     */\r\n    async list(filters, start, limit) {\r\n        //Pagination\r\n        const st = start || 0;\r\n        const lm = limit || 1000; //Default limit\r\n\r\n        let response = {};\r\n        response.total = await this.dao.countFilteredData(filters, st, lm);\r\n\r\n        if (filters && Object.keys(filters).length !== 0) {\r\n            let filteredData = await this.dao.loadFilteredData(filters, st, lm);\r\n            response.data = filteredData;\r\n            return response;\r\n        }\r\n\r\n        response.data = await this.dao.loadAllData(start, limit);\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Obtencion de un elemento mediante su identificador\r\n     */\r\n    loadById(id) {\r\n        return this.dao.loadById(id);\r\n    }\r\n    /**\r\n     * Metodo de creacion.\r\n     *\r\n     * Si el identificador se pasa como undefined se creara un nuevo elemento,\r\n     * sino se modifica el correspondiente.\r\n     */\r\n    save(data) {\r\n        //Create\r\n        return this.dao.save(data);\r\n    }\r\n    /**\r\n     * Metodo de creacion.\r\n     *\r\n     * Si el identificador se pasa como undefined se creara un nuevo elemento,\r\n     * sino se modifica el correspondiente.\r\n     */\r\n    update(id, data) {\r\n        if (id) {\r\n            //Update\r\n            return this.dao.update(id, data);\r\n        }\r\n    }\r\n    /**\r\n     * Metodo de eliminado.\r\n     *\r\n     * El identificador es obligatorio para poder localizar el elemento a eliminar.\r\n     */\r\n    delete(id) {\r\n        if (id) {\r\n            return this.dao.delete(id);\r\n        }\r\n    }\r\n}\r\n","import Utils from \"./Utils.js\";\r\n\r\nimport _optimist from \"optimist\";\r\nexport default function Runtime() {\r\n    const optimist = _optimist.usage(\r\n        \"Como usar: \\n node execute.js [--generateKeys , --encrypt xxx] \\n\\n Opciones:\\n --generateKeys: Genera unas claves para la aplicación\\n --encrypt String: Codifica el String proporcionado en base a la contraseña de .env \\n\\n ---> Si no se especifican parámetros el servidor arrancará normalmente.\"\r\n    );\r\n    const argv = optimist.argv;\r\n    //Parámetro para no arrancar el servidor y generar las claves JWT\r\n    if (argv.generateKeys) {\r\n        console.log(\"Generando claves para encriptación:\");\r\n        console.log(Utils.generateKeys());\r\n        return process.exit(1);\r\n    }\r\n\r\n    if (argv.encrypt) {\r\n        console.log(\"Resultado encryptación:\");\r\n        console.log(Utils.encrypt(argv.encrypt));\r\n        return process.exit(1);\r\n    }\r\n\r\n    if (argv.h || argv.help) {\r\n        console.log(optimist.help());\r\n        return process.exit(1);\r\n    }\r\n}\r\n","import { I18nLoader, Utils } from \"./common/index.js\";\r\nimport { EventHandler } from \"./events/index.js\";\r\nimport { ClusterServer, Server } from \"./server/index.js\";\r\nimport { Logger } from \"./logger/index.js\";\r\n\r\nimport net from \"net\";\r\nimport repl from \"repl\";\r\nimport { KnexConnector } from \"./db/index.js\";\r\nimport Runtime from \"./common/Runtime.js\";\r\n\r\nclass App {\r\n    constructor() {\r\n        this.serverClass = Server;\r\n        this.clusterClass = ClusterServer;\r\n    }\r\n\r\n    /**\r\n     * Inicializa la runtime de la aplicación para poder recibir parámetros por consola y generar claves.\r\n     * @returns\r\n     */\r\n    runtime() {\r\n        return Runtime();\r\n    }\r\n\r\n    /**\r\n     * Initializa las configuraciones para la app\r\n     *\r\n     */\r\n    async init(serverConfig) {\r\n        if (process.env.DISABLE_LOGGER != \"true\") {\r\n            await Logger.configure();\r\n        }\r\n\r\n        //Instanciar la clase server\r\n        const server = new this.serverClass(serverConfig, this.statics, this.routes);\r\n        if (this.customizeExpress) {\r\n            server.customizeExpress = this.customizeExpress;\r\n        }\r\n        if (this.beforeListen) {\r\n            server.beforeListen = this.beforeListen;\r\n        }\r\n        if (this.afterListen) {\r\n            server.afterListen = this.afterListen;\r\n        }\r\n\r\n        /**\r\n         * Gestor de eventos\r\n         * @type {EventHandler}\r\n         * @public\r\n         */\r\n        this.events = new EventHandler(this);\r\n\r\n        /**\r\n         * Gestor de traducciones\r\n         * @type {I18nLoader}\r\n         * @public\r\n         */\r\n        this.i18n = new I18nLoader();\r\n        await this.i18n.load();\r\n        /**\r\n         * Servidor actual\r\n         * @type {ClusterServer}\r\n         * @public\r\n         */\r\n        this.server = new this.clusterClass(this);\r\n\r\n        this.server.setServerCls(server);\r\n        this.server.executeOnlyMain = () => {\r\n            if (this.executeOnlyMain) this.executeOnlyMain();\r\n\r\n            if (process.env.REPL_ENABLED == \"true\") {\r\n                this.startRepl();\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Ejecuta el servidor con la configuracion de #init()\r\n     */\r\n    async start() {\r\n        if (!this.server) {\r\n            throw new Error(\"Call init first\");\r\n        }\r\n        await this.server.start();\r\n    }\r\n\r\n    /**\r\n     * Inicia el server replify para poder conectar terminales remotas\r\n     *\r\n     *\r\n     * Para que arranque es necesario especificar REPL_ENABLED en el archivo .env\r\n     */\r\n    startRepl() {\r\n        try {\r\n            net.createServer((socket) => {\r\n                const remote = repl.start({\r\n                    prompt: \"lisco::remote> \",\r\n                    input: socket,\r\n                    output: socket,\r\n                    terminal: true,\r\n                    useColors: true,\r\n                    preview: false,\r\n                });\r\n                remote.context.app = this;\r\n                remote.context.Utils = Utils;\r\n                remote.context.db = KnexConnector.connection;\r\n                remote.on(\"exit\", socket.end.bind(socket));\r\n            }).listen(process.env.REPL_PORT || 5001);\r\n        } catch (e) {\r\n            console.log(\"Remote REPL Conn: \" + e);\r\n        }\r\n\r\n        console.log(`Remote REPL started on port ${process.env.REPL_PORT || 5001}`);\r\n    }\r\n}\r\n\r\nexport default new App();\r\n"],"names":["Utils","arrayToLower","mcArray","tmp","join","toLowerCase","split","replaceAll","str","find","replace","RegExp","encrypt","text","algorithm","secret","Buffer","from","process","env","CRYPT_SECRET","iv","CRYPT_IV","cipher","crypto","createCipheriv","encrypted","update","concat","toString","decrypt","encryptedText","decipher","createDecipheriv","decrypted","sleep","ms","promise_sleep","util","promisify","setTimeout","generateKeys","key","randomBytes","flattenObject","ob","toReturn","flatObject","i","hasOwnProperty","Array","constructor","x","isNaN","unflatten","data","result","keys","reduce","r","e","j","Number","length","expressHandler","fn","asyncUtilWrap","args","fnReturn","next","Promise","resolve","_catch","body","recover","then","I18nLoader","watcher","load","custom","lang","DEFAULT_LANG","currentData","currentDataFlat","file","cwd","chokidar","watch","ignored","persistent","on","path","loadFile","readfile","fs","readFile","parsedData","JSON","parse","ex","code","console","log","error","translate","JsonResponse","success","message","total","toJson","TokenGenerator","privateKey","options","sign","payload","jwtSignOptions","jwtid","uuid","v4","jsonwebtoken","verify","token","refresh","sub","iss","aud","iat","exp","nbf","jti","Server","config","statics","routes","app","express","express_config","lodash","defaultsDeep","helmet","json","urlencoded","compression","cors","origin","credentials","fileupload","socketio","transports","traceRequests","initialize","configureRoutes","errorHandler","customizeExpress","use","isObject","extended","fileUpload","idx","DISABLE_LOGGER","request","response","requestTime","Date","now","pathname","url","end","user","session","user_id","debug","pid","method","stringify","router","Router","loadRoutes","route","configure","err","req","res","jsRes","status","ClusterServer","PORT","port","normalizePort","clustered","CLUSTERED","workers","executeOnlyMain","setServerCls","cls","server","start","initClustered","configureSocketIO","initUnclustered","io","listen","cluster","isPrimary","messages","ClusterMessages","msg","callback","event","DEBUG_EVENTS","props","owner","events","emit","cpuCount","os","cpus","initWorker","worker","id","fork","push","http","handleErrors","SSL","SSL_KEY","SSL_CERT","SSL_PASS","exit","readFileSync","cert","passphrase","SSL_PORT","sslPort","serverSsl","https","createServer","afterListen","beforeListen","val","parseInt","syscall","bind","EventEmitter","EventHandler","isWorker","evt","send","log4js","getLogger","Logger","log_logger","error_logger","debug_logger","prototype","slice","call","arguments","info","logger","level","custom_logger","AuthController","publicPathsList","AuthHandler","exAsync","check","post","loginPost","logout","expr","pathToRegexp","exec","username","validate","password","IAuthHandler","Error","JwtAuthHandler","UserDao","tokenGenerator","JWT_SECRET","audience","JWT_AUDIENCE","issuer","JWT_ISSUER","subject","JWT_SUBJECT","JWT_ALGORITHM","expiresIn","JWT_EXPIRES","userDao","headers","authorization","decoded","moment","isAfter","findByUsername","omit","CookieAuthHandler","creds","login","destroy","KnexConnector","init","connection","Knex","setColumnAliases","aliases","columnAliases","test","raw","KnexFilterParser","parseQueryString","builder","string","tableName","allowGlobalSearch","caseInsensitive","undefined","parser","FQLParser","KnexParser","toKnex","parseFilters","filter","query","prop","elm","type","value","whereBetween","where","whereRaw","whereExists","whereNotExists","propComplex","includes","isArray","whereIn","map","value_likeraw","value_nolikeraw","value_rawilike","value_notrawilike","parseSort","sort","field","direction","BaseKnexDao","loadAllData","limit","select","offset","loadFilteredData","filters","sorts","orderByRaw","countFilteredData","count","as","loadById","objectId","save","object","insert","returning","newObject","existing","IUserDao","BaseController","entity","get","listEntidad","getEntidad","saveEntidad","put","updateEntidad","deleteEntidad","service","table","list","params","setHeader","BaseService","dao","st","lm","Object","filteredData","Runtime","optimist","_optimist","usage","argv","h","help","App","serverClass","clusterClass","runtime","serverConfig","i18n","REPL_ENABLED","startRepl","net","socket","remote","repl","prompt","input","output","terminal","useColors","preview","context","db","REPL_PORT"],"mappings":"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"}