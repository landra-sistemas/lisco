{"version":3,"file":"lisco.modern.js","sources":["../src/common/Utils.js","../src/common/I18nLoader.js","../src/common/JsonResponse.js","../src/common/TokenGenerator.js","../src/server/Server.js","../src/server/ClusterServer.js","../src/events/EventHandler.js","../src/logger/Logger.js","../src/auth/AuthController.js","../src/auth/IAuthHandler.js","../src/auth/jwt/JwtAuthHandler.js","../src/auth/cookie/CookieAuthHandler.js","../src/db/knex/KnexConnector.js","../src/db/knex/filters/KnexFilterParser.js","../src/db/knex/dao/BaseKnexDao.js","../src/db/IUserDao.js","../src/base/BaseController.js","../src/base/BaseService.js","../src/App.js","../src/common/Runtime.js"],"sourcesContent":["import crypto from 'crypto';\r\nimport util from 'util';\r\n\r\nexport default class Utils {\r\n    static arrayToLower(mcArray) {\r\n        let tmp = mcArray.join('~').toLowerCase();\r\n        return tmp.split('~');\r\n    }\r\n\r\n    static replaceAll(str, find, replace) {\r\n        return str.replace(new RegExp(find.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replace);\r\n    }\r\n\r\n    /**\r\n     * Metodo de encript para las contraseñas y demas.\r\n     * \r\n     * @param {*} text \r\n     */\r\n    static encrypt(text) {\r\n        const algorithm = 'aes-256-cbc';\r\n        const secret = Buffer.from(process.env.CRYPT_SECRET, 'hex');\r\n        const iv = Buffer.from(process.env.CRYPT_IV, 'hex');\r\n\r\n        const cipher = crypto.createCipheriv(algorithm, secret, iv);\r\n        let encrypted = cipher.update(text);\r\n        encrypted = Buffer.concat([encrypted, cipher.final()]);\r\n        return encrypted.toString('hex');\r\n    }\r\n\r\n    /**\r\n     * Metodo de decrypt para las contraseñas y demas\r\n     * @param {*} text \r\n     */\r\n    static decrypt(text) {\r\n        const algorithm = 'aes-256-cbc';\r\n        const secret = Buffer.from(process.env.CRYPT_SECRET, 'hex');\r\n        const iv = Buffer.from(process.env.CRYPT_IV, 'hex');\r\n\r\n        const encryptedText = Buffer.from(text, 'hex');\r\n\r\n        const decipher = crypto.createDecipheriv(algorithm, secret, iv);\r\n        let decrypted = decipher.update(encryptedText);\r\n        decrypted = Buffer.concat([decrypted, decipher.final()]);\r\n        return decrypted.toString();\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * Utiliza una promise para ejecutar un setTimeout y hacer un falso sleep.\r\n     * \r\n     * @param {*} ms \r\n     */\r\n    static sleep(ms) {\r\n        let promise_sleep = util.promisify(setTimeout);\r\n\r\n        return promise_sleep(ms);\r\n    }\r\n\r\n    /**\r\n     * Genera dos claves para los metodos crypt y decrypt\r\n     */\r\n    static generateKeys() {\r\n        return {\r\n            key: crypto.randomBytes(32).toString('hex'),\r\n            iv: crypto.randomBytes(16).toString('hex')\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * \"aplana\" un objeto jerarquico en una estructura clave-valor.\r\n     * \r\n     * @param {*} ob \r\n     * @returns \r\n     */\r\n    static flattenObject(ob) {\r\n        let toReturn = {};\r\n        let flatObject;\r\n        for (let i in ob) {\r\n            if (!ob.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n            //Devolver los arrays tal cual\r\n            if (ob[i] && Array === ob[i].constructor) {\r\n                toReturn[i] = ob[i];\r\n                continue;\r\n            }\r\n            if ((typeof ob[i]) === 'object') {\r\n                flatObject = Utils.flattenObject(ob[i]);\r\n                for (let x in flatObject) {\r\n                    if (!flatObject.hasOwnProperty(x)) {\r\n                        continue;\r\n                    }\r\n                    //Exclude arrays from the final result\r\n                    if (flatObject[x] && Array === flatObject.constructor) {\r\n                        continue;\r\n                    }\r\n                    toReturn[i + (!!isNaN(x) ? '.' + x : '')] = flatObject[x];\r\n                }\r\n            } else {\r\n                toReturn[i] = ob[i];\r\n            }\r\n        }\r\n        return toReturn;\r\n    }\r\n\r\n    /**\r\n     * Invierte un objeto aplanado recuperando su forma original\r\n     * \r\n     * @param {*} data \r\n     * @returns \r\n     */\r\n    static unflatten(data) {\r\n        var result = {}\r\n        for (var i in data) {\r\n            var keys = i.split('.')\r\n            keys.reduce(function (r, e, j) {\r\n                return r[e] || (r[e] = isNaN(Number(keys[j + 1])) ? (keys.length - 1 == j ? data[i] : {}) : [])\r\n            }, result)\r\n        }\r\n        return result\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @returns \r\n     */\r\n    static expressHandler() {\r\n\r\n        return (fn) => {\r\n            return function asyncUtilWrap(...args) {\r\n                const fnReturn = fn(...args);\r\n                const next = args[args.length - 1];\r\n                return Promise.resolve(fnReturn).catch((e) => {\r\n                    return next(e);\r\n                });\r\n            };\r\n        };\r\n    }\r\n}\r\n\r\n","import fs from \"fs\";\r\nimport util from \"util\";\r\nimport Utils from \"./Utils.js\";\r\n\r\nimport chokidar from \"chokidar\";\r\n\r\nexport default class I18nLoader {\r\n    constructor() {\r\n        this.watcher = {};\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param lang\r\n     * @param callback\r\n     */\r\n    async load(custom) {\r\n        const lang = custom || process.env.DEFAULT_LANG;\r\n\r\n        if (!this.currentData) {\r\n            this.currentData = {};\r\n        }\r\n        if (!this.currentDataFlat) {\r\n            this.currentDataFlat = {};\r\n        }\r\n\r\n        const file = process.cwd() + \"/i18n/lang_\" + lang + \".json\";\r\n\r\n        // Initialize watcher.\r\n        this.watcher[lang] = chokidar.watch(file, {\r\n            ignored: /(^|[/\\\\])\\../, // ignore dotfiles\r\n            persistent: true,\r\n        });\r\n        //Add change watcher\r\n        this.watcher[lang].on(\"change\", (path) => this.loadFile(path, lang));\r\n\r\n        //Initialize file load\r\n        await this.loadFile(file, lang);\r\n    }\r\n\r\n    /**\r\n     * Carga el archivo de traducciones.\r\n     *\r\n     * @param {*} file\r\n     * @param {*} lang\r\n     */\r\n    async loadFile(file, lang) {\r\n        const readfile = util.promisify(fs.readFile);\r\n        try {\r\n            const data = await readfile(file, \"utf8\");\r\n            var parsedData = JSON.parse(data);\r\n\r\n            this.currentDataFlat[lang] = Utils.flattenObject(parsedData);\r\n            this.currentData[lang] = parsedData;\r\n        } catch (ex) {\r\n            if (ex?.code === \"ENOENT\") {\r\n                return console.log(\"Lang file does not exist. Create it on ./i18n/lang_{xx}.json\");\r\n            }\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} key\r\n     */\r\n    async translate(key, lang) {\r\n        if (!lang) lang = process.env.DEFAULT_LANG;\r\n\r\n        if (this.currentDataFlat && this.currentDataFlat[lang] && this.currentDataFlat[lang][key]) {\r\n            return this.currentData[lang][key];\r\n        }\r\n\r\n        if (!this.currentDataFlat || !this.currentDataFlat[lang]) {\r\n            await this.load(lang);\r\n            if (this.currentDataFlat && this.currentDataFlat[lang] && this.currentDataFlat[key]) {\r\n                return this.currentDataFlat[lang][key];\r\n            }\r\n        }\r\n        return \"undefined.\" + key;\r\n    }\r\n}\r\n","export default class JsonResponse {\r\n    constructor(success, data, message, total) {\r\n        this.data = data;\r\n        this.success = success;\r\n        this.total = total;\r\n        this.message = message || '';\r\n    }\r\n\r\n    toJson() {\r\n        return (this);\r\n    }\r\n}\r\n","/**\r\n * Example to refresh tokens using https://github.com/auth0/node-jsonwebtoken\r\n * It was requested to be introduced at as part of the jsonwebtoken library,\r\n * since we feel it does not add too much value but it will add code to mantain\r\n * we won't include it.\r\n *\r\n * I create this gist just to help those who want to auto-refresh JWTs.\r\n */\r\nimport jsonwebtoken from 'jsonwebtoken';\r\nimport * as uuid from 'uuid';\r\n\r\nexport default class TokenGenerator {\r\n\r\n    constructor(privateKey, options) {\r\n        this.privateKey = privateKey;\r\n        this.options = options;\r\n    }\r\n\r\n    sign(payload) {\r\n        const jwtSignOptions = { ...this.options, jwtid: uuid.v4() };\r\n        return jsonwebtoken.sign(payload, this.privateKey, jwtSignOptions);\r\n    }\r\n\r\n    verify(token) {\r\n        return jsonwebtoken.verify(token, this.privateKey, this.options);\r\n    }\r\n\r\n    refresh(token) {\r\n        const payload = jsonwebtoken.verify(token, this.privateKey, this.options);\r\n        delete payload.sub;\r\n        delete payload.iss;\r\n        delete payload.aud;\r\n        delete payload.iat;\r\n        delete payload.exp;\r\n        delete payload.nbf;\r\n        delete payload.jti; //We are generating a new token, if you are using jwtid during signing, pass it in refreshOptions\r\n        const jwtSignOptions = { ...this.options, jwtid: uuid.v4() };\r\n        // The first signing converted all needed options into claims, they are already in the payload\r\n        return jsonwebtoken.sign(payload, this.privateKey, jwtSignOptions);\r\n    }\r\n}\r\n","import helmet from \"helmet\";\r\nimport express from \"express\";\r\nimport compression from \"compression\";\r\nimport cors from \"cors\";\r\nimport fileUpload from \"express-fileupload\";\r\nimport url from \"url\";\r\nimport lodash from \"lodash\";\r\nimport { JsonResponse, Utils } from \"../common/index.js\";\r\n\r\n/**\r\n * Clase servidor encargada de configurar las rutas.\r\n *\r\n * que el codigo se disperse entre diferentes proyectos.\r\n */\r\nexport default class Server {\r\n    /**\r\n     *\r\n     * @param {*} config\r\n     * @param {*} statics\r\n     * @param {*} routes\r\n     */\r\n    constructor(config, statics, routes) {\r\n        this.app = express();\r\n        this.express_config = lodash.defaultsDeep(config, {\r\n            helmet: true,\r\n            json: true,\r\n            urlencoded: true,\r\n            compression: true,\r\n            cors: { origin: true, credentials: true },\r\n            fileupload: true,\r\n            socketio: { transports: [\"websocket\"] },\r\n            traceRequests: false,\r\n        });\r\n        this.statics = statics;\r\n        this.routes = routes;\r\n    }\r\n\r\n    /**\r\n     * Inicializa el servidor\r\n     */\r\n    async initialize() {\r\n        this.config(this.express_config);\r\n        if (this.customizeExpress) {\r\n            await this.customizeExpress(this.app);\r\n        }\r\n        await this.configureRoutes(this.routes);\r\n        await this.errorHandler();\r\n    }\r\n\r\n    /**\r\n     * Funcion sobreescribible para personalizar los componentes cargados en Express\r\n     *\r\n     * Aqui se pueden poner cosas como:\r\n     *\r\n     * this.app.use(cookieParser())... etc\r\n     */\r\n    customizeExpress() {}\r\n\r\n    /**\r\n     * Se encarga de realizar la configuración inicial del servidor\r\n     *\r\n     */\r\n    config(config) {\r\n        if (config && config.helmet) {\r\n            //Security\r\n            this.app.use(helmet(config && lodash.isObject(config.helmet) && config.helmet));\r\n        }\r\n        if (config && config.json) {\r\n            //mount json form parser\r\n            this.app.use(express.json());\r\n        }\r\n\r\n        if (config && config.urlencoded) {\r\n            //mount query string parser\r\n            this.app.use(express.urlencoded({ extended: true }));\r\n        }\r\n        if (config && config.compression) {\r\n            // compress responses\r\n            this.app.use(compression());\r\n        }\r\n        if (config && config.cors) {\r\n            //Enable cors to allow external references\r\n            this.app.options(\"*\", cors(config && lodash.isObject(config.cors) && config.cors));\r\n            this.app.use(cors(config && lodash.isObject(config.cors) && config.cors));\r\n        }\r\n        if (config && config.fileupload) {\r\n            // upload middleware\r\n            this.app.use(fileUpload());\r\n        }\r\n\r\n        if (this.statics) {\r\n            //add static paths\r\n            for (const idx in this.statics) {\r\n                this.app.use(idx, express.static(this.statics[idx]));\r\n            }\r\n        }\r\n\r\n        //Logging\r\n        if (config && config.traceRequests === true && process.env.DISABLE_LOGGER != \"true\") {\r\n            this.app.use((request, response, next) => {\r\n                request.requestTime = Date.now();\r\n                response.on(\"finish\", () => {\r\n                    let pathname = url.parse(request.url).pathname;\r\n                    let end = Date.now() - request.requestTime;\r\n                    let user = (request && request.session && request.session.user_id) || \"\";\r\n\r\n                    console.debug(\"APIRequest[\" + process.pid + \"]::. [\" + request.method + \"] (user:\" + user + \")  \" + pathname + \" |-> took: \" + end + \" ms\");\r\n                    console.debug(JSON.stringify(request.body));\r\n                });\r\n                next();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Crea el cargador automatico de rutas\r\n     */\r\n    configureRoutes(routes) {\r\n        const router = express.Router();\r\n        this.app.use(router);\r\n\r\n        //create controllers\r\n        this.loadRoutes(this.app, routes);\r\n    }\r\n\r\n    /**\r\n     * Instancia la lista de rutas disponibles\r\n     * @param apps\r\n     * @returns {*}\r\n     */\r\n    loadRoutes(app, routes) {\r\n        if (!routes) return;\r\n\r\n        for (const route of routes) {\r\n            if (!route) {\r\n                console.warn(\"Empty route\");\r\n                continue;\r\n            }\r\n            let router = route.configure();\r\n\r\n            //perform autoconfig for base api crud operations\r\n            if (route.entity) {\r\n                router = route.configure(route.entity, { service: route.service, table: route.table });\r\n            }\r\n\r\n            //load shorthand routes\r\n            if (!lodash.isEmpty(route.routes)) {\r\n                const exAsync = Utils.expressHandler();\r\n                for (const path in route.routes) {\r\n                    const cfg = route.routes[path];\r\n                    for (const method in cfg) {\r\n                        const handler = cfg[method];\r\n                        if (Array.isArray(handler)) {\r\n                            //Securización (keycloak)\r\n                            router[method](path, handler[0], exAsync(handler[1]));\r\n                        } else {\r\n                            router[method](path, exAsync(handler));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (router) {\r\n                app.use(router);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Errores\r\n     */\r\n    errorHandler() {\r\n        // error handler\r\n        this.app.use((err, req, res, next) => {\r\n            let jsRes = new JsonResponse();\r\n            jsRes.success = false;\r\n            jsRes.message = err.message; //!FIXME protect error displaying in REST Responses\r\n            console.error(err);\r\n\r\n            res.status(500).json(jsRes.toJson());\r\n        });\r\n    }\r\n}\r\n","import http from \"http\";\r\nimport https from \"https\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport cluster from \"cluster\";\r\nimport { Server } from \"socket.io\";\r\nimport os from \"os\";\r\nimport { EventEmitter } from \"events\";\r\n\r\nimport ClusterMessages from \"cluster-messages\";\r\n\r\n/**\r\n * Inicializa la escucha del server en modo cluster\r\n */\r\nexport default class ClusterServer extends EventEmitter {\r\n    constructor(app) {\r\n        super();\r\n\r\n        if (!process.env.PORT) {\r\n            console.log(\"Using 3000 as default port. Customize via env PORT.\");\r\n        }\r\n        this.port = this.normalizePort(process.env.PORT || 3000);\r\n        this.clustered = process.env.CLUSTERED;\r\n        this.workers = [];\r\n        this.app = app;\r\n\r\n        this.executeOnlyMain = () => {};\r\n    }\r\n\r\n    setServerCls(cls) {\r\n        this.server = cls;\r\n    }\r\n\r\n    /**\r\n     * Iniciar el servidor en el puerto y con la configuración seleccionadas.\r\n     */\r\n    async start() {\r\n        if (this.clustered == \"true\") {\r\n            this.initClustered();\r\n        } else {\r\n            this.configureSocketIO();\r\n            this.executeOnlyMain();\r\n\r\n            await this.initUnclustered();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Inicializa el servidor de socketio en el puerto siguiente al configurado.\r\n     *\r\n     * Se puede desactivar mediante la config socketio: false al realizar el App.init()\r\n     */\r\n    configureSocketIO() {\r\n        if (this.server.express_config && this.server.express_config.socketio) {\r\n            this.app.io = new Server(this.server.express_config && this.server.express_config.socketio);\r\n            this.app.io.listen(this.port + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Inicializa la clase server encargada del control de las solicitudes en forma multiproceso.\r\n     *\r\n     */\r\n    async initClustered() {\r\n        //Launch cluster\r\n        if (cluster.isPrimary) {\r\n            this.configureSocketIO();\r\n\r\n            this.executeOnlyMain();\r\n\r\n            let messages = new ClusterMessages();\r\n            messages.on(\"event\", (msg, callback) => {\r\n                if (msg && msg.event) {\r\n                    if (process.env.DEBUG_EVENTS == true) {\r\n                        console.debug(`Received '${msg.event}' from ${msg.props.owner} at Master`);\r\n                    }\r\n                    //Desencadenar en el proceso principal tambien\r\n                    this.app.events.emit(msg.event, msg.props, callback);\r\n                }\r\n            });\r\n\r\n            //Count the machine's CPUs\r\n            const cpuCount = os.cpus().length;\r\n\r\n            //Create a worker for each CPU\r\n            for (let idx = 0; idx < cpuCount; idx += 1) {\r\n                this.initWorker();\r\n            }\r\n\r\n            //Listen for dying workers\r\n            cluster.on(\"exit\", (worker) => {\r\n                //Replace the dead worker, we're not sentimental\r\n                console.log(\"Worker \" + worker.id + \" died :(\");\r\n                this.initWorker();\r\n            });\r\n        } else {\r\n            await this.initUnclustered();\r\n            console.log(`Worker ${process.pid} started`);\r\n        }\r\n    }\r\n    /**\r\n     * Inicia un worker\r\n     */\r\n    initWorker() {\r\n        let worker = cluster.fork();\r\n        console.log(`Running worker ${worker.process.pid}`);\r\n\r\n        this.workers.push(worker);\r\n    }\r\n\r\n    /**\r\n     * Inicializa la clase server encargada del control de las solicitudes en un unico proceso.\r\n     *\r\n     */\r\n    async initUnclustered() {\r\n        this.server.port = this.port;\r\n        //create http server\r\n        let server = http.Server(this.server.app);\r\n\r\n        await this.server.initialize();\r\n\r\n        if (this.server.beforeListen) await this.server.beforeListen();\r\n        //listen on provided ports\r\n        server.listen(this.server.port);\r\n\r\n        if (this.server.afterListen) await this.server.afterListen();\r\n\r\n        //add error handler\r\n        server.on(\"error\", (err) => {\r\n            this.handleErrors(err, this.server.port);\r\n        });\r\n        //start listening on port\r\n        server.on(\"listening\", () => {\r\n            console.log(\"Server Worker running on port: \" + this.port + \"!\");\r\n            this.emit(\"listening\", this.port);\r\n        });\r\n\r\n        if (process.env.SSL && process.env.SSL == \"true\") {\r\n            if (!process.env.SSL_KEY || !process.env.SSL_CERT || !process.env.SSL_PASS) {\r\n                console.error(\"Invalid SSL configuration. SLL_KEY, SSL_CERT and SSL_PASS needed\");\r\n                process.exit(0);\r\n            }\r\n\r\n            var key = fs.readFileSync(path.resolve(process.cwd(), process.env.SSL_KEY || \"key.pem\"));\r\n            var cert = fs.readFileSync(path.resolve(process.cwd(), process.env.SSL_CERT || \"cert.pem\"));\r\n\r\n            var options = {\r\n                key: key,\r\n                cert: cert,\r\n                passphrase: process.env.SSL_PASS,\r\n            };\r\n\r\n            if (!process.env.SSL_PORT) {\r\n                console.log(\"Using 3443 as ssl default port. Customize via env SSL_PORT.\");\r\n            }\r\n            var sslPort = this.normalizePort(process.env.SSL_PORT || 3443);\r\n            var serverSsl = https.createServer(options, this.server.app);\r\n            serverSsl.listen(sslPort);\r\n            //add error handler\r\n            serverSsl.on(\"error\", (err) => {\r\n                this.handleErrors(err, sslPort);\r\n            });\r\n            //start listening on port\r\n            serverSsl.on(\"listening\", () => {\r\n                console.log(\"Server Worker running on port: \" + sslPort + \"!\");\r\n                this.emit(\"listening_ssl\", sslPort);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Controla los posibles errores de formato en el puerto\r\n     * @param val\r\n     * @returns {*}\r\n     */\r\n    normalizePort(val) {\r\n        let port = parseInt(val, 10);\r\n\r\n        if (isNaN(port)) {\r\n            //named pipe\r\n            return val;\r\n        }\r\n\r\n        if (port >= 0) {\r\n            //port number\r\n            return port;\r\n        }\r\n\r\n        return false;\r\n    }\r\n    /**\r\n     * Gestiona los errores en el listen del servidor\r\n     */\r\n    handleErrors(error, port) {\r\n        if (error.syscall !== \"listen\") {\r\n            throw error;\r\n        }\r\n\r\n        let bind = typeof port === \"string\" ? \"Pipe \" + port : \"Port \" + port;\r\n\r\n        //handle specific listen errors with friendly messages\r\n        switch (error.code) {\r\n            case \"EACCES\":\r\n                console.error(bind + \" requires elevated privileges\");\r\n                process.exit(1);\r\n                break;\r\n            case \"EADDRINUSE\":\r\n                console.error(bind + \" is already in use\");\r\n                process.exit(1);\r\n                break;\r\n            default:\r\n                throw error;\r\n        }\r\n    }\r\n}\r\n","import cluster from \"cluster\";\r\nimport { EventEmitter } from \"events\";\r\nimport ClusterMessages from \"cluster-messages\";\r\n\r\n/**\r\n * Clase encargada de la generacion de eventos.\r\n */\r\nexport default class EventHandler extends EventEmitter {\r\n    constructor(app) {\r\n        super();\r\n        this.messages = new ClusterMessages();\r\n\r\n        this.app = app; //Se recibe el singleton App para evitar referencias cruzadas\r\n\r\n        if (cluster.isWorker) {\r\n            // Levanto, en los worker, la escucha para recibir los eventos en broadcast de los demas hilos\r\n            this.messages.on(\"event\", (msg, callback) => {\r\n                if (msg && msg.event && process.pid !== msg.props.owner) {\r\n                    if (process.env.DEBUG_EVENTS == true) {\r\n                        console.debug(`Receiving broadcast ${msg.event} - ${process.pid}`);\r\n                    }\r\n                    super.emit(msg.event, { ...msg.props }, callback);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sobreescribir el emitter para notificar a los hijos\r\n     *\r\n     * @param {*} evt\r\n     * @param {*} props\r\n     */\r\n    emit(evt, props, callback) {\r\n        //Desencadenar en local\r\n        super.emit(evt, props, callback);\r\n\r\n        if (evt && props && cluster.isWorker && process.pid !== props.owner) {\r\n            if (process.env.DEBUG_EVENTS == true) {\r\n                console.debug(`${evt} -> Firing from ${process.pid} to master`);\r\n            }\r\n            if (!props) {\r\n                props = {};\r\n            }\r\n            props.owner = process.pid;\r\n            this.messages.send(\"event\", { event: evt, props: { ...props } }, callback);\r\n        }\r\n\r\n        if (evt && props && cluster.isPrimary && this.app && this.app.server && this.app.server.workers) {\r\n            if (process.env.DEBUG_EVENTS == true) {\r\n                console.debug(`${evt} -> Firing from master to workers`);\r\n            }\r\n            this.messages.send(\"event\", { event: evt, props: { ...props } }, callback);\r\n        }\r\n    }\r\n}\r\n","import log4js from \"log4js\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport util from \"util\";\r\n\r\nconst { configure, getLogger } = log4js;\r\n\r\nexport default class Logger {\r\n    static async configure() {\r\n        const readfile = util.promisify(fs.readFile);\r\n\r\n        const json = await readfile(path.resolve(process.cwd(), \"./log4js.json\"), \"utf8\");\r\n\r\n        configure(JSON.parse(json));\r\n\r\n        //Nota para el futuro:\r\n        // Esto sobreescribe los metodos de console.log\r\n        // Es necesario que la sitaxis se mantenga tal cual....\r\n        (() => {\r\n            const log_logger = getLogger(\"log\");\r\n            const error_logger = getLogger(\"error\");\r\n            const debug_logger = getLogger(\"debug\");\r\n            console.log = function () {\r\n                let args = Array.prototype.slice.call(arguments);\r\n                // log.apply(this, args);\r\n                log_logger.log(\"info\", args[0]);\r\n            };\r\n            console.error = function () {\r\n                let args = Array.prototype.slice.call(arguments);\r\n                // error.apply(this, args);\r\n                error_logger.log(\"error\", args[0]);\r\n            };\r\n            console.info = function () {\r\n                let args = Array.prototype.slice.call(arguments);\r\n                // info.apply(this, args);\r\n                log_logger.log(\"info\", args[0]);\r\n            };\r\n            console.debug = function () {\r\n                /*if (global.settings.debug.value) {*/\r\n                let args = Array.prototype.slice.call(arguments);\r\n                // debug.apply(this, [args[1], args[2]]);\r\n                debug_logger.log(\"debug\", args[0]);\r\n            };\r\n\r\n            console.custom = function (logger, level, message) {\r\n                const custom_logger = getLogger(logger);\r\n                custom_logger.log(level, message);\r\n            };\r\n        })();\r\n    }\r\n}\r\n","import express from \"express\";\r\nimport url from \"url\";\r\nimport { JsonResponse, Utils } from \"../common/index.js\";\r\n\r\nimport { pathToRegexp } from \"path-to-regexp\";\r\n\r\nexport default class AuthController {\r\n    constructor(publicPathsList, AuthHandler) {\r\n        this.router = express.Router();\r\n        this.publicPathsList = [...publicPathsList, \"/login\"];\r\n\r\n        this.AuthHandler = AuthHandler;\r\n    }\r\n\r\n    configure() {\r\n        const exAsync = Utils.expressHandler();\r\n        this.router.use(exAsync((...args) => this.check(...args)));\r\n        this.router.post(\r\n            \"/login\",\r\n            exAsync((...args) => this.loginPost(...args))\r\n        );\r\n        this.router.post(\r\n            \"/logout\",\r\n            exAsync((...args) => this.logout(...args))\r\n        );\r\n\r\n        return this.router;\r\n    }\r\n\r\n    /**\r\n     * Controla que los usuarios tengan sesion para acceder a los metodos privados de la API\r\n     *\r\n     * @param {*} request\r\n     * @param {*} response\r\n     * @param {*} next\r\n     */\r\n    async check(request, response, next) {\r\n        try {\r\n            //Rutas ublicas\r\n            for (let path of this.publicPathsList) {\r\n                const expr = pathToRegexp(path);\r\n                if (expr.exec(url.parse(request.url).pathname) !== null) {\r\n                    return next();\r\n                }\r\n            }\r\n\r\n            if (await this.AuthHandler.check(request)) {\r\n                return next();\r\n            }\r\n\r\n            return response.status(403).json(new JsonResponse(false, null, \"Forbidden\").toJson());\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return response.status(403).json(new JsonResponse(false, null, \"Forbidden\").toJson());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Valida los credenciales de un usuario\r\n     *\r\n     * TODO logger console.custom(\"access\", INFO);\r\n     *\r\n     * @param {*} request\r\n     * @param {*} response\r\n     */\r\n    async loginPost(request, response) {\r\n        if (request.body.username) {\r\n            try {\r\n                let data = await this.AuthHandler.validate(request, request.body.username, request.body.password);\r\n                if (data) {\r\n                    return response.status(200).json(new JsonResponse(true, data).toJson());\r\n                }\r\n                return response.status(401).json(new JsonResponse(false, null, \"Unauthorized - Incorrect credentials\").toJson());\r\n            } catch (ex) {\r\n                console.error(ex);\r\n                return response.status(401).json(new JsonResponse(false, null, \"Unauthorized - Error, check log\").toJson());\r\n            }\r\n        }\r\n        return response.status(401).json(new JsonResponse(false, null, \"Unauthorized - Missing parameters\").toJson());\r\n    }\r\n\r\n    /**\r\n     * Cierra la sesion del usuario\r\n     *\r\n     * @param {*} request\r\n     * @param {*} response\r\n     */\r\n    async logout(request, response) {\r\n        if (this.AuthHandler.logout) {\r\n            //Depende de que el authHandler implementado pueda realizar esta accion\r\n            try {\r\n                await this.AuthHandler.logout(request);\r\n                return response.status(200).json(new JsonResponse(true).toJson());\r\n            } catch (ex) {\r\n                console.error(ex);\r\n                return response.status(500).json(new JsonResponse(false, null, ex).toJson());\r\n            }\r\n        }\r\n        return response.status(200).json(new JsonResponse(true).toJson());\r\n    }\r\n}\r\n","export default class IAuthHandler {\r\n    constructor() {\r\n        if (!this.check) {\r\n            throw new Error(\"AuthHandler must have 'check' vethod\");\r\n        }\r\n        if (!this.validate) {\r\n            throw new Error(\"AuthHandler must have 'validate' vethod\");\r\n        }\r\n        // logout method is optional\r\n    }\r\n}\r\n\r\n","import { TokenGenerator, Utils } from '../../common/index.js';\r\nimport IAuthHandler from '../IAuthHandler.js'\r\nimport lodash from 'lodash';\r\nimport moment from 'moment';\r\n\r\nexport default class JwtAuthHandler extends IAuthHandler {\r\n    constructor(UserDao) {\r\n        super();\r\n\r\n        this.tokenGenerator = new TokenGenerator(process.env.JWT_SECRET, { audience: process.env.JWT_AUDIENCE, issuer: process.env.JWT_ISSUER, subject: process.env.JWT_SUBJECT, algorithm: process.env.JWT_ALGORITHM, expiresIn: process.env.JWT_EXPIRES })\r\n\r\n        if (!UserDao) {\r\n            throw new Error(\"Need 'UserDao' for user validation. Create 'UserDao' class extending 'IUserDao'\");\r\n        }\r\n        this.userDao = UserDao;\r\n    }\r\n\r\n    /**\r\n     * Metodo encargado de realizar la comprobacion para validar si la sesion del usuario es válida\r\n     * \r\n     * @param {*} request \r\n     */\r\n    async check(request) {\r\n        if (request.headers.authorization) {\r\n            const token = (request.headers.authorization || '').split(' ')[1] || '';\r\n\r\n            if (!token) {\r\n                console.error(\"Token needed\");\r\n                return false;\r\n            }\r\n            try {\r\n                var decoded = this.tokenGenerator.verify(token);\r\n                const { sub, username, exp } = decoded;\r\n\r\n                if (!sub || !username || moment(exp).isAfter(new Date())) {\r\n                    return false;\r\n                }\r\n\r\n                //Si la sesion es valida, lo introducimos en el contexto de la solicitud\r\n                request.session = { ...request.session, ...decoded };\r\n                return true;\r\n            } catch (ex) {\r\n                console.error(ex);\r\n                return false;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Método encargado de realizar la validación de un usuario. Utiliza IUserDao como interfaz para la realización de la query a BD.\r\n     * \r\n     * @param {*} username \r\n     * @param {*} password \r\n     */\r\n    async validate(request, username, password) {\r\n\r\n        const user = await this.userDao.findByUsername(username);\r\n\r\n        if (user && user.username === username && user.password === Utils.encrypt(password)) {\r\n            return this.tokenGenerator.sign(lodash.omit(user, ['password']));\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n}","import { Utils } from \"../../common/index.js\";\r\nimport IAuthHandler from \"../IAuthHandler.js\";\r\nimport lodash from \"lodash\";\r\n\r\n/**\r\n * Necesario:\r\n *  Instalar -->   express-session y algun session store\r\n * \r\n *  Mas info: https://www.npmjs.com/package/express-session\r\n * \r\n *  App.customizeExpress = () => {\r\n       this.app.use(session({\r\n            secret: 'keyboard cat',\r\n            resave: false,\r\n            saveUninitialized: true,\r\n            cookie: { secure: true }\r\n        }));\r\n    }\r\n */\r\n\r\nexport default class CookieAuthHandler extends IAuthHandler {\r\n    constructor(UserDao) {\r\n        super();\r\n\r\n        if (!UserDao) {\r\n            throw new Error(\"Need 'UserDao' for user validation. Create 'UserDao' class extending 'IUserDao'\");\r\n        }\r\n        this.userDao = UserDao;\r\n    }\r\n\r\n    /**\r\n     * Metodo encargado de realizar la comprobacion para validar si la sesion del usuario es válida\r\n     *\r\n     * @param {*} request\r\n     */\r\n    async check(request) {\r\n        if (request.headers.authorization) {\r\n            //Si se recibe por Auth Basic\r\n            const token = (request.headers.authorization || \"\").split(\" \")[1] || \"\";\r\n\r\n            const creds = Buffer.from(token, \"base64\").toString().split(\":\");\r\n            const login = creds[0];\r\n            const password = creds[1];\r\n\r\n            if (!(await this.validate(request, login, password))) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        if (request.session && request.session.username) {\r\n            //Si hay sesion almacenada\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Método encargado de realizar la validación de un usuario. Utiliza IUserDao como interfaz para la realización de la query a BD.\r\n     *\r\n     * @param {*} username\r\n     * @param {*} password\r\n     */\r\n    async validate(request, username, password) {\r\n        const user = await this.userDao.findByUsername(username);\r\n\r\n        if (user && user.username === username && user.password === Utils.encrypt(password)) {\r\n            request.session = { ...request.session, ...lodash.omit(user, [\"password\"]) };\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} request\r\n     */\r\n    logout(request) {\r\n        return new Promise((resolve) => {\r\n            if (request.session) {\r\n                request.session.destroy(resolve);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import Knex from 'knex'\r\n\r\nclass KnexConnector {\r\n\r\n\r\n    init(config) {\r\n\r\n        /**\r\n         * References the current connection of the app\r\n         * @type {Knex}\r\n         * @public\r\n         */\r\n        this.connection = Knex(config)\r\n    }\r\n\r\n    /**\r\n     * Configura de forma global los aliases de las columnas para utilizar en FQL.\r\n     * \r\n     * La estructura es \r\n     * {\r\n            \"table1\": {\r\n                \"alias1\": \"column1\",\r\n                \"alias2\": \"column2\"\r\n            },\r\n            \"table2\": {\r\n                \"alias1\": \"column1\"\r\n            }\r\n        }\r\n     *\r\n     * @param {*} aliases \r\n     */\r\n    setColumnAliases(aliases) {\r\n        this.columnAliases = aliases;\r\n    }\r\n    \r\n\r\n\r\n    test() {\r\n        return this.connection.raw('select 1+1 as result');\r\n    }\r\n}\r\n\r\n\r\nexport default new KnexConnector();","import { Utils } from \"../../../common/index.js\";\r\n\r\nimport { FQLParser, KnexParser } from \"@landra_sistemas/fql-parser\";\r\nimport KnexConnector from \"../KnexConnector.js\";\r\n\r\nexport default class KnexFilterParser {\r\n    /**\r\n     *\r\n     * @param {*} builder\r\n     * @param {*} string\r\n     * @returns\r\n     */\r\n    static parseQueryString(builder, string, tableName) {\r\n        const options = {\r\n            allowGlobalSearch: true,\r\n            caseInsensitive: true,\r\n        };\r\n        //Agregar los aliases en caso de que se hayan configurado de forma global\r\n        if (KnexConnector.columnAliases && KnexConnector.columnAliases[tableName]) {\r\n            options.aliases = KnexConnector.columnAliases[tableName];\r\n        }\r\n        //Options\r\n        if (KnexConnector.caseInsensitive !== undefined) {\r\n            options.caseInsensitive = KnexConnector.caseInsensitive;\r\n        }\r\n        if (KnexConnector.allowGlobalSearch !== undefined) {\r\n            options.allowGlobalSearch = KnexConnector.allowGlobalSearch;\r\n        }\r\n        const parser = new FQLParser(options);\r\n        const data = parser.parse(string);\r\n\r\n        return new KnexParser(tableName).toKnex(builder, data);\r\n    }\r\n\r\n    /**\r\n     * Convierte un objeto clave valor en un conjunto de filtros.\r\n     *\r\n     * - Filtro estandar:\r\n     *    filters: {\r\n     *       \"column\": \"value\" -> filtro generico exact\r\n     *    }\r\n     * - Filtro Objeto:\r\n     *    filters:{\r\n     *       \"column\": {\r\n     *       \"type\": \"date|between|exists|notexists|greater|greaterEq|less|lessEq|exact|exactI|not|null|notnull|like|likeI\"\r\n     *       \"start\": \"xxx\", //inicio de rango para el filtro de date y between\r\n     *       \"end\": \"xxx\", //fin de rango para el filtro date y between\r\n     *       \"value\": \"xxx\" //valor a utilizar para el resto de filtros\r\n     *     }\r\n     * }\r\n     *  - Filtro Lista:\r\n     *     filters: {\r\n     *       \"column\": [1, 2, 3]\r\n     *     }\r\n     *    Filtro de tipo IN, todos los elementos que coincidan\r\n     *\r\n     * - Definicion de tipos:\r\n     *    date: filtro de fechas desde y hasta\r\n     *    between: filtro entre dos valores concretos\r\n     *    exists: busca si existe la propiedad\r\n     *    notexists: busca si existe la propiedad\r\n     *    greater: mayor que\r\n     *    greaterEq: mayor o igual que\r\n     *    less: menor que\r\n     *    lessEq: menor o igual que\r\n     *    exact: valor exacto\r\n     *    exactI: valor exacto ignorando mayusculas y minusculas\r\n     *    not: distinto de\r\n     *    null: igual a null\r\n     *    notnull: distinto de null\r\n     *    like: filtro like\r\n     *    likeI: filtro like ignorando mayusculas y minusculas\r\n     */\r\n    static parseFilters(builder, filter, tableName) {\r\n        let query = builder;\r\n\r\n        for (let prop in filter) {\r\n            let elm = filter[prop];\r\n\r\n            if (typeof elm === \"object\") {\r\n                switch (elm.type) {\r\n                    case \"fql\":\r\n                        query = KnexFilterParser.parseQueryString(query, elm.value, tableName);\r\n                        break;\r\n                    case \"date\":\r\n                    case \"between\":\r\n                        if (elm.start && elm.end) {\r\n                            query = query.whereBetween(prop, [elm.start, elm.end]);\r\n                        }\r\n                        if (elm.start && !elm.end) {\r\n                            query = query.where(prop, \">=\", elm.start);\r\n                        }\r\n                        if (!elm.start && elm.end) {\r\n                            query = query.where(prop, \">=\", elm.end);\r\n                        }\r\n                        break;\r\n                    case \"dateraw\":\r\n                    case \"betweenraw\":\r\n                        if (elm.start && elm.end) {\r\n                            query = query.whereRaw(`${prop} BETWEEN ? AND ?`, [elm.start, elm.end]);\r\n                        }\r\n                        if (elm.start && !elm.end) {\r\n                            query = query.whereRaw(`${prop} >= ?`, [elm.start]);\r\n                        }\r\n                        if (!elm.start && elm.end) {\r\n                            query = query.whereRaw(`${prop} >= ?`, [elm.end]);\r\n                        }\r\n                        break;\r\n                    case \"jsonb\":\r\n                        query = query.whereRaw(`${prop} ILIKE ?`, [\"%\" + elm.value + \"%\"]);\r\n                        break;\r\n                    case \"full-text-psql\":\r\n                        query = query.whereRaw(`to_tsvector(${prop}::text) @@ to_tsquery(?)`, [elm.value]);\r\n                        break;\r\n\r\n                    case \"greater\":\r\n                    case \"greaterraw\":\r\n                        query = query.whereRaw(`${prop} > ?`, [elm.value]);\r\n                        break;\r\n                    case \"greaterEq\":\r\n                    case \"greaterEqraw\":\r\n                        query = query.whereRaw(`${prop} >= ?`, [elm.value]);\r\n                        break;\r\n                    case \"less\":\r\n                    case \"lessraw\":\r\n                        query = query.whereRaw(`${prop} < ?`, [elm.value]);\r\n                        break;\r\n                    case \"lessEq\":\r\n                    case \"lessEqraw\":\r\n                        query = query.whereRaw(`${prop} <= ?`, [elm.value]);\r\n                        break;\r\n                    case \"exists\":\r\n                        query = query.whereExists(prop);\r\n                        break;\r\n                    case \"notexists\":\r\n                        query = query.whereNotExists(prop);\r\n                        break;\r\n                    case \"exact\":\r\n                    case \"exactraw\":\r\n                        query = query.whereRaw(`${prop} = ?`, [elm.value]);\r\n                        break;\r\n                    case \"in\":\r\n                        let propComplex = prop;\r\n                        if (propComplex.includes(\",\")) {\r\n                            propComplex = prop.split(\",\");\r\n                        }\r\n                        if (!Array.isArray(elm.value) && elm.value != undefined) {\r\n                            query = query.whereIn(propComplex, elm.value.split(\",\"));\r\n                        } else {\r\n                            if (elm.value != undefined) {\r\n                                query = query.whereIn(propComplex, elm.value);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"inraw\":\r\n                        if (!Array.isArray(elm.value) && elm.value != undefined) {\r\n                            query = query.whereRaw(`${prop} IN (?)`, [\r\n                                elm.value\r\n                                    .split(\",\")\r\n                                    .map((e) => `'${e}'`)\r\n                                    .join(\",\"),\r\n                            ]);\r\n                        } else {\r\n                            if (elm.value != undefined) {\r\n                                query = query.whereRaw(`${prop} IN (?)`, [elm.value.map((e) => `'${e}'`).join(\",\")]);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"not\":\r\n                    case \"notraw\":\r\n                        query = query.whereRaw(`${prop} != ?`, [elm.value]);\r\n                        break;\r\n                    case \"like\":\r\n                    case \"likeraw\":\r\n                        let value_likeraw = Utils.replaceAll(elm.value, \"*\", \"%\");\r\n                        query = query.whereRaw(` ${prop} LIKE ?`, [value_likeraw]);\r\n                        break;\r\n                    case \"notlike\":\r\n                    case \"notlikeraw\":\r\n                        let value_nolikeraw = Utils.replaceAll(elm.value, \"*\", \"%\");\r\n                        query = query.whereRaw(` ${prop} NOT LIKE ?`, [value_nolikeraw]);\r\n                        break;\r\n                    case \"likeI\":\r\n                        let value_rawilike = Utils.replaceAll(elm.value, \"*\", \"%\");\r\n                        query = query.whereRaw(` ${prop} ILIKE ?`, [value_rawilike]);\r\n                        break;\r\n                    case \"notlikeI\":\r\n                        let value_notrawilike = Utils.replaceAll(elm.value, \"*\", \"%\");\r\n                        query = query.whereRaw(` ${prop} NOT ILIKE ?`, [value_notrawilike]);\r\n                        break;\r\n                    case \"null\":\r\n                    case \"nullraw\":\r\n                        query = query.whereRaw(`${prop} is NULL`);\r\n                        break;\r\n                    case \"notnull\":\r\n                    case \"notnullraw\":\r\n                        query = query.whereRaw(`${prop} is not NULL`);\r\n                        break;\r\n                }\r\n            } else {\r\n                //Si el valor no es un objeto se devuelve\r\n                query = query.where(prop, elm);\r\n            }\r\n        }\r\n\r\n        // console.log(query.toSQL());\r\n        return query;\r\n    }\r\n\r\n    /**\r\n     * Conversion de un objeto {property: XX, direction: ASC|DESC - ascend|descend} a un ORDER BY\r\n     *\r\n     * @param {*} sorts\r\n     */\r\n    static parseSort(sort) {\r\n        if (!sort.field || !sort.direction) {\r\n            return 1;\r\n        }\r\n\r\n        let direction = \"ASC\";\r\n        if (sort.direction === \"descend\") {\r\n            direction = \"DESC\";\r\n        }\r\n\r\n        return sort.field + \" \" + direction;\r\n    }\r\n}\r\n","import KnexFilterParser from \"../filters/KnexFilterParser.js\";\r\nimport KnexConnector from \"../KnexConnector.js\";\r\n\r\nimport lodash from \"lodash\";\r\n\r\n/**\r\n * Crear un dao con los métodos básicos\r\n */\r\nexport default class BaseKnexDao {\r\n    constructor() {\r\n        this.tableName = \"\";\r\n    }\r\n\r\n    loadAllData(start, limit) {\r\n        return KnexConnector.connection\r\n            .select(\"*\")\r\n            .from(this.tableName)\r\n            .limit(limit || 10000)\r\n            .offset(start);\r\n    }\r\n\r\n    async loadFilteredData(filters, start, limit) {\r\n        let sorts = 1;\r\n        if (filters.sort) {\r\n            sorts = KnexFilterParser.parseSort(filters.sort);\r\n        }\r\n\r\n        return KnexConnector.connection\r\n            .from(this.tableName)\r\n            .where((builder) => KnexFilterParser.parseFilters(builder, lodash.omit(filters, [\"sort\", \"start\", \"limit\"]), this.tableName))\r\n            .orderByRaw(sorts)\r\n            .limit(limit)\r\n            .offset(start);\r\n    }\r\n\r\n    async countFilteredData(filters) {\r\n        let data = await KnexConnector.connection\r\n            .from(this.tableName)\r\n            .where((builder) => KnexFilterParser.parseFilters(builder, lodash.omit(filters, [\"sort\", \"start\", \"limit\"]), this.tableName))\r\n            .count(\"id\", { as: \"total\" });\r\n\r\n        return data && data[0].total;\r\n    }\r\n\r\n    async loadById(objectId) {\r\n        const data = await KnexConnector.connection.from(this.tableName).where(\"id\", objectId);\r\n\r\n        if (data && data[0]) {\r\n            return data[0];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    save(object) {\r\n        return KnexConnector.connection.from(this.tableName).insert(object).returning(\"*\");\r\n    }\r\n    update(objectId, newObject) {\r\n        return KnexConnector.connection.from(this.tableName).where(\"id\", objectId).update(newObject).returning(\"*\");\r\n    }\r\n    async delete(objectId) {\r\n        const existing = await this.loadById(objectId);\r\n        if (!existing) {\r\n            throw \"NotFound\";\r\n        }\r\n        return KnexConnector.connection.from(this.tableName).where(\"id\", objectId).delete();\r\n    }\r\n}\r\n","import BaseKnexDao from \"./knex/dao/BaseKnexDao.js\";\r\n\r\nexport default class IUserDao extends BaseKnexDao {\r\n    constructor(tableName) {\r\n        super(tableName);\r\n\r\n        if (!this.findByUsername) {\r\n            throw new Error(\"AuthHandler must have 'findByUsername' method\");\r\n        }\r\n    }\r\n}\r\n","import express from \"express\";\r\nimport { JsonResponse, Utils } from \"../common/index.js\";\r\n\r\nexport class BaseController {\r\n    constructor() {\r\n        this.router = express.Router();\r\n        this.routes = {};\r\n        //Example routes shorthand\r\n        /*\r\n         {\r\n            \"/\": {\r\n                \"get\": this.listEntidad.bind(this),\r\n                \"post\": this.listEntidad.bind(this)\r\n            }\r\n         } \r\n         */\r\n    }\r\n\r\n    configure(entity, config) {\r\n        if (!entity) {\r\n            return this.router;\r\n        }\r\n\r\n        const exAsync = Utils.expressHandler();\r\n        this.router.get(\r\n            `/${entity}`,\r\n            exAsync((...args) => this.listEntidad(...args))\r\n        );\r\n        this.router.post(\r\n            `/${entity}/list`,\r\n            exAsync((...args) => this.listEntidad(...args))\r\n        );\r\n        this.router.get(\r\n            `/${entity}/:id`,\r\n            exAsync((...args) => this.getEntidad(...args))\r\n        );\r\n        this.router.post(\r\n            `/${entity}`,\r\n            exAsync((...args) => this.saveEntidad(...args))\r\n        );\r\n        this.router.put(\r\n            `/${entity}/:id`,\r\n            exAsync((...args) => this.updateEntidad(...args))\r\n        );\r\n        this.router.delete(\r\n            `/${entity}/:id`,\r\n            exAsync((...args) => this.deleteEntidad(...args))\r\n        );\r\n\r\n        this.service = config.service;\r\n        this.table = config.table;\r\n\r\n        return this.router;\r\n    }\r\n\r\n    /**\r\n     * Lista entidades en la aplicacion, es posible enviarle parametros de filtrado.\r\n     *\r\n     *\r\n     * @api {post} /:entidad/list Listar entidades\r\n     * @apiName Listar entidades\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async listEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n            let filters = request.method === \"POST\" ? request.body : request.query && request.query.filters ? JSON.parse(request.query.filters) : {};\r\n\r\n            let data = await service.list(filters, filters.start, filters.limit);\r\n            let jsRes = new JsonResponse(true, data.data, null, data.total);\r\n\r\n            response.json(jsRes.toJson());\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    }\r\n    /**\r\n     *Obtiene un elemento concreto mediante su identificador\r\n     *\r\n     *\r\n     * @api {get} /:entidad/:id Obtener entidad\r\n     * @apiName Obtener entidad\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async getEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n            let data = await service.loadById(request.params.id);\r\n            let jsRes = new JsonResponse(true, data);\r\n            let code = 200;\r\n            if (data == null) {\r\n                code = 404;\r\n                let message = \"Element not found\";\r\n                jsRes = new JsonResponse(false, null, message, 0);\r\n            }\r\n\r\n            response.status(code).json(jsRes.toJson());\r\n        } catch (e) {\r\n            console.error(e);\r\n            let message = \"\";\r\n            if (e.code == \"22P02\") {\r\n                //PostgreSQL error Code form string_to_UUID\r\n                message = \"Expected uiid\";\r\n            }\r\n            let jsRes = new JsonResponse(false, null, message, 0);\r\n            response.status(400).json(jsRes.toJson());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Almacena un elemento en BD\r\n     *\r\n     *\r\n     * @api {post} /:entidad/:id Crear entidad\r\n     * @apiName Crear entidad\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async saveEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n\r\n            let data = await service.save(request.body);\r\n            let jsRes = new JsonResponse(true, (data && data[0]) || { id: request.body.id });\r\n\r\n            response.setHeader(\"Location\", `/entity/${jsRes.data.id}`);\r\n            response.status(201).json(jsRes.toJson());\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Almacena un elemento en BD\r\n     *\r\n     *\r\n     * @api {put} /:entidad/:id Actualizar entidad\r\n     * @apiName Actualizar entidad\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async updateEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n\r\n            let data = await service.update(request.params.id, request.body);\r\n            let jsRes = new JsonResponse(true, (data && data[0]) || { id: request.body.id });\r\n\r\n            response.json(jsRes.toJson());\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Elimina un elemento correspondiente al identificador recibido\r\n     *\r\n     *\r\n     * @api {delete} /:entidad/:id/delete Delete entidad\r\n     * @apiName Eliminar entidad\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async deleteEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n            let data = await service.delete(request.params.id);\r\n            let jsRes = new JsonResponse(true, data);\r\n\r\n            response.status(204).json(jsRes.toJson());\r\n        } catch (e) {\r\n            console.error(e);\r\n            if (e == \"NotFound\") {\r\n                let message = \"Element not found\";\r\n                let jsRes = new JsonResponse(false, null, message, 0);\r\n                response.status(404).json(jsRes.toJson());\r\n            } else {\r\n                next(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { BaseKnexDao } from \"../db/index.js\";\r\n\r\nexport class BaseService {\r\n    constructor(cls, table) {\r\n        if (cls) {\r\n            this.dao = new cls();\r\n        } else {\r\n            this.dao = new BaseKnexDao(); //El sistema por defecto utiliza knex, si se pasa un dao personalizado se puede sobreescribir este comportamiento\r\n        }\r\n        if (table) {\r\n            this.dao.tableName = table;\r\n        }\r\n    }\r\n    /**\r\n     * Obtencion de una lista de elementos.\r\n     *\r\n     * filters, es opcional. Si no se pasan se devuelve lo que hay ;\r\n     */\r\n    async list(filters, start, limit) {\r\n        //Pagination\r\n        const st = start || 0;\r\n        const lm = limit || 1000; //Default limit\r\n\r\n        let response = {};\r\n        response.total = await this.dao.countFilteredData(filters, st, lm);\r\n\r\n        if (filters && Object.keys(filters).length !== 0) {\r\n            let filteredData = await this.dao.loadFilteredData(filters, st, lm);\r\n            response.data = filteredData;\r\n            return response;\r\n        }\r\n\r\n        response.data = await this.dao.loadAllData(start, limit);\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Obtencion de un elemento mediante su identificador\r\n     */\r\n    loadById(id) {\r\n        return this.dao.loadById(id);\r\n    }\r\n    /**\r\n     * Metodo de creacion.\r\n     *\r\n     * Si el identificador se pasa como undefined se creara un nuevo elemento,\r\n     * sino se modifica el correspondiente.\r\n     */\r\n    save(data) {\r\n        //Create\r\n        return this.dao.save(data);\r\n    }\r\n    /**\r\n     * Metodo de creacion.\r\n     *\r\n     * Si el identificador se pasa como undefined se creara un nuevo elemento,\r\n     * sino se modifica el correspondiente.\r\n     */\r\n    update(id, data) {\r\n        if (id) {\r\n            //Update\r\n            return this.dao.update(id, data);\r\n        }\r\n    }\r\n    /**\r\n     * Metodo de eliminado.\r\n     *\r\n     * El identificador es obligatorio para poder localizar el elemento a eliminar.\r\n     */\r\n    delete(id) {\r\n        if (id) {\r\n            return this.dao.delete(id);\r\n        }\r\n    }\r\n}\r\n","import { I18nLoader, Utils } from \"./common/index.js\";\r\nimport { EventHandler } from \"./events/index.js\";\r\nimport { ClusterServer, Server } from \"./server/index.js\";\r\nimport { Logger } from \"./logger/index.js\";\r\n\r\nimport net from \"net\";\r\nimport repl from \"repl\";\r\nimport { KnexConnector } from \"./db/index.js\";\r\nimport Runtime from \"./common/Runtime.js\";\r\n\r\nclass App {\r\n    constructor() {\r\n        this.serverClass = Server;\r\n        this.clusterClass = ClusterServer;\r\n    }\r\n\r\n    /**\r\n     * Inicializa la runtime de la aplicación para poder recibir parámetros por consola y generar claves.\r\n     * @returns\r\n     */\r\n    runtime(extra) {\r\n        return Runtime(extra);\r\n    }\r\n\r\n    /**\r\n     * Initializa las configuraciones para la app\r\n     *\r\n     */\r\n    async init(serverConfig) {\r\n        if (process.env.DISABLE_LOGGER != \"true\") {\r\n            await Logger.configure();\r\n        }\r\n\r\n        //Instanciar la clase server\r\n        const server = new this.serverClass(serverConfig, this.statics, this.routes);\r\n        if (this.customizeExpress) {\r\n            server.customizeExpress = this.customizeExpress;\r\n        }\r\n        if (this.beforeListen) {\r\n            server.beforeListen = this.beforeListen;\r\n        }\r\n        if (this.afterListen) {\r\n            server.afterListen = this.afterListen;\r\n        }\r\n\r\n        /**\r\n         * Gestor de eventos\r\n         * @type {EventHandler}\r\n         * @public\r\n         */\r\n        this.events = new EventHandler(this);\r\n\r\n        /**\r\n         * Gestor de traducciones\r\n         * @type {I18nLoader}\r\n         * @public\r\n         */\r\n        this.i18n = new I18nLoader();\r\n        await this.i18n.load();\r\n        /**\r\n         * Servidor actual\r\n         * @type {ClusterServer}\r\n         * @public\r\n         */\r\n        this.server = new this.clusterClass(this);\r\n\r\n        this.server.setServerCls(server);\r\n        this.server.executeOnlyMain = () => {\r\n            if (this.executeOnlyMain) this.executeOnlyMain();\r\n\r\n            if (process.env.REPL_ENABLED == \"true\") {\r\n                this.startRepl();\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Ejecuta el servidor con la configuracion de #init()\r\n     */\r\n    async start() {\r\n        if (!this.server) {\r\n            throw new Error(\"Call init first\");\r\n        }\r\n        await this.server.start();\r\n    }\r\n\r\n    /**\r\n     * Inicia el server replify para poder conectar terminales remotas\r\n     *\r\n     *\r\n     * Para que arranque es necesario especificar REPL_ENABLED en el archivo .env\r\n     */\r\n    startRepl() {\r\n        try {\r\n            net.createServer((socket) => {\r\n                const remote = repl.start({\r\n                    prompt: \"lisco::remote> \",\r\n                    input: socket,\r\n                    output: socket,\r\n                    terminal: true,\r\n                    useColors: true,\r\n                    preview: false,\r\n                });\r\n                remote.context.app = this;\r\n                remote.context.Utils = Utils;\r\n                remote.context.db = KnexConnector.connection;\r\n                remote.on(\"exit\", socket.end.bind(socket));\r\n            }).listen(process.env.REPL_PORT || 5001);\r\n        } catch (e) {\r\n            console.log(\"Remote REPL Conn: \" + e);\r\n        }\r\n\r\n        console.log(`Remote REPL started on port ${process.env.REPL_PORT || 5001}`);\r\n    }\r\n}\r\n\r\nexport default new App();\r\n","import Utils from \"./Utils.js\";\r\n\r\nimport yargs from \"yargs/yargs\";\r\nimport { hideBin } from \"yargs/helpers\";\r\n\r\n/**\r\n * Extra puede ser un array de objetos con la siguiente estructura:\r\n *\r\n * {\r\n *  \"key\": \"c\",\r\n *  \"alias\": \"config\",\r\n *  \"describe\": \"Configuración\",\r\n *  \"fn\": function(argv) { },\r\n *  \"nargs\": 0,\r\n *  \"required\": true\r\n * }\r\n * @param {*} extra\r\n * @returns\r\n */\r\nexport default async function Runtime(extra) {\r\n    const cfg = yargs(hideBin(process.argv))\r\n        .usage(\r\n            `Como usar: \r\n            node $0 [options] \r\n            \r\n            ** Si no se especifican parámetros el servidor arrancará normalmente. **`\r\n        )\r\n        .alias(\"g\", \"generateKeys\")\r\n        .describe(\"g\", \"Genera unas claves para la aplicación\")\r\n        .alias(\"c\", \"encrypt\")\r\n        .describe(\"c\", \"Codifica el String proporcionado en base a la contraseña de .env\")\r\n        .nargs(\"c\", 1)\r\n        .help(\"h\")\r\n        .alias(\"h\", \"help\");\r\n\r\n    let demand = [];\r\n    if (extra) {\r\n        for (const param of extra) {\r\n            cfg.alias(param.key, param.alias);\r\n            if (param.describe) {\r\n                cfg.describe(param.key, param.describe);\r\n            }\r\n            if (param.nargs !== 0) {\r\n                cfg.nargs(param.key, param.nargs);\r\n            }\r\n            if (param.boolean) {\r\n                cfg.boolean(param.key);\r\n            }\r\n            if (param.choices) {\r\n                cfg.choices(param.key, param.choices);\r\n            }\r\n            if (param.required) {\r\n                demand.push(param.key);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (demand.length !== 0) {\r\n        cfg.demandOption(demand);\r\n    }\r\n\r\n    const argv = cfg.argv;\r\n    //Parámetro para no arrancar el servidor y generar las claves JWT\r\n    if (argv.generateKeys) {\r\n        console.log(\"Generando claves para encriptación:\");\r\n        console.log(Utils.generateKeys());\r\n        return process.exit(1);\r\n    }\r\n\r\n    if (argv.encrypt) {\r\n        console.log(\"Resultado encryptación:\");\r\n        console.log(Utils.encrypt(argv.encrypt));\r\n        return process.exit(1);\r\n    }\r\n\r\n    if (extra) {\r\n        for (const param of extra) {\r\n            if (argv[param.key]) {\r\n                await param.fn(argv);\r\n                return process.exit(1);\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"names":["Utils","static","mcArray","join","toLowerCase","split","str","find","replace","RegExp","text","secret","Buffer","from","process","env","CRYPT_SECRET","iv","CRYPT_IV","cipher","crypto","createCipheriv","encrypted","update","concat","final","toString","encryptedText","createDecipheriv","decrypted","decipher","ms","util","promisify","setTimeout","promise_sleep","key","randomBytes","ob","flatObject","toReturn","i","hasOwnProperty","Array","constructor","flattenObject","x","isNaN","data","result","keys","reduce","r","e","j","Number","length","fn","args","next","Promise","resolve","fnReturn","catch","I18nLoader","this","watcher","async","custom","lang","DEFAULT_LANG","currentData","currentDataFlat","cwd","chokidar","watch","file","ignored","persistent","on","path","loadFile","readfile","fs","readFile","parsedData","JSON","parse","ex","code","console","log","error","load","JsonResponse","success","message","total","toJson","TokenGenerator","privateKey","options","sign","payload","_extends","jwtid","uuid","v4","jsonwebtoken","jwtSignOptions","verify","token","refresh","sub","iss","aud","iat","exp","nbf","jti","Server","config","statics","routes","app","express","express_config","lodash","defaultsDeep","helmet","json","urlencoded","compression","cors","origin","credentials","fileupload","socketio","transports","traceRequests","customizeExpress","configureRoutes","errorHandler","use","isObject","extended","fileUpload","idx","DISABLE_LOGGER","request","response","requestTime","Date","now","pathname","url","debug","pid","method","session","user_id","end","stringify","body","Router","router","loadRoutes","route","warn","configure","entity","service","table","isEmpty","exAsync","expressHandler","cfg","handler","isArray","err","req","res","jsRes","status","ClusterServer","EventEmitter","super","PORT","port","normalizePort","clustered","CLUSTERED","workers","executeOnlyMain","setServerCls","cls","server","initClustered","configureSocketIO","initUnclustered","io","listen","cluster","isPrimary","msg","callback","event","DEBUG_EVENTS","props","owner","events","emit","os","cpus","cpuCount","initWorker","worker","id","fork","push","http","initialize","beforeListen","afterListen","handleErrors","SSL","SSL_KEY","SSL_CERT","SSL_PASS","exit","readFileSync","cert","passphrase","SSL_PORT","serverSsl","https","createServer","sslPort","val","parseInt","syscall","bind","EventHandler","messages","isWorker","evt","send","getLogger","log4js","log_logger","error_logger","debug_logger","prototype","slice","call","arguments","info","logger","level","AuthController","publicPathsList","AuthHandler","check","post","loginPost","logout","pathToRegexp","exec","username","validate","password","IAuthHandler","Error","JwtAuthHandler","UserDao","tokenGenerator","JWT_SECRET","audience","JWT_AUDIENCE","issuer","JWT_ISSUER","subject","JWT_SUBJECT","algorithm","JWT_ALGORITHM","expiresIn","JWT_EXPIRES","userDao","headers","authorization","decoded","moment","isAfter","user","findByUsername","encrypt","omit","CookieAuthHandler","creds","login","destroy","KnexConnector$1","init","connection","Knex","setColumnAliases","aliases","columnAliases","test","raw","KnexFilterParser","builder","string","tableName","allowGlobalSearch","caseInsensitive","KnexConnector","undefined","FQLParser","KnexParser","toKnex","filter","query","prop","elm","type","parseQueryString","value","start","whereBetween","where","whereRaw","whereExists","whereNotExists","propComplex","includes","whereIn","map","value_likeraw","replaceAll","value_nolikeraw","value_rawilike","value_notrawilike","sort","field","direction","BaseKnexDao","loadAllData","limit","select","offset","filters","sorts","parseSort","parseFilters","orderByRaw","count","as","objectId","save","object","insert","returning","newObject","loadById","delete","IUserDao","get","listEntidad","getEntidad","saveEntidad","put","updateEntidad","deleteEntidad","list","params","setHeader","BaseService","dao","lm","countFilteredData","st","Object","filteredData","loadFilteredData","App$1","serverClass","clusterClass","runtime","extra","Runtime","yargs","hideBin","argv","usage","alias","describe","nargs","help","demand","param","boolean","choices","required","demandOption","generateKeys","serverConfig","i18n","REPL_ENABLED","startRepl","net","socket","remote","repl","prompt","input","output","terminal","useColors","preview","context","db","REPL_PORT"],"mappings":"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"}