{"version":3,"file":"lisco.modern.js","sources":["../src/common/Utils.js","../src/common/I18nLoader.js","../src/common/JsonResponse.js","../src/common/TokenGenerator.js","../src/server/Server.js","../src/server/ClusterServer.js","../src/events/EventHandler.js","../src/logger/Logger.js","../src/auth/AuthController.js","../src/auth/IAuthHandler.js","../src/auth/jwt/JwtAuthHandler.js","../src/auth/cookie/CookieAuthHandler.js","../src/db/knex/KnexConnector.js","../src/db/knex/filters/KnexFilterParser.js","../src/db/knex/dao/BaseKnexDao.js","../src/db/IUserDao.js","../src/base/BaseController.js","../src/base/BaseService.js","../src/App.js","../src/common/Runtime.js"],"sourcesContent":["import crypto from 'crypto';\r\nimport util from 'util';\r\n\r\nexport default class Utils {\r\n    static arrayToLower(mcArray) {\r\n        let tmp = mcArray.join('~').toLowerCase();\r\n        return tmp.split('~');\r\n    }\r\n\r\n    static replaceAll(str, find, replace) {\r\n        return str.replace(new RegExp(find.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replace);\r\n    }\r\n\r\n    /**\r\n     * Metodo de encript para las contraseñas y demas.\r\n     * \r\n     * @param {*} text \r\n     */\r\n    static encrypt(text) {\r\n        const algorithm = 'aes-256-cbc';\r\n        const secret = Buffer.from(process.env.CRYPT_SECRET, 'hex');\r\n        const iv = Buffer.from(process.env.CRYPT_IV, 'hex');\r\n\r\n        const cipher = crypto.createCipheriv(algorithm, secret, iv);\r\n        let encrypted = cipher.update(text);\r\n        encrypted = Buffer.concat([encrypted, cipher.final()]);\r\n        return encrypted.toString('hex');\r\n    }\r\n\r\n    /**\r\n     * Metodo de decrypt para las contraseñas y demas\r\n     * @param {*} text \r\n     */\r\n    static decrypt(text) {\r\n        const algorithm = 'aes-256-cbc';\r\n        const secret = Buffer.from(process.env.CRYPT_SECRET, 'hex');\r\n        const iv = Buffer.from(process.env.CRYPT_IV, 'hex');\r\n\r\n        const encryptedText = Buffer.from(text, 'hex');\r\n\r\n        const decipher = crypto.createDecipheriv(algorithm, secret, iv);\r\n        let decrypted = decipher.update(encryptedText);\r\n        decrypted = Buffer.concat([decrypted, decipher.final()]);\r\n        return decrypted.toString();\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * Utiliza una promise para ejecutar un setTimeout y hacer un falso sleep.\r\n     * \r\n     * @param {*} ms \r\n     */\r\n    static sleep(ms) {\r\n        let promise_sleep = util.promisify(setTimeout);\r\n\r\n        return promise_sleep(ms);\r\n    }\r\n\r\n    /**\r\n     * Genera dos claves para los metodos crypt y decrypt\r\n     */\r\n    static generateKeys() {\r\n        return {\r\n            key: crypto.randomBytes(32).toString('hex'),\r\n            iv: crypto.randomBytes(16).toString('hex')\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * \"aplana\" un objeto jerarquico en una estructura clave-valor.\r\n     * \r\n     * @param {*} ob \r\n     * @returns \r\n     */\r\n    static flattenObject(ob) {\r\n        let toReturn = {};\r\n        let flatObject;\r\n        for (let i in ob) {\r\n            if (!ob.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n            //Devolver los arrays tal cual\r\n            if (ob[i] && Array === ob[i].constructor) {\r\n                toReturn[i] = ob[i];\r\n                continue;\r\n            }\r\n            if ((typeof ob[i]) === 'object') {\r\n                flatObject = Utils.flattenObject(ob[i]);\r\n                for (let x in flatObject) {\r\n                    if (!flatObject.hasOwnProperty(x)) {\r\n                        continue;\r\n                    }\r\n                    //Exclude arrays from the final result\r\n                    if (flatObject[x] && Array === flatObject.constructor) {\r\n                        continue;\r\n                    }\r\n                    toReturn[i + (!!isNaN(x) ? '.' + x : '')] = flatObject[x];\r\n                }\r\n            } else {\r\n                toReturn[i] = ob[i];\r\n            }\r\n        }\r\n        return toReturn;\r\n    }\r\n\r\n    /**\r\n     * Invierte un objeto aplanado recuperando su forma original\r\n     * \r\n     * @param {*} data \r\n     * @returns \r\n     */\r\n    static unflatten(data) {\r\n        var result = {}\r\n        for (var i in data) {\r\n            var keys = i.split('.')\r\n            keys.reduce(function (r, e, j) {\r\n                return r[e] || (r[e] = isNaN(Number(keys[j + 1])) ? (keys.length - 1 == j ? data[i] : {}) : [])\r\n            }, result)\r\n        }\r\n        return result\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @returns \r\n     */\r\n    static expressHandler() {\r\n\r\n        return (fn) => {\r\n            return function asyncUtilWrap(...args) {\r\n                const fnReturn = fn(...args);\r\n                const next = args[args.length - 1];\r\n                return Promise.resolve(fnReturn).catch((e) => {\r\n                    return next(e);\r\n                });\r\n            };\r\n        };\r\n    }\r\n}\r\n\r\n","import fs from \"fs\";\r\nimport util from \"util\";\r\nimport Utils from \"./Utils.js\";\r\n\r\nimport chokidar from \"chokidar\";\r\n\r\nexport default class I18nLoader {\r\n    constructor() {\r\n        this.watcher = {};\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param lang\r\n     * @param callback\r\n     */\r\n    async load(custom) {\r\n        const lang = custom || process.env.DEFAULT_LANG;\r\n\r\n        if (!this.currentData) {\r\n            this.currentData = {};\r\n        }\r\n        if (!this.currentDataFlat) {\r\n            this.currentDataFlat = {};\r\n        }\r\n\r\n        const file = process.cwd() + \"/i18n/lang_\" + lang + \".json\";\r\n\r\n        // Initialize watcher.\r\n        this.watcher[lang] = chokidar.watch(file, {\r\n            ignored: /(^|[/\\\\])\\../, // ignore dotfiles\r\n            persistent: true,\r\n        });\r\n        //Add change watcher\r\n        this.watcher[lang].on(\"change\", (path) => this.loadFile(path, lang));\r\n\r\n        //Initialize file load\r\n        await this.loadFile(file, lang);\r\n    }\r\n\r\n    /**\r\n     * Carga el archivo de traducciones.\r\n     *\r\n     * @param {*} file\r\n     * @param {*} lang\r\n     */\r\n    async loadFile(file, lang) {\r\n        const readfile = util.promisify(fs.readFile);\r\n        try {\r\n            const data = await readfile(file, \"utf8\");\r\n            var parsedData = JSON.parse(data);\r\n\r\n            this.currentDataFlat[lang] = Utils.flattenObject(parsedData);\r\n            this.currentData[lang] = parsedData;\r\n        } catch (ex) {\r\n            if (ex?.code === \"ENOENT\") {\r\n                return console.log(\"Lang file does not exist. Create it on ./i18n/lang_{xx}.json\");\r\n            }\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} key\r\n     */\r\n    async translate(key, lang) {\r\n        if (!lang) lang = process.env.DEFAULT_LANG;\r\n\r\n        if (this.currentDataFlat && this.currentDataFlat[lang] && this.currentDataFlat[lang][key]) {\r\n            return this.currentData[lang][key];\r\n        }\r\n\r\n        if (!this.currentDataFlat || !this.currentDataFlat[lang]) {\r\n            await this.load(lang);\r\n            if (this.currentDataFlat && this.currentDataFlat[lang] && this.currentDataFlat[key]) {\r\n                return this.currentDataFlat[lang][key];\r\n            }\r\n        }\r\n        return \"undefined.\" + key;\r\n    }\r\n}\r\n","export default class JsonResponse {\r\n    constructor(success, data, message, total) {\r\n        this.data = data;\r\n        this.success = success;\r\n        this.total = total;\r\n        this.message = message || '';\r\n    }\r\n\r\n    toJson() {\r\n        return (this);\r\n    }\r\n}\r\n","/**\r\n * Example to refresh tokens using https://github.com/auth0/node-jsonwebtoken\r\n * It was requested to be introduced at as part of the jsonwebtoken library,\r\n * since we feel it does not add too much value but it will add code to mantain\r\n * we won't include it.\r\n *\r\n * I create this gist just to help those who want to auto-refresh JWTs.\r\n */\r\nimport jsonwebtoken from 'jsonwebtoken';\r\nimport * as uuid from 'uuid';\r\n\r\nexport default class TokenGenerator {\r\n\r\n    constructor(privateKey, options) {\r\n        this.privateKey = privateKey;\r\n        this.options = options;\r\n    }\r\n\r\n    sign(payload) {\r\n        const jwtSignOptions = { ...this.options, jwtid: uuid.v4() };\r\n        return jsonwebtoken.sign(payload, this.privateKey, jwtSignOptions);\r\n    }\r\n\r\n    verify(token) {\r\n        return jsonwebtoken.verify(token, this.privateKey, this.options);\r\n    }\r\n\r\n    refresh(token) {\r\n        const payload = jsonwebtoken.verify(token, this.privateKey, this.options);\r\n        delete payload.sub;\r\n        delete payload.iss;\r\n        delete payload.aud;\r\n        delete payload.iat;\r\n        delete payload.exp;\r\n        delete payload.nbf;\r\n        delete payload.jti; //We are generating a new token, if you are using jwtid during signing, pass it in refreshOptions\r\n        const jwtSignOptions = { ...this.options, jwtid: uuid.v4() };\r\n        // The first signing converted all needed options into claims, they are already in the payload\r\n        return jsonwebtoken.sign(payload, this.privateKey, jwtSignOptions);\r\n    }\r\n}\r\n","import helmet from \"helmet\";\r\nimport express from \"express\";\r\nimport compression from \"compression\";\r\nimport cors from \"cors\";\r\nimport fileUpload from \"express-fileupload\";\r\nimport url from \"url\";\r\nimport lodash from \"lodash\";\r\nimport { JsonResponse, Utils } from \"../common/index.js\";\r\n\r\n/**\r\n * Clase servidor encargada de configurar las rutas.\r\n *\r\n * que el codigo se disperse entre diferentes proyectos.\r\n */\r\nexport default class Server {\r\n    /**\r\n     *\r\n     * @param {*} config\r\n     * @param {*} statics\r\n     * @param {*} routes\r\n     */\r\n    constructor(config, statics, routes) {\r\n        this.app = express();\r\n        this.express_config = lodash.defaultsDeep(config, {\r\n            helmet: true,\r\n            json: true,\r\n            urlencoded: true,\r\n            compression: true,\r\n            cors: { origin: true, credentials: true },\r\n            fileupload: true,\r\n            socketio: { transports: [\"websocket\"] },\r\n            traceRequests: false,\r\n        });\r\n        this.statics = statics;\r\n        this.routes = routes;\r\n    }\r\n\r\n    /**\r\n     * Inicializa el servidor\r\n     */\r\n    async initialize() {\r\n        this.config(this.express_config);\r\n        if (this.customizeExpress) {\r\n            await this.customizeExpress(this.app);\r\n        }\r\n        await this.configureRoutes(this.routes);\r\n        await this.errorHandler();\r\n    }\r\n\r\n    /**\r\n     * Funcion sobreescribible para personalizar los componentes cargados en Express\r\n     *\r\n     * Aqui se pueden poner cosas como:\r\n     *\r\n     * this.app.use(cookieParser())... etc\r\n     */\r\n    customizeExpress() {}\r\n\r\n    /**\r\n     * Se encarga de realizar la configuración inicial del servidor\r\n     *\r\n     */\r\n    config(config) {\r\n        if (config && config.helmet) {\r\n            //Security\r\n            this.app.use(helmet(config && lodash.isObject(config.helmet) && config.helmet));\r\n        }\r\n        if (config && config.json) {\r\n            //mount json form parser\r\n            this.app.use(express.json());\r\n        }\r\n\r\n        if (config && config.urlencoded) {\r\n            //mount query string parser\r\n            this.app.use(express.urlencoded({ extended: true }));\r\n        }\r\n        if (config && config.compression) {\r\n            // compress responses\r\n            this.app.use(compression());\r\n        }\r\n        if (config && config.cors) {\r\n            //Enable cors to allow external references\r\n            this.app.options(\"*\", cors(config && lodash.isObject(config.cors) && config.cors));\r\n            this.app.use(cors(config && lodash.isObject(config.cors) && config.cors));\r\n        }\r\n        if (config && config.fileupload) {\r\n            // upload middleware\r\n            this.app.use(fileUpload());\r\n        }\r\n\r\n        if (this.statics) {\r\n            //add static paths\r\n            for (const idx in this.statics) {\r\n                this.app.use(idx, express.static(this.statics[idx]));\r\n            }\r\n        }\r\n\r\n        //Logging\r\n        if (config && config.traceRequests === true && process.env.DISABLE_LOGGER != \"true\") {\r\n            this.app.use((request, response, next) => {\r\n                request.requestTime = Date.now();\r\n                response.on(\"finish\", () => {\r\n                    let pathname = url.parse(request.url).pathname;\r\n                    let end = Date.now() - request.requestTime;\r\n                    let user = (request && request.session && request.session.user_id) || \"\";\r\n\r\n                    console.debug(\"APIRequest[\" + process.pid + \"]::. [\" + request.method + \"] (user:\" + user + \")  \" + pathname + \" |-> took: \" + end + \" ms\");\r\n                    console.debug(JSON.stringify(request.body));\r\n                });\r\n                next();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Crea el cargador automatico de rutas\r\n     */\r\n    configureRoutes(routes) {\r\n        const router = express.Router();\r\n        this.app.use(router);\r\n\r\n        //create controllers\r\n        this.loadRoutes(this.app, routes);\r\n    }\r\n\r\n    /**\r\n     * Instancia la lista de rutas disponibles\r\n     * @param apps\r\n     * @returns {*}\r\n     */\r\n    loadRoutes(app, routes) {\r\n        if (!routes) return;\r\n\r\n        for (const route of routes) {\r\n            if (!route) {\r\n                console.warn(\"Empty route\");\r\n                continue;\r\n            }\r\n            const router = route.configure();\r\n\r\n            if (!lodash.isEmpty(route.routes)) {\r\n                const exAsync = Utils.expressHandler();\r\n                console.log(\"loading shorthand routes\");\r\n                for (const path in route.routes) {\r\n                    const cfg = route.routes[path];\r\n                    for (const method in cfg) {\r\n                        const handler = cfg[method];\r\n                        if (Array.isArray(handler)) {\r\n                            //Securización (keycloak)\r\n                            router[method](path, handler[0], exAsync(handler[1]));\r\n                        } else {\r\n                            router[method](path, exAsync(handler));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (router) {\r\n                app.use(router);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Errores\r\n     */\r\n    errorHandler() {\r\n        // error handler\r\n        this.app.use((err, req, res, next) => {\r\n            let jsRes = new JsonResponse();\r\n            jsRes.success = false;\r\n            jsRes.message = err.message; //!FIXME protect error displaying in REST Responses\r\n            console.error(err);\r\n\r\n            res.status(500).json(jsRes.toJson());\r\n        });\r\n    }\r\n}\r\n","import http from \"http\";\r\nimport https from \"https\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport cluster from \"cluster\";\r\nimport { Server } from \"socket.io\";\r\nimport os from \"os\";\r\nimport { EventEmitter } from \"events\";\r\n\r\nimport ClusterMessages from \"cluster-messages\";\r\n\r\n/**\r\n * Inicializa la escucha del server en modo cluster\r\n */\r\nexport default class ClusterServer extends EventEmitter {\r\n    constructor(app) {\r\n        super();\r\n\r\n        if (!process.env.PORT) {\r\n            console.log(\"Using 3000 as default port. Customize via env PORT.\");\r\n        }\r\n        this.port = this.normalizePort(process.env.PORT || 3000);\r\n        this.clustered = process.env.CLUSTERED;\r\n        this.workers = [];\r\n        this.app = app;\r\n\r\n        this.executeOnlyMain = () => {};\r\n    }\r\n\r\n    setServerCls(cls) {\r\n        this.server = cls;\r\n    }\r\n\r\n    /**\r\n     * Iniciar el servidor en el puerto y con la configuración seleccionadas.\r\n     */\r\n    async start() {\r\n        if (this.clustered == \"true\") {\r\n            this.initClustered();\r\n        } else {\r\n            this.configureSocketIO();\r\n            this.executeOnlyMain();\r\n\r\n            await this.initUnclustered();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Inicializa el servidor de socketio en el puerto siguiente al configurado.\r\n     *\r\n     * Se puede desactivar mediante la config socketio: false al realizar el App.init()\r\n     */\r\n    configureSocketIO() {\r\n        if (this.server.express_config && this.server.express_config.socketio) {\r\n            this.app.io = new Server(this.server.express_config && this.server.express_config.socketio);\r\n            this.app.io.listen(this.port + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Inicializa la clase server encargada del control de las solicitudes en forma multiproceso.\r\n     *\r\n     */\r\n    async initClustered() {\r\n        //Launch cluster\r\n        if (cluster.isPrimary) {\r\n            this.configureSocketIO();\r\n\r\n            this.executeOnlyMain();\r\n\r\n            let messages = new ClusterMessages();\r\n            messages.on(\"event\", (msg, callback) => {\r\n                if (msg && msg.event) {\r\n                    if (process.env.DEBUG_EVENTS == true) {\r\n                        console.debug(`Received '${msg.event}' from ${msg.props.owner} at Master`);\r\n                    }\r\n                    //Desencadenar en el proceso principal tambien\r\n                    this.app.events.emit(msg.event, msg.props, callback);\r\n                }\r\n            });\r\n\r\n            //Count the machine's CPUs\r\n            const cpuCount = os.cpus().length;\r\n\r\n            //Create a worker for each CPU\r\n            for (let idx = 0; idx < cpuCount; idx += 1) {\r\n                this.initWorker();\r\n            }\r\n\r\n            //Listen for dying workers\r\n            cluster.on(\"exit\", (worker) => {\r\n                //Replace the dead worker, we're not sentimental\r\n                console.log(\"Worker \" + worker.id + \" died :(\");\r\n                this.initWorker();\r\n            });\r\n        } else {\r\n            await this.initUnclustered();\r\n            console.log(`Worker ${process.pid} started`);\r\n        }\r\n    }\r\n    /**\r\n     * Inicia un worker\r\n     */\r\n    initWorker() {\r\n        let worker = cluster.fork();\r\n        console.log(`Running worker ${worker.process.pid}`);\r\n\r\n        this.workers.push(worker);\r\n    }\r\n\r\n    /**\r\n     * Inicializa la clase server encargada del control de las solicitudes en un unico proceso.\r\n     *\r\n     */\r\n    async initUnclustered() {\r\n        this.server.port = this.port;\r\n        //create http server\r\n        let server = http.Server(this.server.app);\r\n\r\n        await this.server.initialize();\r\n\r\n        if (this.server.beforeListen) await this.server.beforeListen();\r\n        //listen on provided ports\r\n        server.listen(this.server.port);\r\n\r\n        if (this.server.afterListen) await this.server.afterListen();\r\n\r\n        //add error handler\r\n        server.on(\"error\", (err) => {\r\n            this.handleErrors(err, this.server.port);\r\n        });\r\n        //start listening on port\r\n        server.on(\"listening\", () => {\r\n            console.log(\"Server Worker running on port: \" + this.port + \"!\");\r\n            this.emit(\"listening\", this.port);\r\n        });\r\n\r\n        if (process.env.SSL && process.env.SSL == \"true\") {\r\n            if (!process.env.SSL_KEY || !process.env.SSL_CERT || !process.env.SSL_PASS) {\r\n                console.error(\"Invalid SSL configuration. SLL_KEY, SSL_CERT and SSL_PASS needed\");\r\n                process.exit(0);\r\n            }\r\n\r\n            var key = fs.readFileSync(path.resolve(process.cwd(), process.env.SSL_KEY || \"key.pem\"));\r\n            var cert = fs.readFileSync(path.resolve(process.cwd(), process.env.SSL_CERT || \"cert.pem\"));\r\n\r\n            var options = {\r\n                key: key,\r\n                cert: cert,\r\n                passphrase: process.env.SSL_PASS,\r\n            };\r\n\r\n            if (!process.env.SSL_PORT) {\r\n                console.log(\"Using 3443 as ssl default port. Customize via env SSL_PORT.\");\r\n            }\r\n            var sslPort = this.normalizePort(process.env.SSL_PORT || 3443);\r\n            var serverSsl = https.createServer(options, this.server.app);\r\n            serverSsl.listen(sslPort);\r\n            //add error handler\r\n            serverSsl.on(\"error\", (err) => {\r\n                this.handleErrors(err, sslPort);\r\n            });\r\n            //start listening on port\r\n            serverSsl.on(\"listening\", () => {\r\n                console.log(\"Server Worker running on port: \" + sslPort + \"!\");\r\n                this.emit(\"listening_ssl\", sslPort);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Controla los posibles errores de formato en el puerto\r\n     * @param val\r\n     * @returns {*}\r\n     */\r\n    normalizePort(val) {\r\n        let port = parseInt(val, 10);\r\n\r\n        if (isNaN(port)) {\r\n            //named pipe\r\n            return val;\r\n        }\r\n\r\n        if (port >= 0) {\r\n            //port number\r\n            return port;\r\n        }\r\n\r\n        return false;\r\n    }\r\n    /**\r\n     * Gestiona los errores en el listen del servidor\r\n     */\r\n    handleErrors(error, port) {\r\n        if (error.syscall !== \"listen\") {\r\n            throw error;\r\n        }\r\n\r\n        let bind = typeof port === \"string\" ? \"Pipe \" + port : \"Port \" + port;\r\n\r\n        //handle specific listen errors with friendly messages\r\n        switch (error.code) {\r\n            case \"EACCES\":\r\n                console.error(bind + \" requires elevated privileges\");\r\n                process.exit(1);\r\n                break;\r\n            case \"EADDRINUSE\":\r\n                console.error(bind + \" is already in use\");\r\n                process.exit(1);\r\n                break;\r\n            default:\r\n                throw error;\r\n        }\r\n    }\r\n}\r\n","import cluster from \"cluster\";\r\nimport { EventEmitter } from \"events\";\r\nimport ClusterMessages from \"cluster-messages\";\r\n\r\n/**\r\n * Clase encargada de la generacion de eventos.\r\n */\r\nexport default class EventHandler extends EventEmitter {\r\n    constructor(app) {\r\n        super();\r\n        this.messages = new ClusterMessages();\r\n\r\n        this.app = app; //Se recibe el singleton App para evitar referencias cruzadas\r\n\r\n        if (cluster.isWorker) {\r\n            // Levanto, en los worker, la escucha para recibir los eventos en broadcast de los demas hilos\r\n            this.messages.on(\"event\", (msg, callback) => {\r\n                if (msg && msg.event && process.pid !== msg.props.owner) {\r\n                    if (process.env.DEBUG_EVENTS == true) {\r\n                        console.debug(`Receiving broadcast ${msg.event} - ${process.pid}`);\r\n                    }\r\n                    super.emit(msg.event, { ...msg.props }, callback);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sobreescribir el emitter para notificar a los hijos\r\n     *\r\n     * @param {*} evt\r\n     * @param {*} props\r\n     */\r\n    emit(evt, props, callback) {\r\n        //Desencadenar en local\r\n        super.emit(evt, props, callback);\r\n\r\n        if (evt && props && cluster.isWorker && process.pid !== props.owner) {\r\n            if (process.env.DEBUG_EVENTS == true) {\r\n                console.debug(`${evt} -> Firing from ${process.pid} to master`);\r\n            }\r\n            if (!props) {\r\n                props = {};\r\n            }\r\n            props.owner = process.pid;\r\n            this.messages.send(\"event\", { event: evt, props: { ...props } }, callback);\r\n        }\r\n\r\n        if (evt && props && cluster.isPrimary && this.app && this.app.server && this.app.server.workers) {\r\n            if (process.env.DEBUG_EVENTS == true) {\r\n                console.debug(`${evt} -> Firing from master to workers`);\r\n            }\r\n            this.messages.send(\"event\", { event: evt, props: { ...props } }, callback);\r\n        }\r\n    }\r\n}\r\n","import log4js from \"log4js\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport util from \"util\";\r\n\r\nconst { configure, getLogger } = log4js;\r\n\r\nexport default class Logger {\r\n    static async configure() {\r\n        const readfile = util.promisify(fs.readFile);\r\n\r\n        const json = await readfile(path.resolve(process.cwd(), \"./log4js.json\"), \"utf8\");\r\n\r\n        configure(JSON.parse(json));\r\n\r\n        //Nota para el futuro:\r\n        // Esto sobreescribe los metodos de console.log\r\n        // Es necesario que la sitaxis se mantenga tal cual....\r\n        (() => {\r\n            const log_logger = getLogger(\"log\");\r\n            const error_logger = getLogger(\"error\");\r\n            const debug_logger = getLogger(\"debug\");\r\n            console.log = function () {\r\n                let args = Array.prototype.slice.call(arguments);\r\n                // log.apply(this, args);\r\n                log_logger.log(\"info\", args[0]);\r\n            };\r\n            console.error = function () {\r\n                let args = Array.prototype.slice.call(arguments);\r\n                // error.apply(this, args);\r\n                error_logger.log(\"error\", args[0]);\r\n            };\r\n            console.info = function () {\r\n                let args = Array.prototype.slice.call(arguments);\r\n                // info.apply(this, args);\r\n                log_logger.log(\"info\", args[0]);\r\n            };\r\n            console.debug = function () {\r\n                /*if (global.settings.debug.value) {*/\r\n                let args = Array.prototype.slice.call(arguments);\r\n                // debug.apply(this, [args[1], args[2]]);\r\n                debug_logger.log(\"debug\", args[0]);\r\n            };\r\n\r\n            console.custom = function (logger, level, message) {\r\n                const custom_logger = getLogger(logger);\r\n                custom_logger.log(level, message);\r\n            };\r\n        })();\r\n    }\r\n}\r\n","import express from \"express\";\r\nimport url from \"url\";\r\nimport { JsonResponse, Utils } from \"../common/index.js\";\r\n\r\nimport { pathToRegexp } from \"path-to-regexp\";\r\n\r\nexport default class AuthController {\r\n    constructor(publicPathsList, AuthHandler) {\r\n        this.router = express.Router();\r\n        this.publicPathsList = [...publicPathsList, \"/login\"];\r\n\r\n        this.AuthHandler = AuthHandler;\r\n    }\r\n\r\n    configure() {\r\n        const exAsync = Utils.expressHandler();\r\n        this.router.use(exAsync((...args) => this.check(...args)));\r\n        this.router.post(\r\n            \"/login\",\r\n            exAsync((...args) => this.loginPost(...args))\r\n        );\r\n        this.router.post(\r\n            \"/logout\",\r\n            exAsync((...args) => this.logout(...args))\r\n        );\r\n\r\n        return this.router;\r\n    }\r\n\r\n    /**\r\n     * Controla que los usuarios tengan sesion para acceder a los metodos privados de la API\r\n     *\r\n     * @param {*} request\r\n     * @param {*} response\r\n     * @param {*} next\r\n     */\r\n    async check(request, response, next) {\r\n        try {\r\n            //Rutas ublicas\r\n            for (let path of this.publicPathsList) {\r\n                const expr = pathToRegexp(path);\r\n                if (expr.exec(url.parse(request.url).pathname) !== null) {\r\n                    return next();\r\n                }\r\n            }\r\n\r\n            if (await this.AuthHandler.check(request)) {\r\n                return next();\r\n            }\r\n\r\n            return response.status(403).json(new JsonResponse(false, null, \"Forbidden\").toJson());\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return response.status(403).json(new JsonResponse(false, null, \"Forbidden\").toJson());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Valida los credenciales de un usuario\r\n     *\r\n     * TODO logger console.custom(\"access\", INFO);\r\n     *\r\n     * @param {*} request\r\n     * @param {*} response\r\n     */\r\n    async loginPost(request, response) {\r\n        if (request.body.username) {\r\n            try {\r\n                let data = await this.AuthHandler.validate(request, request.body.username, request.body.password);\r\n                if (data) {\r\n                    return response.status(200).json(new JsonResponse(true, data).toJson());\r\n                }\r\n                return response.status(401).json(new JsonResponse(false, null, \"Unauthorized - Incorrect credentials\").toJson());\r\n            } catch (ex) {\r\n                console.error(ex);\r\n                return response.status(401).json(new JsonResponse(false, null, \"Unauthorized - Error, check log\").toJson());\r\n            }\r\n        }\r\n        return response.status(401).json(new JsonResponse(false, null, \"Unauthorized - Missing parameters\").toJson());\r\n    }\r\n\r\n    /**\r\n     * Cierra la sesion del usuario\r\n     *\r\n     * @param {*} request\r\n     * @param {*} response\r\n     */\r\n    async logout(request, response) {\r\n        if (this.AuthHandler.logout) {\r\n            //Depende de que el authHandler implementado pueda realizar esta accion\r\n            try {\r\n                await this.AuthHandler.logout(request);\r\n                return response.status(200).json(new JsonResponse(true).toJson());\r\n            } catch (ex) {\r\n                console.error(ex);\r\n                return response.status(500).json(new JsonResponse(false, null, ex).toJson());\r\n            }\r\n        }\r\n        return response.status(200).json(new JsonResponse(true).toJson());\r\n    }\r\n}\r\n","export default class IAuthHandler {\r\n    constructor() {\r\n        if (!this.check) {\r\n            throw new Error(\"AuthHandler must have 'check' vethod\");\r\n        }\r\n        if (!this.validate) {\r\n            throw new Error(\"AuthHandler must have 'validate' vethod\");\r\n        }\r\n        // logout method is optional\r\n    }\r\n}\r\n\r\n","import { TokenGenerator, Utils } from '../../common/index.js';\r\nimport IAuthHandler from '../IAuthHandler.js'\r\nimport lodash from 'lodash';\r\nimport moment from 'moment';\r\n\r\nexport default class JwtAuthHandler extends IAuthHandler {\r\n    constructor(UserDao) {\r\n        super();\r\n\r\n        this.tokenGenerator = new TokenGenerator(process.env.JWT_SECRET, { audience: process.env.JWT_AUDIENCE, issuer: process.env.JWT_ISSUER, subject: process.env.JWT_SUBJECT, algorithm: process.env.JWT_ALGORITHM, expiresIn: process.env.JWT_EXPIRES })\r\n\r\n        if (!UserDao) {\r\n            throw new Error(\"Need 'UserDao' for user validation. Create 'UserDao' class extending 'IUserDao'\");\r\n        }\r\n        this.userDao = UserDao;\r\n    }\r\n\r\n    /**\r\n     * Metodo encargado de realizar la comprobacion para validar si la sesion del usuario es válida\r\n     * \r\n     * @param {*} request \r\n     */\r\n    async check(request) {\r\n        if (request.headers.authorization) {\r\n            const token = (request.headers.authorization || '').split(' ')[1] || '';\r\n\r\n            if (!token) {\r\n                console.error(\"Token needed\");\r\n                return false;\r\n            }\r\n            try {\r\n                var decoded = this.tokenGenerator.verify(token);\r\n                const { sub, username, exp } = decoded;\r\n\r\n                if (!sub || !username || moment(exp).isAfter(new Date())) {\r\n                    return false;\r\n                }\r\n\r\n                //Si la sesion es valida, lo introducimos en el contexto de la solicitud\r\n                request.session = { ...request.session, ...decoded };\r\n                return true;\r\n            } catch (ex) {\r\n                console.error(ex);\r\n                return false;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Método encargado de realizar la validación de un usuario. Utiliza IUserDao como interfaz para la realización de la query a BD.\r\n     * \r\n     * @param {*} username \r\n     * @param {*} password \r\n     */\r\n    async validate(request, username, password) {\r\n\r\n        const user = await this.userDao.findByUsername(username);\r\n\r\n        if (user && user.username === username && user.password === Utils.encrypt(password)) {\r\n            return this.tokenGenerator.sign(lodash.omit(user, ['password']));\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n}","import { Utils } from \"../../common/index.js\";\r\nimport IAuthHandler from \"../IAuthHandler.js\";\r\nimport lodash from \"lodash\";\r\n\r\n/**\r\n * Necesario:\r\n *  Instalar -->   express-session y algun session store\r\n * \r\n *  Mas info: https://www.npmjs.com/package/express-session\r\n * \r\n *  App.customizeExpress = () => {\r\n       this.app.use(session({\r\n            secret: 'keyboard cat',\r\n            resave: false,\r\n            saveUninitialized: true,\r\n            cookie: { secure: true }\r\n        }));\r\n    }\r\n */\r\n\r\nexport default class CookieAuthHandler extends IAuthHandler {\r\n    constructor(UserDao) {\r\n        super();\r\n\r\n        if (!UserDao) {\r\n            throw new Error(\"Need 'UserDao' for user validation. Create 'UserDao' class extending 'IUserDao'\");\r\n        }\r\n        this.userDao = UserDao;\r\n    }\r\n\r\n    /**\r\n     * Metodo encargado de realizar la comprobacion para validar si la sesion del usuario es válida\r\n     *\r\n     * @param {*} request\r\n     */\r\n    async check(request) {\r\n        if (request.headers.authorization) {\r\n            //Si se recibe por Auth Basic\r\n            const token = (request.headers.authorization || \"\").split(\" \")[1] || \"\";\r\n\r\n            const creds = Buffer.from(token, \"base64\").toString().split(\":\");\r\n            const login = creds[0];\r\n            const password = creds[1];\r\n\r\n            if (!(await this.validate(request, login, password))) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        if (request.session && request.session.username) {\r\n            //Si hay sesion almacenada\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Método encargado de realizar la validación de un usuario. Utiliza IUserDao como interfaz para la realización de la query a BD.\r\n     *\r\n     * @param {*} username\r\n     * @param {*} password\r\n     */\r\n    async validate(request, username, password) {\r\n        const user = await this.userDao.findByUsername(username);\r\n\r\n        if (user && user.username === username && user.password === Utils.encrypt(password)) {\r\n            request.session = { ...request.session, ...lodash.omit(user, [\"password\"]) };\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} request\r\n     */\r\n    logout(request) {\r\n        return new Promise((resolve) => {\r\n            if (request.session) {\r\n                request.session.destroy(resolve);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import Knex from 'knex'\r\n\r\nclass KnexConnector {\r\n\r\n\r\n    init(config) {\r\n\r\n        /**\r\n         * References the current connection of the app\r\n         * @type {Knex}\r\n         * @public\r\n         */\r\n        this.connection = Knex(config)\r\n    }\r\n\r\n    /**\r\n     * Configura de forma global los aliases de las columnas para utilizar en FQL.\r\n     * \r\n     * La estructura es \r\n     * {\r\n            \"table1\": {\r\n                \"alias1\": \"column1\",\r\n                \"alias2\": \"column2\"\r\n            },\r\n            \"table2\": {\r\n                \"alias1\": \"column1\"\r\n            }\r\n        }\r\n     *\r\n     * @param {*} aliases \r\n     */\r\n    setColumnAliases(aliases) {\r\n        this.columnAliases = aliases;\r\n    }\r\n    \r\n\r\n\r\n    test() {\r\n        return this.connection.raw('select 1+1 as result');\r\n    }\r\n}\r\n\r\n\r\nexport default new KnexConnector();","import { Utils } from \"../../../common/index.js\";\r\n\r\nimport { FQLParser, KnexParser } from \"@landra_sistemas/fql-parser\";\r\nimport KnexConnector from \"../KnexConnector.js\";\r\n\r\nexport default class KnexFilterParser {\r\n    /**\r\n     *\r\n     * @param {*} builder\r\n     * @param {*} string\r\n     * @returns\r\n     */\r\n    static parseQueryString(builder, string, tableName) {\r\n        const options = {\r\n            allowGlobalSearch: true,\r\n            caseInsensitive: true,\r\n        };\r\n        //Agregar los aliases en caso de que se hayan configurado de forma global\r\n        if (KnexConnector.columnAliases && KnexConnector.columnAliases[tableName]) {\r\n            options.aliases = KnexConnector.columnAliases[tableName];\r\n        }\r\n        //Options\r\n        if (KnexConnector.caseInsensitive !== undefined) {\r\n            options.caseInsensitive = KnexConnector.caseInsensitive;\r\n        }\r\n        if (KnexConnector.allowGlobalSearch !== undefined) {\r\n            options.allowGlobalSearch = KnexConnector.allowGlobalSearch;\r\n        }\r\n        const parser = new FQLParser(options);\r\n        const data = parser.parse(string);\r\n\r\n        return new KnexParser(tableName).toKnex(builder, data);\r\n    }\r\n\r\n    /**\r\n     * Convierte un objeto clave valor en un conjunto de filtros.\r\n     *\r\n     * - Filtro estandar:\r\n     *    filters: {\r\n     *       \"column\": \"value\" -> filtro generico exact\r\n     *    }\r\n     * - Filtro Objeto:\r\n     *    filters:{\r\n     *       \"column\": {\r\n     *       \"type\": \"date|between|exists|notexists|greater|greaterEq|less|lessEq|exact|exactI|not|null|notnull|like|likeI\"\r\n     *       \"start\": \"xxx\", //inicio de rango para el filtro de date y between\r\n     *       \"end\": \"xxx\", //fin de rango para el filtro date y between\r\n     *       \"value\": \"xxx\" //valor a utilizar para el resto de filtros\r\n     *     }\r\n     * }\r\n     *  - Filtro Lista:\r\n     *     filters: {\r\n     *       \"column\": [1, 2, 3]\r\n     *     }\r\n     *    Filtro de tipo IN, todos los elementos que coincidan\r\n     *\r\n     * - Definicion de tipos:\r\n     *    date: filtro de fechas desde y hasta\r\n     *    between: filtro entre dos valores concretos\r\n     *    exists: busca si existe la propiedad\r\n     *    notexists: busca si existe la propiedad\r\n     *    greater: mayor que\r\n     *    greaterEq: mayor o igual que\r\n     *    less: menor que\r\n     *    lessEq: menor o igual que\r\n     *    exact: valor exacto\r\n     *    exactI: valor exacto ignorando mayusculas y minusculas\r\n     *    not: distinto de\r\n     *    null: igual a null\r\n     *    notnull: distinto de null\r\n     *    like: filtro like\r\n     *    likeI: filtro like ignorando mayusculas y minusculas\r\n     */\r\n    static parseFilters(builder, filter, tableName) {\r\n        let query = builder;\r\n\r\n        for (let prop in filter) {\r\n            let elm = filter[prop];\r\n\r\n            if (typeof elm === \"object\") {\r\n                switch (elm.type) {\r\n                    case \"fql\":\r\n                        query = KnexFilterParser.parseQueryString(query, elm.value, tableName);\r\n                        break;\r\n                    case \"date\":\r\n                    case \"between\":\r\n                        if (elm.start && elm.end) {\r\n                            query = query.whereBetween(prop, [elm.start, elm.end]);\r\n                        }\r\n                        if (elm.start && !elm.end) {\r\n                            query = query.where(prop, \">=\", elm.start);\r\n                        }\r\n                        if (!elm.start && elm.end) {\r\n                            query = query.where(prop, \">=\", elm.end);\r\n                        }\r\n                        break;\r\n                    case \"dateraw\":\r\n                    case \"betweenraw\":\r\n                        if (elm.start && elm.end) {\r\n                            query = query.whereRaw(`${prop} BETWEEN ? AND ?`, [elm.start, elm.end]);\r\n                        }\r\n                        if (elm.start && !elm.end) {\r\n                            query = query.whereRaw(`${prop} >= ?`, [elm.start]);\r\n                        }\r\n                        if (!elm.start && elm.end) {\r\n                            query = query.whereRaw(`${prop} >= ?`, [elm.end]);\r\n                        }\r\n                        break;\r\n                    case \"jsonb\":\r\n                        query = query.whereRaw(`${prop} ILIKE ?`, [\"%\" + elm.value + \"%\"]);\r\n                        break;\r\n                    case \"full-text-psql\":\r\n                        query = query.whereRaw(`to_tsvector(${prop}::text) @@ to_tsquery(?)`, [elm.value]);\r\n                        break;\r\n\r\n                    case \"greater\":\r\n                    case \"greaterraw\":\r\n                        query = query.whereRaw(`${prop} > ?`, [elm.value]);\r\n                        break;\r\n                    case \"greaterEq\":\r\n                    case \"greaterEqraw\":\r\n                        query = query.whereRaw(`${prop} >= ?`, [elm.value]);\r\n                        break;\r\n                    case \"less\":\r\n                    case \"lessraw\":\r\n                        query = query.whereRaw(`${prop} < ?`, [elm.value]);\r\n                        break;\r\n                    case \"lessEq\":\r\n                    case \"lessEqraw\":\r\n                        query = query.whereRaw(`${prop} <= ?`, [elm.value]);\r\n                        break;\r\n                    case \"exists\":\r\n                        query = query.whereExists(prop);\r\n                        break;\r\n                    case \"notexists\":\r\n                        query = query.whereNotExists(prop);\r\n                        break;\r\n                    case \"exact\":\r\n                    case \"exactraw\":\r\n                        query = query.whereRaw(`${prop} = ?`, [elm.value]);\r\n                        break;\r\n                    case \"in\":\r\n                        let propComplex = prop;\r\n                        if (propComplex.includes(\",\")) {\r\n                            propComplex = prop.split(\",\");\r\n                        }\r\n                        if (!Array.isArray(elm.value) && elm.value != undefined) {\r\n                            query = query.whereIn(propComplex, elm.value.split(\",\"));\r\n                        } else {\r\n                            if (elm.value != undefined) {\r\n                                query = query.whereIn(propComplex, elm.value);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"inraw\":\r\n                        if (!Array.isArray(elm.value) && elm.value != undefined) {\r\n                            query = query.whereRaw(`${prop} IN (?)`, [\r\n                                elm.value\r\n                                    .split(\",\")\r\n                                    .map((e) => `'${e}'`)\r\n                                    .join(\",\"),\r\n                            ]);\r\n                        } else {\r\n                            if (elm.value != undefined) {\r\n                                query = query.whereRaw(`${prop} IN (?)`, [elm.value.map((e) => `'${e}'`).join(\",\")]);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"not\":\r\n                    case \"notraw\":\r\n                        query = query.whereRaw(`${prop} != ?`, [elm.value]);\r\n                        break;\r\n                    case \"like\":\r\n                    case \"likeraw\":\r\n                        let value_likeraw = Utils.replaceAll(elm.value, \"*\", \"%\");\r\n                        query = query.whereRaw(` ${prop} LIKE ?`, [value_likeraw]);\r\n                        break;\r\n                    case \"notlike\":\r\n                    case \"notlikeraw\":\r\n                        let value_nolikeraw = Utils.replaceAll(elm.value, \"*\", \"%\");\r\n                        query = query.whereRaw(` ${prop} NOT LIKE ?`, [value_nolikeraw]);\r\n                        break;\r\n                    case \"likeI\":\r\n                        let value_rawilike = Utils.replaceAll(elm.value, \"*\", \"%\");\r\n                        query = query.whereRaw(` ${prop} ILIKE ?`, [value_rawilike]);\r\n                        break;\r\n                    case \"notlikeI\":\r\n                        let value_notrawilike = Utils.replaceAll(elm.value, \"*\", \"%\");\r\n                        query = query.whereRaw(` ${prop} NOT ILIKE ?`, [value_notrawilike]);\r\n                        break;\r\n                    case \"null\":\r\n                    case \"nullraw\":\r\n                        query = query.whereRaw(`${prop} is NULL`);\r\n                        break;\r\n                    case \"notnull\":\r\n                    case \"notnullraw\":\r\n                        query = query.whereRaw(`${prop} is not NULL`);\r\n                        break;\r\n                }\r\n            } else {\r\n                //Si el valor no es un objeto se devuelve\r\n                query = query.where(prop, elm);\r\n            }\r\n        }\r\n\r\n        // console.log(query.toSQL());\r\n        return query;\r\n    }\r\n\r\n    /**\r\n     * Conversion de un objeto {property: XX, direction: ASC|DESC - ascend|descend} a un ORDER BY\r\n     *\r\n     * @param {*} sorts\r\n     */\r\n    static parseSort(sort) {\r\n        if (!sort.field || !sort.direction) {\r\n            return 1;\r\n        }\r\n\r\n        let direction = \"ASC\";\r\n        if (sort.direction === \"descend\") {\r\n            direction = \"DESC\";\r\n        }\r\n\r\n        return sort.field + \" \" + direction;\r\n    }\r\n}\r\n","import KnexFilterParser from \"../filters/KnexFilterParser.js\";\r\nimport KnexConnector from \"../KnexConnector.js\";\r\n\r\nimport lodash from \"lodash\";\r\n\r\n/**\r\n * Crear un dao con los métodos básicos\r\n */\r\nexport default class BaseKnexDao {\r\n    constructor() {\r\n        this.tableName = \"\";\r\n    }\r\n\r\n    loadAllData(start, limit) {\r\n        return KnexConnector.connection\r\n            .select(\"*\")\r\n            .from(this.tableName)\r\n            .limit(limit || 10000)\r\n            .offset(start);\r\n    }\r\n\r\n    async loadFilteredData(filters, start, limit) {\r\n        let sorts = 1;\r\n        if (filters.sort) {\r\n            sorts = KnexFilterParser.parseSort(filters.sort);\r\n        }\r\n\r\n        return KnexConnector.connection\r\n            .from(this.tableName)\r\n            .where((builder) => KnexFilterParser.parseFilters(builder, lodash.omit(filters, [\"sort\", \"start\", \"limit\"]), this.tableName))\r\n            .orderByRaw(sorts)\r\n            .limit(limit)\r\n            .offset(start);\r\n    }\r\n\r\n    async countFilteredData(filters) {\r\n        let data = await KnexConnector.connection\r\n            .from(this.tableName)\r\n            .where((builder) => KnexFilterParser.parseFilters(builder, lodash.omit(filters, [\"sort\", \"start\", \"limit\"]), this.tableName))\r\n            .count(\"id\", { as: \"total\" });\r\n\r\n        return data && data[0].total;\r\n    }\r\n\r\n    async loadById(objectId) {\r\n        const data = await KnexConnector.connection.from(this.tableName).where(\"id\", objectId);\r\n\r\n        if (data && data[0]) {\r\n            return data[0];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    save(object) {\r\n        return KnexConnector.connection.from(this.tableName).insert(object).returning(\"*\");\r\n    }\r\n    update(objectId, newObject) {\r\n        return KnexConnector.connection.from(this.tableName).where(\"id\", objectId).update(newObject).returning(\"*\");\r\n    }\r\n    async delete(objectId) {\r\n        const existing = await this.loadById(objectId);\r\n        if (!existing) {\r\n            throw \"NotFound\";\r\n        }\r\n        return KnexConnector.connection.from(this.tableName).where(\"id\", objectId).delete();\r\n    }\r\n}\r\n","import BaseKnexDao from \"./knex/dao/BaseKnexDao.js\";\r\n\r\nexport default class IUserDao extends BaseKnexDao {\r\n    constructor(tableName) {\r\n        super(tableName);\r\n\r\n        if (!this.findByUsername) {\r\n            throw new Error(\"AuthHandler must have 'findByUsername' method\");\r\n        }\r\n    }\r\n}\r\n","import express from \"express\";\r\nimport { JsonResponse, Utils } from \"../common/index.js\";\r\n\r\nexport class BaseController {\r\n    constructor() {\r\n        this.router = express.Router();\r\n        this.routes = {};\r\n        //Example routes shorthand\r\n        /*\r\n         {\r\n            \"/\": {\r\n                \"get\": this.listEntidad.bind(this),\r\n                \"post\": this.listEntidad.bind(this)\r\n            }\r\n         } \r\n         */\r\n    }\r\n\r\n    configure(entity, config) {\r\n        if (!entity) {\r\n            return this.router;\r\n        }\r\n\r\n        const exAsync = Utils.expressHandler();\r\n        this.router.get(\r\n            `/${entity}`,\r\n            exAsync((...args) => this.listEntidad(...args))\r\n        );\r\n        this.router.post(\r\n            `/${entity}/list`,\r\n            exAsync((...args) => this.listEntidad(...args))\r\n        );\r\n        this.router.get(\r\n            `/${entity}/:id`,\r\n            exAsync((...args) => this.getEntidad(...args))\r\n        );\r\n        this.router.post(\r\n            `/${entity}`,\r\n            exAsync((...args) => this.saveEntidad(...args))\r\n        );\r\n        this.router.put(\r\n            `/${entity}/:id`,\r\n            exAsync((...args) => this.updateEntidad(...args))\r\n        );\r\n        this.router.delete(\r\n            `/${entity}/:id`,\r\n            exAsync((...args) => this.deleteEntidad(...args))\r\n        );\r\n\r\n        this.service = config.service;\r\n        this.table = config.table;\r\n\r\n        return this.router;\r\n    }\r\n\r\n    /**\r\n     * Lista entidades en la aplicacion, es posible enviarle parametros de filtrado.\r\n     *\r\n     *\r\n     * @api {post} /:entidad/list Listar entidades\r\n     * @apiName Listar entidades\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async listEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n            let filters = request.method === \"POST\" ? request.body : request.query && request.query.filters ? JSON.parse(request.query.filters) : {};\r\n\r\n            let data = await service.list(filters, filters.start, filters.limit);\r\n            let jsRes = new JsonResponse(true, data.data, null, data.total);\r\n\r\n            response.json(jsRes.toJson());\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    }\r\n    /**\r\n     *Obtiene un elemento concreto mediante su identificador\r\n     *\r\n     *\r\n     * @api {get} /:entidad/:id Obtener entidad\r\n     * @apiName Obtener entidad\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async getEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n            let data = await service.loadById(request.params.id);\r\n            let jsRes = new JsonResponse(true, data);\r\n            let code = 200;\r\n            if (data == null) {\r\n                code = 404;\r\n                let message = \"Element not found\";\r\n                jsRes = new JsonResponse(false, null, message, 0);\r\n            }\r\n\r\n            response.status(code).json(jsRes.toJson());\r\n        } catch (e) {\r\n            console.error(e);\r\n            let message = \"\";\r\n            if (e.code == \"22P02\") {\r\n                //PostgreSQL error Code form string_to_UUID\r\n                message = \"Expected uiid\";\r\n            }\r\n            let jsRes = new JsonResponse(false, null, message, 0);\r\n            response.status(400).json(jsRes.toJson());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Almacena un elemento en BD\r\n     *\r\n     *\r\n     * @api {post} /:entidad/:id Crear entidad\r\n     * @apiName Crear entidad\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async saveEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n\r\n            let data = await service.save(request.body);\r\n            let jsRes = new JsonResponse(true, (data && data[0]) || { id: request.body.id });\r\n\r\n            response.setHeader(\"Location\", `/entity/${jsRes.data.id}`);\r\n            response.status(201).json(jsRes.toJson());\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Almacena un elemento en BD\r\n     *\r\n     *\r\n     * @api {put} /:entidad/:id Actualizar entidad\r\n     * @apiName Actualizar entidad\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async updateEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n\r\n            let data = await service.update(request.params.id, request.body);\r\n            let jsRes = new JsonResponse(true, (data && data[0]) || { id: request.body.id });\r\n\r\n            response.json(jsRes.toJson());\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Elimina un elemento correspondiente al identificador recibido\r\n     *\r\n     *\r\n     * @api {delete} /:entidad/:id/delete Delete entidad\r\n     * @apiName Eliminar entidad\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async deleteEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n            let data = await service.delete(request.params.id);\r\n            let jsRes = new JsonResponse(true, data);\r\n\r\n            response.status(204).json(jsRes.toJson());\r\n        } catch (e) {\r\n            console.error(e);\r\n            if (e == \"NotFound\") {\r\n                let message = \"Element not found\";\r\n                let jsRes = new JsonResponse(false, null, message, 0);\r\n                response.status(404).json(jsRes.toJson());\r\n            } else {\r\n                next(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { BaseKnexDao } from \"../db/index.js\";\r\n\r\nexport class BaseService {\r\n    constructor(cls, table) {\r\n        if (cls) {\r\n            this.dao = new cls();\r\n        } else {\r\n            this.dao = new BaseKnexDao(); //El sistema por defecto utiliza knex, si se pasa un dao personalizado se puede sobreescribir este comportamiento\r\n        }\r\n        if (table) {\r\n            this.dao.tableName = table;\r\n        }\r\n    }\r\n    /**\r\n     * Obtencion de una lista de elementos.\r\n     *\r\n     * filters, es opcional. Si no se pasan se devuelve lo que hay ;\r\n     */\r\n    async list(filters, start, limit) {\r\n        //Pagination\r\n        const st = start || 0;\r\n        const lm = limit || 1000; //Default limit\r\n\r\n        let response = {};\r\n        response.total = await this.dao.countFilteredData(filters, st, lm);\r\n\r\n        if (filters && Object.keys(filters).length !== 0) {\r\n            let filteredData = await this.dao.loadFilteredData(filters, st, lm);\r\n            response.data = filteredData;\r\n            return response;\r\n        }\r\n\r\n        response.data = await this.dao.loadAllData(start, limit);\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Obtencion de un elemento mediante su identificador\r\n     */\r\n    loadById(id) {\r\n        return this.dao.loadById(id);\r\n    }\r\n    /**\r\n     * Metodo de creacion.\r\n     *\r\n     * Si el identificador se pasa como undefined se creara un nuevo elemento,\r\n     * sino se modifica el correspondiente.\r\n     */\r\n    save(data) {\r\n        //Create\r\n        return this.dao.save(data);\r\n    }\r\n    /**\r\n     * Metodo de creacion.\r\n     *\r\n     * Si el identificador se pasa como undefined se creara un nuevo elemento,\r\n     * sino se modifica el correspondiente.\r\n     */\r\n    update(id, data) {\r\n        if (id) {\r\n            //Update\r\n            return this.dao.update(id, data);\r\n        }\r\n    }\r\n    /**\r\n     * Metodo de eliminado.\r\n     *\r\n     * El identificador es obligatorio para poder localizar el elemento a eliminar.\r\n     */\r\n    delete(id) {\r\n        if (id) {\r\n            return this.dao.delete(id);\r\n        }\r\n    }\r\n}\r\n","import { I18nLoader, Utils } from \"./common/index.js\";\r\nimport { EventHandler } from \"./events/index.js\";\r\nimport { ClusterServer, Server } from \"./server/index.js\";\r\nimport { Logger } from \"./logger/index.js\";\r\n\r\nimport net from \"net\";\r\nimport repl from \"repl\";\r\nimport { KnexConnector } from \"./db/index.js\";\r\nimport Runtime from \"./common/Runtime.js\";\r\n\r\nclass App {\r\n    constructor() {\r\n        this.serverClass = Server;\r\n        this.clusterClass = ClusterServer;\r\n    }\r\n\r\n    /**\r\n     * Inicializa la runtime de la aplicación para poder recibir parámetros por consola y generar claves.\r\n     * @returns\r\n     */\r\n    runtime() {\r\n        return Runtime();\r\n    }\r\n\r\n    /**\r\n     * Initializa las configuraciones para la app\r\n     *\r\n     */\r\n    async init(serverConfig) {\r\n        if (process.env.DISABLE_LOGGER != \"true\") {\r\n            await Logger.configure();\r\n        }\r\n\r\n        //Instanciar la clase server\r\n        const server = new this.serverClass(serverConfig, this.statics, this.routes);\r\n        if (this.customizeExpress) {\r\n            server.customizeExpress = this.customizeExpress;\r\n        }\r\n        if (this.beforeListen) {\r\n            server.beforeListen = this.beforeListen;\r\n        }\r\n        if (this.afterListen) {\r\n            server.afterListen = this.afterListen;\r\n        }\r\n\r\n        /**\r\n         * Gestor de eventos\r\n         * @type {EventHandler}\r\n         * @public\r\n         */\r\n        this.events = new EventHandler(this);\r\n\r\n        /**\r\n         * Gestor de traducciones\r\n         * @type {I18nLoader}\r\n         * @public\r\n         */\r\n        this.i18n = new I18nLoader();\r\n        await this.i18n.load();\r\n        /**\r\n         * Servidor actual\r\n         * @type {ClusterServer}\r\n         * @public\r\n         */\r\n        this.server = new this.clusterClass(this);\r\n\r\n        this.server.setServerCls(server);\r\n        this.server.executeOnlyMain = () => {\r\n            if (this.executeOnlyMain) this.executeOnlyMain();\r\n\r\n            if (process.env.REPL_ENABLED == \"true\") {\r\n                this.startRepl();\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Ejecuta el servidor con la configuracion de #init()\r\n     */\r\n    async start() {\r\n        if (!this.server) {\r\n            throw new Error(\"Call init first\");\r\n        }\r\n        await this.server.start();\r\n    }\r\n\r\n    /**\r\n     * Inicia el server replify para poder conectar terminales remotas\r\n     *\r\n     *\r\n     * Para que arranque es necesario especificar REPL_ENABLED en el archivo .env\r\n     */\r\n    startRepl() {\r\n        try {\r\n            net.createServer((socket) => {\r\n                const remote = repl.start({\r\n                    prompt: \"lisco::remote> \",\r\n                    input: socket,\r\n                    output: socket,\r\n                    terminal: true,\r\n                    useColors: true,\r\n                    preview: false,\r\n                });\r\n                remote.context.app = this;\r\n                remote.context.Utils = Utils;\r\n                remote.context.db = KnexConnector.connection;\r\n                remote.on(\"exit\", socket.end.bind(socket));\r\n            }).listen(process.env.REPL_PORT || 5001);\r\n        } catch (e) {\r\n            console.log(\"Remote REPL Conn: \" + e);\r\n        }\r\n\r\n        console.log(`Remote REPL started on port ${process.env.REPL_PORT || 5001}`);\r\n    }\r\n}\r\n\r\nexport default new App();\r\n","import Utils from \"./Utils.js\";\r\n\r\nimport yargs from \"yargs/yargs\";\r\nimport { hideBin } from \"yargs/helpers\";\r\nexport default function Runtime() {\r\n    const argv = yargs(hideBin(process.argv))\r\n        .usage(\r\n            `Como usar: \r\n            node execute.js [--generateKeys , --encrypt xxx] \r\n            \r\n            ---> Si no se especifican parámetros el servidor arrancará normalmente.`\r\n        )\r\n        .alias('g', 'generateKeys')\r\n        .describe('g', 'Genera unas claves para la aplicación')\r\n        .alias('c', 'encrypt')\r\n        .describe('c', 'Codifica el String proporcionado en base a la contraseña de .env')\r\n        .nargs('c', 1)\r\n        .help(\"h\")\r\n        .alias(\"h\", \"help\").argv;\r\n\r\n    //Parámetro para no arrancar el servidor y generar las claves JWT\r\n    if (argv.generateKeys) {\r\n        console.log(\"Generando claves para encriptación:\");\r\n        console.log(Utils.generateKeys());\r\n        return process.exit(1);\r\n    }\r\n\r\n    if (argv.encrypt) {\r\n        console.log(\"Resultado encryptación:\");\r\n        console.log(Utils.encrypt(argv.encrypt));\r\n        return process.exit(1);\r\n    }\r\n}\r\n"],"names":["Utils","static","mcArray","join","toLowerCase","split","str","find","replace","RegExp","text","secret","Buffer","from","process","env","CRYPT_SECRET","iv","CRYPT_IV","cipher","crypto","createCipheriv","encrypted","update","concat","final","toString","encryptedText","createDecipheriv","decrypted","decipher","ms","util","promisify","setTimeout","promise_sleep","key","randomBytes","ob","flatObject","toReturn","i","hasOwnProperty","Array","constructor","flattenObject","x","isNaN","data","result","keys","reduce","r","e","j","Number","length","fn","args","next","Promise","resolve","fnReturn","catch","I18nLoader","this","watcher","async","custom","lang","DEFAULT_LANG","currentData","currentDataFlat","cwd","chokidar","watch","file","ignored","persistent","on","path","loadFile","readfile","fs","readFile","parsedData","JSON","parse","ex","code","console","log","error","load","JsonResponse","success","message","total","toJson","TokenGenerator","privateKey","options","sign","payload","_extends","jwtid","uuid","v4","jsonwebtoken","jwtSignOptions","verify","token","refresh","sub","iss","aud","iat","exp","nbf","jti","Server","config","statics","routes","app","express","express_config","lodash","defaultsDeep","helmet","json","urlencoded","compression","cors","origin","credentials","fileupload","socketio","transports","traceRequests","customizeExpress","configureRoutes","errorHandler","use","isObject","extended","fileUpload","idx","DISABLE_LOGGER","request","response","requestTime","Date","now","pathname","url","end","debug","pid","method","session","user_id","stringify","body","router","Router","loadRoutes","route","warn","configure","isEmpty","exAsync","expressHandler","cfg","isArray","handler","err","req","res","jsRes","status","ClusterServer","EventEmitter","super","PORT","port","normalizePort","clustered","CLUSTERED","workers","executeOnlyMain","setServerCls","cls","server","initClustered","configureSocketIO","initUnclustered","io","listen","cluster","isPrimary","msg","callback","event","DEBUG_EVENTS","props","owner","events","emit","os","cpus","cpuCount","initWorker","worker","id","fork","push","http","initialize","beforeListen","afterListen","handleErrors","SSL","SSL_KEY","SSL_CERT","SSL_PASS","exit","readFileSync","cert","passphrase","SSL_PORT","serverSsl","https","createServer","sslPort","val","parseInt","syscall","bind","EventHandler","messages","isWorker","evt","send","getLogger","log4js","log_logger","error_logger","debug_logger","prototype","slice","call","arguments","info","logger","level","AuthController","publicPathsList","AuthHandler","check","post","loginPost","logout","pathToRegexp","exec","username","validate","password","IAuthHandler","Error","JwtAuthHandler","UserDao","tokenGenerator","JWT_SECRET","audience","JWT_AUDIENCE","issuer","JWT_ISSUER","subject","JWT_SUBJECT","algorithm","JWT_ALGORITHM","expiresIn","JWT_EXPIRES","userDao","headers","authorization","decoded","moment","isAfter","user","findByUsername","encrypt","omit","CookieAuthHandler","creds","login","destroy","KnexConnector$1","init","connection","Knex","setColumnAliases","aliases","columnAliases","test","raw","KnexFilterParser","builder","string","tableName","allowGlobalSearch","caseInsensitive","KnexConnector","undefined","FQLParser","KnexParser","toKnex","filter","query","prop","elm","type","parseQueryString","value","start","whereBetween","where","whereRaw","whereExists","whereNotExists","propComplex","includes","whereIn","map","value_likeraw","replaceAll","value_nolikeraw","value_rawilike","value_notrawilike","sort","field","direction","BaseKnexDao","loadAllData","limit","select","offset","filters","sorts","parseSort","parseFilters","orderByRaw","count","as","objectId","save","object","insert","returning","newObject","loadById","delete","IUserDao","entity","get","listEntidad","getEntidad","saveEntidad","put","updateEntidad","deleteEntidad","service","table","list","params","setHeader","BaseService","dao","lm","countFilteredData","st","Object","filteredData","loadFilteredData","App$1","serverClass","clusterClass","runtime","argv","yargs","hideBin","usage","alias","describe","nargs","help","generateKeys","serverConfig","i18n","REPL_ENABLED","startRepl","net","socket","remote","repl","prompt","input","output","terminal","useColors","preview","context","db","REPL_PORT"],"mappings":"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"}