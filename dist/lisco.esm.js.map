{"version":3,"file":"lisco.esm.js","sources":["../src/common/Utils.js","../src/common/I18nLoader.js","../src/common/JsonResponse.js","../src/common/TokenGenerator.js","../src/server/Server.js","../src/server/ClusterServer.js","../src/events/EventHandler.js","../src/logger/Logger.js","../src/auth/AuthController.js","../src/auth/IAuthHandler.js","../src/auth/jwt/JwtAuthHandler.js","../src/auth/cookie/CookieAuthHandler.js","../src/db/knex/KnexConnector.js","../src/db/knex/filters/KnexFilterParser.js","../src/db/knex/dao/BaseKnexDao.js","../src/db/IUserDao.js","../src/base/BaseController.js","../src/base/BaseService.js","../src/common/Runtime.js","../src/App.js"],"sourcesContent":["import crypto from 'crypto';\r\nimport util from 'util';\r\n\r\nexport default class Utils {\r\n    static arrayToLower(mcArray) {\r\n        let tmp = mcArray.join('~').toLowerCase();\r\n        return tmp.split('~');\r\n    }\r\n\r\n    static replaceAll(str, find, replace) {\r\n        return str.replace(new RegExp(find.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replace);\r\n    }\r\n\r\n    /**\r\n     * Metodo de encript para las contraseñas y demas.\r\n     * \r\n     * @param {*} text \r\n     */\r\n    static encrypt(text) {\r\n        const algorithm = 'aes-256-cbc';\r\n        const secret = Buffer.from(process.env.CRYPT_SECRET, 'hex');\r\n        const iv = Buffer.from(process.env.CRYPT_IV, 'hex');\r\n\r\n        const cipher = crypto.createCipheriv(algorithm, secret, iv);\r\n        let encrypted = cipher.update(text);\r\n        encrypted = Buffer.concat([encrypted, cipher.final()]);\r\n        return encrypted.toString('hex');\r\n    }\r\n\r\n    /**\r\n     * Metodo de decrypt para las contraseñas y demas\r\n     * @param {*} text \r\n     */\r\n    static decrypt(text) {\r\n        const algorithm = 'aes-256-cbc';\r\n        const secret = Buffer.from(process.env.CRYPT_SECRET, 'hex');\r\n        const iv = Buffer.from(process.env.CRYPT_IV, 'hex');\r\n\r\n        const encryptedText = Buffer.from(text, 'hex');\r\n\r\n        const decipher = crypto.createDecipheriv(algorithm, secret, iv);\r\n        let decrypted = decipher.update(encryptedText);\r\n        decrypted = Buffer.concat([decrypted, decipher.final()]);\r\n        return decrypted.toString();\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * Utiliza una promise para ejecutar un setTimeout y hacer un falso sleep.\r\n     * \r\n     * @param {*} ms \r\n     */\r\n    static sleep(ms) {\r\n        let promise_sleep = util.promisify(setTimeout);\r\n\r\n        return promise_sleep(ms);\r\n    }\r\n\r\n    /**\r\n     * Genera dos claves para los metodos crypt y decrypt\r\n     */\r\n    static generateKeys() {\r\n        return {\r\n            key: crypto.randomBytes(32).toString('hex'),\r\n            iv: crypto.randomBytes(16).toString('hex')\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * \"aplana\" un objeto jerarquico en una estructura clave-valor.\r\n     * \r\n     * @param {*} ob \r\n     * @returns \r\n     */\r\n    static flattenObject(ob) {\r\n        let toReturn = {};\r\n        let flatObject;\r\n        for (let i in ob) {\r\n            if (!ob.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n            //Devolver los arrays tal cual\r\n            if (ob[i] && Array === ob[i].constructor) {\r\n                toReturn[i] = ob[i];\r\n                continue;\r\n            }\r\n            if ((typeof ob[i]) === 'object') {\r\n                flatObject = Utils.flattenObject(ob[i]);\r\n                for (let x in flatObject) {\r\n                    if (!flatObject.hasOwnProperty(x)) {\r\n                        continue;\r\n                    }\r\n                    //Exclude arrays from the final result\r\n                    if (flatObject[x] && Array === flatObject.constructor) {\r\n                        continue;\r\n                    }\r\n                    toReturn[i + (!!isNaN(x) ? '.' + x : '')] = flatObject[x];\r\n                }\r\n            } else {\r\n                toReturn[i] = ob[i];\r\n            }\r\n        }\r\n        return toReturn;\r\n    }\r\n\r\n    /**\r\n     * Invierte un objeto aplanado recuperando su forma original\r\n     * \r\n     * @param {*} data \r\n     * @returns \r\n     */\r\n    static unflatten(data) {\r\n        var result = {}\r\n        for (var i in data) {\r\n            var keys = i.split('.')\r\n            keys.reduce(function (r, e, j) {\r\n                return r[e] || (r[e] = isNaN(Number(keys[j + 1])) ? (keys.length - 1 == j ? data[i] : {}) : [])\r\n            }, result)\r\n        }\r\n        return result\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @returns \r\n     */\r\n    static expressHandler() {\r\n\r\n        return (fn) => {\r\n            return function asyncUtilWrap(...args) {\r\n                const fnReturn = fn(...args);\r\n                const next = args[args.length - 1];\r\n                return Promise.resolve(fnReturn).catch((e) => {\r\n                    return next(e);\r\n                });\r\n            };\r\n        };\r\n    }\r\n}\r\n\r\n","import fs from \"fs\";\r\nimport util from \"util\";\r\nimport Utils from \"./Utils.js\";\r\n\r\nimport chokidar from \"chokidar\";\r\n\r\nexport default class I18nLoader {\r\n    constructor() {\r\n        this.watcher = {};\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param lang\r\n     * @param callback\r\n     */\r\n    async load(custom) {\r\n        const lang = custom || process.env.DEFAULT_LANG;\r\n\r\n        if (!this.currentData) {\r\n            this.currentData = {};\r\n        }\r\n        if (!this.currentDataFlat) {\r\n            this.currentDataFlat = {};\r\n        }\r\n\r\n        const file = process.cwd() + \"/i18n/lang_\" + lang + \".json\";\r\n\r\n        // Initialize watcher.\r\n        this.watcher[lang] = chokidar.watch(file, {\r\n            ignored: /(^|[/\\\\])\\../, // ignore dotfiles\r\n            persistent: true,\r\n        });\r\n        //Add change watcher\r\n        this.watcher[lang].on(\"change\", (path) => this.loadFile(path, lang));\r\n\r\n        //Initialize file load\r\n        await this.loadFile(file, lang);\r\n    }\r\n\r\n    /**\r\n     * Carga el archivo de traducciones.\r\n     *\r\n     * @param {*} file\r\n     * @param {*} lang\r\n     */\r\n    async loadFile(file, lang) {\r\n        const readfile = util.promisify(fs.readFile);\r\n        try {\r\n            const data = await readfile(file, \"utf8\");\r\n            var parsedData = JSON.parse(data);\r\n\r\n            this.currentDataFlat[lang] = Utils.flattenObject(parsedData);\r\n            this.currentData[lang] = parsedData;\r\n        } catch (ex) {\r\n            if (ex?.code === \"ENOENT\") {\r\n                return console.log(\"Lang file does not exist. Create it on ./i18n/lang_{xx}.json\");\r\n            }\r\n            console.error(ex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} key\r\n     */\r\n    async translate(key, lang) {\r\n        if (!lang) lang = process.env.DEFAULT_LANG;\r\n\r\n        if (this.currentDataFlat && this.currentDataFlat[lang] && this.currentDataFlat[lang][key]) {\r\n            return this.currentData[lang][key];\r\n        }\r\n\r\n        if (!this.currentDataFlat || !this.currentDataFlat[lang]) {\r\n            await this.load(lang);\r\n            if (this.currentDataFlat && this.currentDataFlat[lang] && this.currentDataFlat[key]) {\r\n                return this.currentDataFlat[lang][key];\r\n            }\r\n        }\r\n        return \"undefined.\" + key;\r\n    }\r\n}\r\n","export default class JsonResponse {\r\n    constructor(success, data, message, total) {\r\n        this.data = data;\r\n        this.success = success;\r\n        this.total = total;\r\n        this.message = message || '';\r\n    }\r\n\r\n    toJson() {\r\n        return (this);\r\n    }\r\n}\r\n","/**\r\n * Example to refresh tokens using https://github.com/auth0/node-jsonwebtoken\r\n * It was requested to be introduced at as part of the jsonwebtoken library,\r\n * since we feel it does not add too much value but it will add code to mantain\r\n * we won't include it.\r\n *\r\n * I create this gist just to help those who want to auto-refresh JWTs.\r\n */\r\nimport jsonwebtoken from 'jsonwebtoken';\r\nimport * as uuid from 'uuid';\r\n\r\nexport default class TokenGenerator {\r\n\r\n    constructor(privateKey, options) {\r\n        this.privateKey = privateKey;\r\n        this.options = options;\r\n    }\r\n\r\n    sign(payload) {\r\n        const jwtSignOptions = { ...this.options, jwtid: uuid.v4() };\r\n        return jsonwebtoken.sign(payload, this.privateKey, jwtSignOptions);\r\n    }\r\n\r\n    verify(token) {\r\n        return jsonwebtoken.verify(token, this.privateKey, this.options);\r\n    }\r\n\r\n    refresh(token) {\r\n        const payload = jsonwebtoken.verify(token, this.privateKey, this.options);\r\n        delete payload.sub;\r\n        delete payload.iss;\r\n        delete payload.aud;\r\n        delete payload.iat;\r\n        delete payload.exp;\r\n        delete payload.nbf;\r\n        delete payload.jti; //We are generating a new token, if you are using jwtid during signing, pass it in refreshOptions\r\n        const jwtSignOptions = { ...this.options, jwtid: uuid.v4() };\r\n        // The first signing converted all needed options into claims, they are already in the payload\r\n        return jsonwebtoken.sign(payload, this.privateKey, jwtSignOptions);\r\n    }\r\n}\r\n","import helmet from \"helmet\";\r\nimport express from \"express\";\r\nimport compression from \"compression\";\r\nimport cors from \"cors\";\r\nimport fileUpload from \"express-fileupload\";\r\nimport url from \"url\";\r\nimport lodash from \"lodash\";\r\nimport { JsonResponse, Utils } from \"../common/index.js\";\r\n\r\n/**\r\n * Clase servidor encargada de configurar las rutas.\r\n *\r\n * que el codigo se disperse entre diferentes proyectos.\r\n */\r\nexport default class Server {\r\n    /**\r\n     *\r\n     * @param {*} config\r\n     * @param {*} statics\r\n     * @param {*} routes\r\n     */\r\n    constructor(config, statics, routes) {\r\n        this.app = express();\r\n        this.express_config = lodash.defaultsDeep(config, {\r\n            helmet: true,\r\n            json: true,\r\n            urlencoded: true,\r\n            compression: true,\r\n            cors: { origin: true, credentials: true },\r\n            fileupload: true,\r\n            socketio: { transports: [\"websocket\"] },\r\n            traceRequests: false,\r\n        });\r\n        this.statics = statics;\r\n        this.routes = routes;\r\n    }\r\n\r\n    /**\r\n     * Inicializa el servidor\r\n     */\r\n    async initialize() {\r\n        this.config(this.express_config);\r\n        if (this.customizeExpress) {\r\n            await this.customizeExpress(this.app);\r\n        }\r\n        await this.configureRoutes(this.routes);\r\n        await this.errorHandler();\r\n    }\r\n\r\n    /**\r\n     * Funcion sobreescribible para personalizar los componentes cargados en Express\r\n     *\r\n     * Aqui se pueden poner cosas como:\r\n     *\r\n     * this.app.use(cookieParser())... etc\r\n     */\r\n    customizeExpress() {}\r\n\r\n    /**\r\n     * Se encarga de realizar la configuración inicial del servidor\r\n     *\r\n     */\r\n    config(config) {\r\n        if (config && config.helmet) {\r\n            //Security\r\n            this.app.use(helmet(config && lodash.isObject(config.helmet) && config.helmet));\r\n        }\r\n        if (config && config.json) {\r\n            //mount json form parser\r\n            this.app.use(express.json());\r\n        }\r\n\r\n        if (config && config.urlencoded) {\r\n            //mount query string parser\r\n            this.app.use(express.urlencoded({ extended: true }));\r\n        }\r\n        if (config && config.compression) {\r\n            // compress responses\r\n            this.app.use(compression());\r\n        }\r\n        if (config && config.cors) {\r\n            //Enable cors to allow external references\r\n            this.app.options(\"*\", cors(config && lodash.isObject(config.cors) && config.cors));\r\n            this.app.use(cors(config && lodash.isObject(config.cors) && config.cors));\r\n        }\r\n        if (config && config.fileupload) {\r\n            // upload middleware\r\n            this.app.use(fileUpload());\r\n        }\r\n\r\n        if (this.statics) {\r\n            //add static paths\r\n            for (const idx in this.statics) {\r\n                this.app.use(idx, express.static(this.statics[idx]));\r\n            }\r\n        }\r\n\r\n        //Logging\r\n        if (config && config.traceRequests === true && process.env.DISABLE_LOGGER != \"true\") {\r\n            this.app.use((request, response, next) => {\r\n                request.requestTime = Date.now();\r\n                response.on(\"finish\", () => {\r\n                    let pathname = url.parse(request.url).pathname;\r\n                    let end = Date.now() - request.requestTime;\r\n                    let user = (request && request.session && request.session.user_id) || \"\";\r\n\r\n                    console.debug(\"APIRequest[\" + process.pid + \"]::. [\" + request.method + \"] (user:\" + user + \")  \" + pathname + \" |-> took: \" + end + \" ms\");\r\n                    console.debug(JSON.stringify(request.body));\r\n                });\r\n                next();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Crea el cargador automatico de rutas\r\n     */\r\n    configureRoutes(routes) {\r\n        const router = express.Router();\r\n        this.app.use(router);\r\n\r\n        //create controllers\r\n        this.loadRoutes(this.app, routes);\r\n    }\r\n\r\n    /**\r\n     * Instancia la lista de rutas disponibles\r\n     * @param apps\r\n     * @returns {*}\r\n     */\r\n    loadRoutes(app, routes) {\r\n        if (!routes) return;\r\n\r\n        for (const route of routes) {\r\n            if (!route) {\r\n                console.warn(\"Empty route\");\r\n                continue;\r\n            }\r\n            const router = route.configure();\r\n\r\n            if (!lodash.isEmpty(route.routes)) {\r\n                const exAsync = Utils.expressHandler();\r\n                console.log(\"loading shorthand routes\");\r\n                for (const path in route.routes) {\r\n                    const cfg = route.routes[path];\r\n                    for (const method in cfg) {\r\n                        router[method](path, exAsync(cfg[method]));\r\n                    }\r\n                }\r\n            }\r\n            if (router) {\r\n                app.use(router);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Errores\r\n     */\r\n    errorHandler() {\r\n        // error handler\r\n        this.app.use((err, req, res, next) => {\r\n            let jsRes = new JsonResponse();\r\n            jsRes.success = false;\r\n            jsRes.message = err.message; //!FIXME protect error displaying in REST Responses\r\n            console.error(err);\r\n\r\n            res.status(500).json(jsRes.toJson());\r\n        });\r\n    }\r\n}\r\n","import http from \"http\";\r\nimport https from \"https\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport cluster from \"cluster\";\r\nimport { Server } from \"socket.io\";\r\nimport os from \"os\";\r\nimport { EventEmitter } from \"events\";\r\n\r\nimport ClusterMessages from \"cluster-messages\";\r\n\r\n/**\r\n * Inicializa la escucha del server en modo cluster\r\n */\r\nexport default class ClusterServer extends EventEmitter {\r\n    constructor(app) {\r\n        super();\r\n\r\n        if (!process.env.PORT) {\r\n            console.log(\"Using 3000 as default port. Customize via env PORT.\");\r\n        }\r\n        this.port = this.normalizePort(process.env.PORT || 3000);\r\n        this.clustered = process.env.CLUSTERED;\r\n        this.workers = [];\r\n        this.app = app;\r\n\r\n        this.executeOnlyMain = () => {};\r\n    }\r\n\r\n    setServerCls(cls) {\r\n        this.server = cls;\r\n    }\r\n\r\n    /**\r\n     * Iniciar el servidor en el puerto y con la configuración seleccionadas.\r\n     */\r\n    async start() {\r\n        if (this.clustered == \"true\") {\r\n            this.initClustered();\r\n        } else {\r\n            this.configureSocketIO();\r\n            this.executeOnlyMain();\r\n\r\n            await this.initUnclustered();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Inicializa el servidor de socketio en el puerto siguiente al configurado.\r\n     *\r\n     * Se puede desactivar mediante la config socketio: false al realizar el App.init()\r\n     */\r\n    configureSocketIO() {\r\n        if (this.server.express_config && this.server.express_config.socketio) {\r\n            this.app.io = new Server(this.server.express_config && this.server.express_config.socketio);\r\n            this.app.io.listen(this.port + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Inicializa la clase server encargada del control de las solicitudes en forma multiproceso.\r\n     *\r\n     */\r\n    async initClustered() {\r\n        //Launch cluster\r\n        if (cluster.isPrimary) {\r\n            this.configureSocketIO();\r\n\r\n            this.executeOnlyMain();\r\n\r\n            let messages = new ClusterMessages();\r\n            messages.on(\"event\", (msg, callback) => {\r\n                if (msg && msg.event) {\r\n                    if (process.env.DEBUG_EVENTS == true) {\r\n                        console.debug(`Received '${msg.event}' from ${msg.props.owner} at Master`);\r\n                    }\r\n                    //Desencadenar en el proceso principal tambien\r\n                    this.app.events.emit(msg.event, msg.props, callback);\r\n                }\r\n            });\r\n\r\n            //Count the machine's CPUs\r\n            const cpuCount = os.cpus().length;\r\n\r\n            //Create a worker for each CPU\r\n            for (let idx = 0; idx < cpuCount; idx += 1) {\r\n                this.initWorker();\r\n            }\r\n\r\n            //Listen for dying workers\r\n            cluster.on(\"exit\", (worker) => {\r\n                //Replace the dead worker, we're not sentimental\r\n                console.log(\"Worker \" + worker.id + \" died :(\");\r\n                this.initWorker();\r\n            });\r\n        } else {\r\n            await this.initUnclustered();\r\n            console.log(`Worker ${process.pid} started`);\r\n        }\r\n    }\r\n    /**\r\n     * Inicia un worker\r\n     */\r\n    initWorker() {\r\n        let worker = cluster.fork();\r\n        console.log(`Running worker ${worker.process.pid}`);\r\n\r\n        this.workers.push(worker);\r\n    }\r\n\r\n    /**\r\n     * Inicializa la clase server encargada del control de las solicitudes en un unico proceso.\r\n     *\r\n     */\r\n    async initUnclustered() {\r\n        this.server.port = this.port;\r\n        //create http server\r\n        let server = http.Server(this.server.app);\r\n\r\n        await this.server.initialize();\r\n\r\n        if (this.server.beforeListen) await this.server.beforeListen();\r\n        //listen on provided ports\r\n        server.listen(this.server.port);\r\n\r\n        if (this.server.afterListen) await this.server.afterListen();\r\n\r\n        //add error handler\r\n        server.on(\"error\", (err) => {\r\n            this.handleErrors(err, this.server.port);\r\n        });\r\n        //start listening on port\r\n        server.on(\"listening\", () => {\r\n            console.log(\"Server Worker running on port: \" + this.port + \"!\");\r\n            this.emit(\"listening\", this.port);\r\n        });\r\n\r\n        if (process.env.SSL && process.env.SSL == \"true\") {\r\n            if (!process.env.SSL_KEY || !process.env.SSL_CERT || !process.env.SSL_PASS) {\r\n                console.error(\"Invalid SSL configuration. SLL_KEY, SSL_CERT and SSL_PASS needed\");\r\n                process.exit(0);\r\n            }\r\n\r\n            var key = fs.readFileSync(path.resolve(process.cwd(), process.env.SSL_KEY || \"key.pem\"));\r\n            var cert = fs.readFileSync(path.resolve(process.cwd(), process.env.SSL_CERT || \"cert.pem\"));\r\n\r\n            var options = {\r\n                key: key,\r\n                cert: cert,\r\n                passphrase: process.env.SSL_PASS,\r\n            };\r\n\r\n            if (!process.env.SSL_PORT) {\r\n                console.log(\"Using 3443 as ssl default port. Customize via env SSL_PORT.\");\r\n            }\r\n            var sslPort = this.normalizePort(process.env.SSL_PORT || 3443);\r\n            var serverSsl = https.createServer(options, this.server.app);\r\n            serverSsl.listen(sslPort);\r\n            //add error handler\r\n            serverSsl.on(\"error\", (err) => {\r\n                this.handleErrors(err, sslPort);\r\n            });\r\n            //start listening on port\r\n            serverSsl.on(\"listening\", () => {\r\n                console.log(\"Server Worker running on port: \" + sslPort + \"!\");\r\n                this.emit(\"listening_ssl\", sslPort);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Controla los posibles errores de formato en el puerto\r\n     * @param val\r\n     * @returns {*}\r\n     */\r\n    normalizePort(val) {\r\n        let port = parseInt(val, 10);\r\n\r\n        if (isNaN(port)) {\r\n            //named pipe\r\n            return val;\r\n        }\r\n\r\n        if (port >= 0) {\r\n            //port number\r\n            return port;\r\n        }\r\n\r\n        return false;\r\n    }\r\n    /**\r\n     * Gestiona los errores en el listen del servidor\r\n     */\r\n    handleErrors(error, port) {\r\n        if (error.syscall !== \"listen\") {\r\n            throw error;\r\n        }\r\n\r\n        let bind = typeof port === \"string\" ? \"Pipe \" + port : \"Port \" + port;\r\n\r\n        //handle specific listen errors with friendly messages\r\n        switch (error.code) {\r\n            case \"EACCES\":\r\n                console.error(bind + \" requires elevated privileges\");\r\n                process.exit(1);\r\n                break;\r\n            case \"EADDRINUSE\":\r\n                console.error(bind + \" is already in use\");\r\n                process.exit(1);\r\n                break;\r\n            default:\r\n                throw error;\r\n        }\r\n    }\r\n}\r\n","import cluster from \"cluster\";\r\nimport { EventEmitter } from \"events\";\r\nimport ClusterMessages from \"cluster-messages\";\r\n\r\n/**\r\n * Clase encargada de la generacion de eventos.\r\n */\r\nexport default class EventHandler extends EventEmitter {\r\n    constructor(app) {\r\n        super();\r\n        this.messages = new ClusterMessages();\r\n\r\n        this.app = app; //Se recibe el singleton App para evitar referencias cruzadas\r\n\r\n        if (cluster.isWorker) {\r\n            // Levanto, en los worker, la escucha para recibir los eventos en broadcast de los demas hilos\r\n            this.messages.on(\"event\", (msg, callback) => {\r\n                if (msg && msg.event && process.pid !== msg.props.owner) {\r\n                    if (process.env.DEBUG_EVENTS == true) {\r\n                        console.debug(`Receiving broadcast ${msg.event} - ${process.pid}`);\r\n                    }\r\n                    super.emit(msg.event, { ...msg.props }, callback);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sobreescribir el emitter para notificar a los hijos\r\n     *\r\n     * @param {*} evt\r\n     * @param {*} props\r\n     */\r\n    emit(evt, props, callback) {\r\n        //Desencadenar en local\r\n        super.emit(evt, props, callback);\r\n\r\n        if (evt && props && cluster.isWorker && process.pid !== props.owner) {\r\n            if (process.env.DEBUG_EVENTS == true) {\r\n                console.debug(`${evt} -> Firing from ${process.pid} to master`);\r\n            }\r\n            if (!props) {\r\n                props = {};\r\n            }\r\n            props.owner = process.pid;\r\n            this.messages.send(\"event\", { event: evt, props: { ...props } }, callback);\r\n        }\r\n\r\n        if (evt && props && cluster.isPrimary && this.app && this.app.server && this.app.server.workers) {\r\n            if (process.env.DEBUG_EVENTS == true) {\r\n                console.debug(`${evt} -> Firing from master to workers`);\r\n            }\r\n            this.messages.send(\"event\", { event: evt, props: { ...props } }, callback);\r\n        }\r\n    }\r\n}\r\n","import log4js from \"log4js\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport util from \"util\";\r\n\r\nconst { configure, getLogger } = log4js;\r\n\r\nexport default class Logger {\r\n    static async configure() {\r\n        const readfile = util.promisify(fs.readFile);\r\n\r\n        const json = await readfile(path.resolve(process.cwd(), \"./log4js.json\"), \"utf8\");\r\n\r\n        configure(JSON.parse(json));\r\n\r\n        //Nota para el futuro:\r\n        // Esto sobreescribe los metodos de console.log\r\n        // Es necesario que la sitaxis se mantenga tal cual....\r\n        (() => {\r\n            const log_logger = getLogger(\"log\");\r\n            const error_logger = getLogger(\"error\");\r\n            const debug_logger = getLogger(\"debug\");\r\n            console.log = function () {\r\n                let args = Array.prototype.slice.call(arguments);\r\n                // log.apply(this, args);\r\n                log_logger.log(\"info\", args[0]);\r\n            };\r\n            console.error = function () {\r\n                let args = Array.prototype.slice.call(arguments);\r\n                // error.apply(this, args);\r\n                error_logger.log(\"error\", args[0]);\r\n            };\r\n            console.info = function () {\r\n                let args = Array.prototype.slice.call(arguments);\r\n                // info.apply(this, args);\r\n                log_logger.log(\"info\", args[0]);\r\n            };\r\n            console.debug = function () {\r\n                /*if (global.settings.debug.value) {*/\r\n                let args = Array.prototype.slice.call(arguments);\r\n                // debug.apply(this, [args[1], args[2]]);\r\n                debug_logger.log(\"debug\", args[0]);\r\n            };\r\n\r\n            console.custom = function (logger, level, message) {\r\n                const custom_logger = getLogger(logger);\r\n                custom_logger.log(level, message);\r\n            };\r\n        })();\r\n    }\r\n}\r\n","import express from \"express\";\r\nimport url from \"url\";\r\nimport { JsonResponse, Utils } from \"../common/index.js\";\r\n\r\nimport { pathToRegexp } from \"path-to-regexp\";\r\n\r\nexport default class AuthController {\r\n    constructor(publicPathsList, AuthHandler) {\r\n        this.router = express.Router();\r\n        this.publicPathsList = [...publicPathsList, \"/login\"];\r\n\r\n        this.AuthHandler = AuthHandler;\r\n    }\r\n\r\n    configure() {\r\n        const exAsync = Utils.expressHandler();\r\n        this.router.use(exAsync((...args) => this.check(...args)));\r\n        this.router.post(\r\n            \"/login\",\r\n            exAsync((...args) => this.loginPost(...args))\r\n        );\r\n        this.router.post(\r\n            \"/logout\",\r\n            exAsync((...args) => this.logout(...args))\r\n        );\r\n\r\n        return this.router;\r\n    }\r\n\r\n    /**\r\n     * Controla que los usuarios tengan sesion para acceder a los metodos privados de la API\r\n     *\r\n     * @param {*} request\r\n     * @param {*} response\r\n     * @param {*} next\r\n     */\r\n    async check(request, response, next) {\r\n        try {\r\n            //Rutas ublicas\r\n            for (let path of this.publicPathsList) {\r\n                const expr = pathToRegexp(path);\r\n                if (expr.exec(url.parse(request.url).pathname) !== null) {\r\n                    return next();\r\n                }\r\n            }\r\n\r\n            if (await this.AuthHandler.check(request)) {\r\n                return next();\r\n            }\r\n\r\n            return response.status(403).json(new JsonResponse(false, null, \"Forbidden\").toJson());\r\n        } catch (ex) {\r\n            console.error(ex);\r\n            return response.status(403).json(new JsonResponse(false, null, \"Forbidden\").toJson());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Valida los credenciales de un usuario\r\n     *\r\n     * TODO logger console.custom(\"access\", INFO);\r\n     *\r\n     * @param {*} request\r\n     * @param {*} response\r\n     */\r\n    async loginPost(request, response) {\r\n        if (request.body.username) {\r\n            try {\r\n                let data = await this.AuthHandler.validate(request, request.body.username, request.body.password);\r\n                if (data) {\r\n                    return response.status(200).json(new JsonResponse(true, data).toJson());\r\n                }\r\n                return response.status(401).json(new JsonResponse(false, null, \"Unauthorized - Incorrect credentials\").toJson());\r\n            } catch (ex) {\r\n                console.error(ex);\r\n                return response.status(401).json(new JsonResponse(false, null, \"Unauthorized - Error, check log\").toJson());\r\n            }\r\n        }\r\n        return response.status(401).json(new JsonResponse(false, null, \"Unauthorized - Missing parameters\").toJson());\r\n    }\r\n\r\n    /**\r\n     * Cierra la sesion del usuario\r\n     *\r\n     * @param {*} request\r\n     * @param {*} response\r\n     */\r\n    async logout(request, response) {\r\n        if (this.AuthHandler.logout) {\r\n            //Depende de que el authHandler implementado pueda realizar esta accion\r\n            try {\r\n                await this.AuthHandler.logout(request);\r\n                return response.status(200).json(new JsonResponse(true).toJson());\r\n            } catch (ex) {\r\n                console.error(ex);\r\n                return response.status(500).json(new JsonResponse(false, null, ex).toJson());\r\n            }\r\n        }\r\n        return response.status(200).json(new JsonResponse(true).toJson());\r\n    }\r\n}\r\n","export default class IAuthHandler {\r\n    constructor() {\r\n        if (!this.check) {\r\n            throw new Error(\"AuthHandler must have 'check' vethod\");\r\n        }\r\n        if (!this.validate) {\r\n            throw new Error(\"AuthHandler must have 'validate' vethod\");\r\n        }\r\n        // logout method is optional\r\n    }\r\n}\r\n\r\n","import { TokenGenerator, Utils } from '../../common/index.js';\r\nimport IAuthHandler from '../IAuthHandler.js'\r\nimport lodash from 'lodash';\r\nimport moment from 'moment';\r\n\r\nexport default class JwtAuthHandler extends IAuthHandler {\r\n    constructor(UserDao) {\r\n        super();\r\n\r\n        this.tokenGenerator = new TokenGenerator(process.env.JWT_SECRET, { audience: process.env.JWT_AUDIENCE, issuer: process.env.JWT_ISSUER, subject: process.env.JWT_SUBJECT, algorithm: process.env.JWT_ALGORITHM, expiresIn: process.env.JWT_EXPIRES })\r\n\r\n        if (!UserDao) {\r\n            throw new Error(\"Need 'UserDao' for user validation. Create 'UserDao' class extending 'IUserDao'\");\r\n        }\r\n        this.userDao = UserDao;\r\n    }\r\n\r\n    /**\r\n     * Metodo encargado de realizar la comprobacion para validar si la sesion del usuario es válida\r\n     * \r\n     * @param {*} request \r\n     */\r\n    async check(request) {\r\n        if (request.headers.authorization) {\r\n            const token = (request.headers.authorization || '').split(' ')[1] || '';\r\n\r\n            if (!token) {\r\n                console.error(\"Token needed\");\r\n                return false;\r\n            }\r\n            try {\r\n                var decoded = this.tokenGenerator.verify(token);\r\n                const { sub, username, exp } = decoded;\r\n\r\n                if (!sub || !username || moment(exp).isAfter(new Date())) {\r\n                    return false;\r\n                }\r\n\r\n                //Si la sesion es valida, lo introducimos en el contexto de la solicitud\r\n                request.session = { ...request.session, ...decoded };\r\n                return true;\r\n            } catch (ex) {\r\n                console.error(ex);\r\n                return false;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Método encargado de realizar la validación de un usuario. Utiliza IUserDao como interfaz para la realización de la query a BD.\r\n     * \r\n     * @param {*} username \r\n     * @param {*} password \r\n     */\r\n    async validate(request, username, password) {\r\n\r\n        const user = await this.userDao.findByUsername(username);\r\n\r\n        if (user && user.username === username && user.password === Utils.encrypt(password)) {\r\n            return this.tokenGenerator.sign(lodash.omit(user, ['password']));\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n}","import { Utils } from \"../../common/index.js\";\r\nimport IAuthHandler from \"../IAuthHandler.js\";\r\nimport lodash from \"lodash\";\r\n\r\n/**\r\n * Necesario:\r\n *  Instalar -->   express-session y algun session store\r\n * \r\n *  Mas info: https://www.npmjs.com/package/express-session\r\n * \r\n *  App.customizeExpress = () => {\r\n       this.app.use(session({\r\n            secret: 'keyboard cat',\r\n            resave: false,\r\n            saveUninitialized: true,\r\n            cookie: { secure: true }\r\n        }));\r\n    }\r\n */\r\n\r\nexport default class CookieAuthHandler extends IAuthHandler {\r\n    constructor(UserDao) {\r\n        super();\r\n\r\n        if (!UserDao) {\r\n            throw new Error(\"Need 'UserDao' for user validation. Create 'UserDao' class extending 'IUserDao'\");\r\n        }\r\n        this.userDao = UserDao;\r\n    }\r\n\r\n    /**\r\n     * Metodo encargado de realizar la comprobacion para validar si la sesion del usuario es válida\r\n     *\r\n     * @param {*} request\r\n     */\r\n    async check(request) {\r\n        if (request.headers.authorization) {\r\n            //Si se recibe por Auth Basic\r\n            const token = (request.headers.authorization || \"\").split(\" \")[1] || \"\";\r\n\r\n            const creds = Buffer.from(token, \"base64\").toString().split(\":\");\r\n            const login = creds[0];\r\n            const password = creds[1];\r\n\r\n            if (!(await this.validate(request, login, password))) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        if (request.session && request.session.username) {\r\n            //Si hay sesion almacenada\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Método encargado de realizar la validación de un usuario. Utiliza IUserDao como interfaz para la realización de la query a BD.\r\n     *\r\n     * @param {*} username\r\n     * @param {*} password\r\n     */\r\n    async validate(request, username, password) {\r\n        const user = await this.userDao.findByUsername(username);\r\n\r\n        if (user && user.username === username && user.password === Utils.encrypt(password)) {\r\n            request.session = { ...request.session, ...lodash.omit(user, [\"password\"]) };\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {*} request\r\n     */\r\n    logout(request) {\r\n        return new Promise((resolve) => {\r\n            if (request.session) {\r\n                request.session.destroy(resolve);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import Knex from 'knex'\r\n\r\nclass KnexConnector {\r\n\r\n\r\n    init(config) {\r\n\r\n        /**\r\n         * References the current connection of the app\r\n         * @type {Knex}\r\n         * @public\r\n         */\r\n        this.connection = Knex(config)\r\n    }\r\n\r\n    /**\r\n     * Configura de forma global los aliases de las columnas para utilizar en FQL.\r\n     * \r\n     * La estructura es \r\n     * {\r\n            \"table1\": {\r\n                \"alias1\": \"column1\",\r\n                \"alias2\": \"column2\"\r\n            },\r\n            \"table2\": {\r\n                \"alias1\": \"column1\"\r\n            }\r\n        }\r\n     *\r\n     * @param {*} aliases \r\n     */\r\n    setColumnAliases(aliases) {\r\n        this.columnAliases = aliases;\r\n    }\r\n    \r\n\r\n\r\n    test() {\r\n        return this.connection.raw('select 1+1 as result');\r\n    }\r\n}\r\n\r\n\r\nexport default new KnexConnector();","import { Utils } from \"../../../common/index.js\";\r\n\r\nimport { FQLParser, KnexParser } from \"@landra_sistemas/fql-parser\";\r\nimport KnexConnector from \"../KnexConnector.js\";\r\n\r\nexport default class KnexFilterParser {\r\n    /**\r\n     *\r\n     * @param {*} builder\r\n     * @param {*} string\r\n     * @returns\r\n     */\r\n    static parseQueryString(builder, string, tableName) {\r\n        const options = {\r\n            allowGlobalSearch: true,\r\n            caseInsensitive: true,\r\n        };\r\n        //Agregar los aliases en caso de que se hayan configurado de forma global\r\n        if (KnexConnector.columnAliases && KnexConnector.columnAliases[tableName]) {\r\n            options.aliases = KnexConnector.columnAliases[tableName];\r\n        }\r\n        //Options\r\n        if (KnexConnector.caseInsensitive !== undefined) {\r\n            options.caseInsensitive = KnexConnector.caseInsensitive;\r\n        }\r\n        if (KnexConnector.allowGlobalSearch !== undefined) {\r\n            options.allowGlobalSearch = KnexConnector.allowGlobalSearch;\r\n        }\r\n        const parser = new FQLParser(options);\r\n        const data = parser.parse(string);\r\n\r\n        return new KnexParser(tableName).toKnex(builder, data);\r\n    }\r\n\r\n    /**\r\n     * Convierte un objeto clave valor en un conjunto de filtros.\r\n     *\r\n     * - Filtro estandar:\r\n     *    filters: {\r\n     *       \"column\": \"value\" -> filtro generico exact\r\n     *    }\r\n     * - Filtro Objeto:\r\n     *    filters:{\r\n     *       \"column\": {\r\n     *       \"type\": \"date|between|exists|notexists|greater|greaterEq|less|lessEq|exact|exactI|not|null|notnull|like|likeI\"\r\n     *       \"start\": \"xxx\", //inicio de rango para el filtro de date y between\r\n     *       \"end\": \"xxx\", //fin de rango para el filtro date y between\r\n     *       \"value\": \"xxx\" //valor a utilizar para el resto de filtros\r\n     *     }\r\n     * }\r\n     *  - Filtro Lista:\r\n     *     filters: {\r\n     *       \"column\": [1, 2, 3]\r\n     *     }\r\n     *    Filtro de tipo IN, todos los elementos que coincidan\r\n     *\r\n     * - Definicion de tipos:\r\n     *    date: filtro de fechas desde y hasta\r\n     *    between: filtro entre dos valores concretos\r\n     *    exists: busca si existe la propiedad\r\n     *    notexists: busca si existe la propiedad\r\n     *    greater: mayor que\r\n     *    greaterEq: mayor o igual que\r\n     *    less: menor que\r\n     *    lessEq: menor o igual que\r\n     *    exact: valor exacto\r\n     *    exactI: valor exacto ignorando mayusculas y minusculas\r\n     *    not: distinto de\r\n     *    null: igual a null\r\n     *    notnull: distinto de null\r\n     *    like: filtro like\r\n     *    likeI: filtro like ignorando mayusculas y minusculas\r\n     */\r\n    static parseFilters(builder, filter, tableName) {\r\n        let query = builder;\r\n\r\n        for (let prop in filter) {\r\n            let elm = filter[prop];\r\n\r\n            if (typeof elm === \"object\") {\r\n                switch (elm.type) {\r\n                    case \"fql\":\r\n                        query = KnexFilterParser.parseQueryString(query, elm.value, tableName);\r\n                        break;\r\n                    case \"date\":\r\n                    case \"between\":\r\n                        if (elm.start && elm.end) {\r\n                            query = query.whereBetween(prop, [elm.start, elm.end]);\r\n                        }\r\n                        if (elm.start && !elm.end) {\r\n                            query = query.where(prop, \">=\", elm.start);\r\n                        }\r\n                        if (!elm.start && elm.end) {\r\n                            query = query.where(prop, \">=\", elm.end);\r\n                        }\r\n                        break;\r\n                    case \"dateraw\":\r\n                    case \"betweenraw\":\r\n                        if (elm.start && elm.end) {\r\n                            query = query.whereRaw(`${prop} BETWEEN ? AND ?`, [elm.start, elm.end]);\r\n                        }\r\n                        if (elm.start && !elm.end) {\r\n                            query = query.whereRaw(`${prop} >= ?`, [elm.start]);\r\n                        }\r\n                        if (!elm.start && elm.end) {\r\n                            query = query.whereRaw(`${prop} >= ?`, [elm.end]);\r\n                        }\r\n                        break;\r\n                    case \"jsonb\":\r\n                        query = query.whereRaw(`${prop} ILIKE ?`, [\"%\" + elm.value + \"%\"]);\r\n                        break;\r\n                    case \"full-text-psql\":\r\n                        query = query.whereRaw(`to_tsvector(${prop}::text) @@ to_tsquery(?)`, [elm.value]);\r\n                        break;\r\n\r\n                    case \"greater\":\r\n                    case \"greaterraw\":\r\n                        query = query.whereRaw(`${prop} > ?`, [elm.value]);\r\n                        break;\r\n                    case \"greaterEq\":\r\n                    case \"greaterEqraw\":\r\n                        query = query.whereRaw(`${prop} >= ?`, [elm.value]);\r\n                        break;\r\n                    case \"less\":\r\n                    case \"lessraw\":\r\n                        query = query.whereRaw(`${prop} < ?`, [elm.value]);\r\n                        break;\r\n                    case \"lessEq\":\r\n                    case \"lessEqraw\":\r\n                        query = query.whereRaw(`${prop} <= ?`, [elm.value]);\r\n                        break;\r\n                    case \"exists\":\r\n                        query = query.whereExists(prop);\r\n                        break;\r\n                    case \"notexists\":\r\n                        query = query.whereNotExists(prop);\r\n                        break;\r\n                    case \"exact\":\r\n                    case \"exactraw\":\r\n                        query = query.whereRaw(`${prop} = ?`, [elm.value]);\r\n                        break;\r\n                    case \"in\":\r\n                        let propComplex = prop;\r\n                        if (propComplex.includes(\",\")) {\r\n                            propComplex = prop.split(\",\");\r\n                        }\r\n                        if (!Array.isArray(elm.value) && elm.value != undefined) {\r\n                            query = query.whereIn(propComplex, elm.value.split(\",\"));\r\n                        } else {\r\n                            if (elm.value != undefined) {\r\n                                query = query.whereIn(propComplex, elm.value);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"inraw\":\r\n                        if (!Array.isArray(elm.value) && elm.value != undefined) {\r\n                            query = query.whereRaw(`${prop} IN (?)`, [\r\n                                elm.value\r\n                                    .split(\",\")\r\n                                    .map((e) => `'${e}'`)\r\n                                    .join(\",\"),\r\n                            ]);\r\n                        } else {\r\n                            if (elm.value != undefined) {\r\n                                query = query.whereRaw(`${prop} IN (?)`, [elm.value.map((e) => `'${e}'`).join(\",\")]);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"not\":\r\n                    case \"notraw\":\r\n                        query = query.whereRaw(`${prop} != ?`, [elm.value]);\r\n                        break;\r\n                    case \"like\":\r\n                    case \"likeraw\":\r\n                        let value_likeraw = Utils.replaceAll(elm.value, \"*\", \"%\");\r\n                        query = query.whereRaw(` ${prop} LIKE ?`, [value_likeraw]);\r\n                        break;\r\n                    case \"notlike\":\r\n                    case \"notlikeraw\":\r\n                        let value_nolikeraw = Utils.replaceAll(elm.value, \"*\", \"%\");\r\n                        query = query.whereRaw(` ${prop} NOT LIKE ?`, [value_nolikeraw]);\r\n                        break;\r\n                    case \"likeI\":\r\n                        let value_rawilike = Utils.replaceAll(elm.value, \"*\", \"%\");\r\n                        query = query.whereRaw(` ${prop} ILIKE ?`, [value_rawilike]);\r\n                        break;\r\n                    case \"notlikeI\":\r\n                        let value_notrawilike = Utils.replaceAll(elm.value, \"*\", \"%\");\r\n                        query = query.whereRaw(` ${prop} NOT ILIKE ?`, [value_notrawilike]);\r\n                        break;\r\n                    case \"null\":\r\n                    case \"nullraw\":\r\n                        query = query.whereRaw(`${prop} is NULL`);\r\n                        break;\r\n                    case \"notnull\":\r\n                    case \"notnullraw\":\r\n                        query = query.whereRaw(`${prop} is not NULL`);\r\n                        break;\r\n                }\r\n            } else {\r\n                //Si el valor no es un objeto se devuelve\r\n                query = query.where(prop, elm);\r\n            }\r\n        }\r\n\r\n        // console.log(query.toSQL());\r\n        return query;\r\n    }\r\n\r\n    /**\r\n     * Conversion de un objeto {property: XX, direction: ASC|DESC - ascend|descend} a un ORDER BY\r\n     *\r\n     * @param {*} sorts\r\n     */\r\n    static parseSort(sort) {\r\n        if (!sort.field || !sort.direction) {\r\n            return 1;\r\n        }\r\n\r\n        let direction = \"ASC\";\r\n        if (sort.direction === \"descend\") {\r\n            direction = \"DESC\";\r\n        }\r\n\r\n        return sort.field + \" \" + direction;\r\n    }\r\n}\r\n","import KnexFilterParser from \"../filters/KnexFilterParser.js\";\r\nimport KnexConnector from \"../KnexConnector.js\";\r\n\r\nimport lodash from \"lodash\";\r\n\r\n/**\r\n * Crear un dao con los métodos básicos\r\n */\r\nexport default class BaseKnexDao {\r\n    constructor() {\r\n        this.tableName = \"\";\r\n    }\r\n\r\n    loadAllData(start, limit) {\r\n        return KnexConnector.connection\r\n            .select(\"*\")\r\n            .from(this.tableName)\r\n            .limit(limit || 10000)\r\n            .offset(start);\r\n    }\r\n\r\n    async loadFilteredData(filters, start, limit) {\r\n        let sorts = 1;\r\n        if (filters.sort) {\r\n            sorts = KnexFilterParser.parseSort(filters.sort);\r\n        }\r\n\r\n        return KnexConnector.connection\r\n            .from(this.tableName)\r\n            .where((builder) => KnexFilterParser.parseFilters(builder, lodash.omit(filters, [\"sort\", \"start\", \"limit\"]), this.tableName))\r\n            .orderByRaw(sorts)\r\n            .limit(limit)\r\n            .offset(start);\r\n    }\r\n\r\n    async countFilteredData(filters) {\r\n        let data = await KnexConnector.connection\r\n            .from(this.tableName)\r\n            .where((builder) => KnexFilterParser.parseFilters(builder, lodash.omit(filters, [\"sort\", \"start\", \"limit\"]), this.tableName))\r\n            .count(\"id\", { as: \"total\" });\r\n\r\n        return data && data[0].total;\r\n    }\r\n\r\n    async loadById(objectId) {\r\n        const data = await KnexConnector.connection.from(this.tableName).where(\"id\", objectId);\r\n\r\n        if (data && data[0]) {\r\n            return data[0];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    save(object) {\r\n        return KnexConnector.connection.from(this.tableName).insert(object).returning(\"*\");\r\n    }\r\n    update(objectId, newObject) {\r\n        return KnexConnector.connection.from(this.tableName).where(\"id\", objectId).update(newObject).returning(\"*\");\r\n    }\r\n    async delete(objectId) {\r\n        const existing = await this.loadById(objectId);\r\n        if (!existing) {\r\n            throw \"NotFound\";\r\n        }\r\n        return KnexConnector.connection.from(this.tableName).where(\"id\", objectId).delete();\r\n    }\r\n}\r\n","import BaseKnexDao from \"./knex/dao/BaseKnexDao.js\";\r\n\r\nexport default class IUserDao extends BaseKnexDao {\r\n    constructor(tableName) {\r\n        super(tableName);\r\n\r\n        if (!this.findByUsername) {\r\n            throw new Error(\"AuthHandler must have 'findByUsername' method\");\r\n        }\r\n    }\r\n}\r\n","import express from \"express\";\r\nimport { JsonResponse, Utils } from \"../common/index.js\";\r\n\r\nexport class BaseController {\r\n    constructor() {\r\n        this.router = express.Router();\r\n        this.routes = {};\r\n        //Example routes shorthand\r\n        /*\r\n         {\r\n            \"/\": {\r\n                \"get\": this.listEntidad.bind(this),\r\n                \"post\": this.listEntidad.bind(this)\r\n            }\r\n         } \r\n         */\r\n    }\r\n\r\n    configure(entity, config) {\r\n        if (!entity) {\r\n            return this.router;\r\n        }\r\n\r\n        const exAsync = Utils.expressHandler();\r\n        this.router.get(\r\n            `/${entity}`,\r\n            exAsync((...args) => this.listEntidad(...args))\r\n        );\r\n        this.router.post(\r\n            `/${entity}/list`,\r\n            exAsync((...args) => this.listEntidad(...args))\r\n        );\r\n        this.router.get(\r\n            `/${entity}/:id`,\r\n            exAsync((...args) => this.getEntidad(...args))\r\n        );\r\n        this.router.post(\r\n            `/${entity}`,\r\n            exAsync((...args) => this.saveEntidad(...args))\r\n        );\r\n        this.router.put(\r\n            `/${entity}/:id`,\r\n            exAsync((...args) => this.updateEntidad(...args))\r\n        );\r\n        this.router.delete(\r\n            `/${entity}/:id`,\r\n            exAsync((...args) => this.deleteEntidad(...args))\r\n        );\r\n\r\n        this.service = config.service;\r\n        this.table = config.table;\r\n\r\n        return this.router;\r\n    }\r\n\r\n    /**\r\n     * Lista entidades en la aplicacion, es posible enviarle parametros de filtrado.\r\n     *\r\n     *\r\n     * @api {post} /:entidad/list Listar entidades\r\n     * @apiName Listar entidades\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async listEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n            let filters = request.method === \"POST\" ? request.body : request.query && request.query.filters ? JSON.parse(request.query.filters) : {};\r\n\r\n            let data = await service.list(filters, filters.start, filters.limit);\r\n            let jsRes = new JsonResponse(true, data.data, null, data.total);\r\n\r\n            response.json(jsRes.toJson());\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    }\r\n    /**\r\n     *Obtiene un elemento concreto mediante su identificador\r\n     *\r\n     *\r\n     * @api {get} /:entidad/:id Obtener entidad\r\n     * @apiName Obtener entidad\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async getEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n            let data = await service.loadById(request.params.id);\r\n            let jsRes = new JsonResponse(true, data);\r\n            let code = 200;\r\n            if (data == null) {\r\n                code = 404;\r\n                let message = \"Element not found\";\r\n                jsRes = new JsonResponse(false, null, message, 0);\r\n            }\r\n\r\n            response.status(code).json(jsRes.toJson());\r\n        } catch (e) {\r\n            console.error(e);\r\n            let message = \"\";\r\n            if (e.code == \"22P02\") {\r\n                //PostgreSQL error Code form string_to_UUID\r\n                message = \"Expected uiid\";\r\n            }\r\n            let jsRes = new JsonResponse(false, null, message, 0);\r\n            response.status(400).json(jsRes.toJson());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Almacena un elemento en BD\r\n     *\r\n     *\r\n     * @api {post} /:entidad/:id Crear entidad\r\n     * @apiName Crear entidad\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async saveEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n\r\n            let data = await service.save(request.body);\r\n            let jsRes = new JsonResponse(true, (data && data[0]) || { id: request.body.id });\r\n\r\n            response.setHeader(\"Location\", `/entity/${jsRes.data.id}`);\r\n            response.status(201).json(jsRes.toJson());\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Almacena un elemento en BD\r\n     *\r\n     *\r\n     * @api {put} /:entidad/:id Actualizar entidad\r\n     * @apiName Actualizar entidad\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async updateEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n\r\n            let data = await service.update(request.params.id, request.body);\r\n            let jsRes = new JsonResponse(true, (data && data[0]) || { id: request.body.id });\r\n\r\n            response.json(jsRes.toJson());\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Elimina un elemento correspondiente al identificador recibido\r\n     *\r\n     *\r\n     * @api {delete} /:entidad/:id/delete Delete entidad\r\n     * @apiName Eliminar entidad\r\n     * @apiGroup Comun\r\n     * @apiPermission Auth Basic username:pwd\r\n     * @apiParam {Number} id entidades unique ID.\r\n     *\r\n     * @apiSuccess {Boolean} success\r\n     * @apiSuccess {Object[]} data  dataObject\r\n     */\r\n    async deleteEntidad(request, response, next) {\r\n        try {\r\n            let service = new this.service(null, this.table);\r\n            let data = await service.delete(request.params.id);\r\n            let jsRes = new JsonResponse(true, data);\r\n\r\n            response.status(204).json(jsRes.toJson());\r\n        } catch (e) {\r\n            console.error(e);\r\n            if (e == \"NotFound\") {\r\n                let message = \"Element not found\";\r\n                let jsRes = new JsonResponse(false, null, message, 0);\r\n                response.status(404).json(jsRes.toJson());\r\n            } else {\r\n                next(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { BaseKnexDao } from \"../db/index.js\";\r\n\r\nexport class BaseService {\r\n    constructor(cls, table) {\r\n        if (cls) {\r\n            this.dao = new cls();\r\n        } else {\r\n            this.dao = new BaseKnexDao(); //El sistema por defecto utiliza knex, si se pasa un dao personalizado se puede sobreescribir este comportamiento\r\n        }\r\n        if (table) {\r\n            this.dao.tableName = table;\r\n        }\r\n    }\r\n    /**\r\n     * Obtencion de una lista de elementos.\r\n     *\r\n     * filters, es opcional. Si no se pasan se devuelve lo que hay ;\r\n     */\r\n    async list(filters, start, limit) {\r\n        //Pagination\r\n        const st = start || 0;\r\n        const lm = limit || 1000; //Default limit\r\n\r\n        let response = {};\r\n        response.total = await this.dao.countFilteredData(filters, st, lm);\r\n\r\n        if (filters && Object.keys(filters).length !== 0) {\r\n            let filteredData = await this.dao.loadFilteredData(filters, st, lm);\r\n            response.data = filteredData;\r\n            return response;\r\n        }\r\n\r\n        response.data = await this.dao.loadAllData(start, limit);\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Obtencion de un elemento mediante su identificador\r\n     */\r\n    loadById(id) {\r\n        return this.dao.loadById(id);\r\n    }\r\n    /**\r\n     * Metodo de creacion.\r\n     *\r\n     * Si el identificador se pasa como undefined se creara un nuevo elemento,\r\n     * sino se modifica el correspondiente.\r\n     */\r\n    save(data) {\r\n        //Create\r\n        return this.dao.save(data);\r\n    }\r\n    /**\r\n     * Metodo de creacion.\r\n     *\r\n     * Si el identificador se pasa como undefined se creara un nuevo elemento,\r\n     * sino se modifica el correspondiente.\r\n     */\r\n    update(id, data) {\r\n        if (id) {\r\n            //Update\r\n            return this.dao.update(id, data);\r\n        }\r\n    }\r\n    /**\r\n     * Metodo de eliminado.\r\n     *\r\n     * El identificador es obligatorio para poder localizar el elemento a eliminar.\r\n     */\r\n    delete(id) {\r\n        if (id) {\r\n            return this.dao.delete(id);\r\n        }\r\n    }\r\n}\r\n","import Utils from \"./Utils.js\";\r\n\r\nimport _optimist from \"optimist\";\r\nexport default function Runtime() {\r\n    const optimist = _optimist.usage(\r\n        \"Como usar: \\n node execute.js [--generateKeys , --encrypt xxx] \\n\\n Opciones:\\n --generateKeys: Genera unas claves para la aplicación\\n --encrypt String: Codifica el String proporcionado en base a la contraseña de .env \\n\\n ---> Si no se especifican parámetros el servidor arrancará normalmente.\"\r\n    );\r\n    const argv = optimist.argv;\r\n    //Parámetro para no arrancar el servidor y generar las claves JWT\r\n    if (argv.generateKeys) {\r\n        console.log(\"Generando claves para encriptación:\");\r\n        console.log(Utils.generateKeys());\r\n        return process.exit(1);\r\n    }\r\n\r\n    if (argv.encrypt) {\r\n        console.log(\"Resultado encryptación:\");\r\n        console.log(Utils.encrypt(argv.encrypt));\r\n        return process.exit(1);\r\n    }\r\n\r\n    if (argv.h || argv.help) {\r\n        console.log(optimist.help());\r\n        return process.exit(1);\r\n    }\r\n}\r\n","import { I18nLoader, Utils } from \"./common/index.js\";\r\nimport { EventHandler } from \"./events/index.js\";\r\nimport { ClusterServer, Server } from \"./server/index.js\";\r\nimport { Logger } from \"./logger/index.js\";\r\n\r\nimport net from \"net\";\r\nimport repl from \"repl\";\r\nimport { KnexConnector } from \"./db/index.js\";\r\nimport Runtime from \"./common/Runtime.js\";\r\n\r\nclass App {\r\n    constructor() {\r\n        this.serverClass = Server;\r\n        this.clusterClass = ClusterServer;\r\n    }\r\n\r\n    /**\r\n     * Inicializa la runtime de la aplicación para poder recibir parámetros por consola y generar claves.\r\n     * @returns\r\n     */\r\n    runtime() {\r\n        return Runtime();\r\n    }\r\n\r\n    /**\r\n     * Initializa las configuraciones para la app\r\n     *\r\n     */\r\n    async init(serverConfig) {\r\n        if (process.env.DISABLE_LOGGER != \"true\") {\r\n            await Logger.configure();\r\n        }\r\n\r\n        //Instanciar la clase server\r\n        const server = new this.serverClass(serverConfig, this.statics, this.routes);\r\n        if (this.customizeExpress) {\r\n            server.customizeExpress = this.customizeExpress;\r\n        }\r\n        if (this.beforeListen) {\r\n            server.beforeListen = this.beforeListen;\r\n        }\r\n        if (this.afterListen) {\r\n            server.afterListen = this.afterListen;\r\n        }\r\n\r\n        /**\r\n         * Gestor de eventos\r\n         * @type {EventHandler}\r\n         * @public\r\n         */\r\n        this.events = new EventHandler(this);\r\n\r\n        /**\r\n         * Gestor de traducciones\r\n         * @type {I18nLoader}\r\n         * @public\r\n         */\r\n        this.i18n = new I18nLoader();\r\n        await this.i18n.load();\r\n        /**\r\n         * Servidor actual\r\n         * @type {ClusterServer}\r\n         * @public\r\n         */\r\n        this.server = new this.clusterClass(this);\r\n\r\n        this.server.setServerCls(server);\r\n        this.server.executeOnlyMain = () => {\r\n            if (this.executeOnlyMain) this.executeOnlyMain();\r\n\r\n            if (process.env.REPL_ENABLED == \"true\") {\r\n                this.startRepl();\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Ejecuta el servidor con la configuracion de #init()\r\n     */\r\n    async start() {\r\n        if (!this.server) {\r\n            throw new Error(\"Call init first\");\r\n        }\r\n        await this.server.start();\r\n    }\r\n\r\n    /**\r\n     * Inicia el server replify para poder conectar terminales remotas\r\n     *\r\n     *\r\n     * Para que arranque es necesario especificar REPL_ENABLED en el archivo .env\r\n     */\r\n    startRepl() {\r\n        try {\r\n            net.createServer((socket) => {\r\n                const remote = repl.start({\r\n                    prompt: \"lisco::remote> \",\r\n                    input: socket,\r\n                    output: socket,\r\n                    terminal: true,\r\n                    useColors: true,\r\n                    preview: false,\r\n                });\r\n                remote.context.app = this;\r\n                remote.context.Utils = Utils;\r\n                remote.context.db = KnexConnector.connection;\r\n                remote.on(\"exit\", socket.end.bind(socket));\r\n            }).listen(process.env.REPL_PORT || 5001);\r\n        } catch (e) {\r\n            console.log(\"Remote REPL Conn: \" + e);\r\n        }\r\n\r\n        console.log(`Remote REPL started on port ${process.env.REPL_PORT || 5001}`);\r\n    }\r\n}\r\n\r\nexport default new App();\r\n"],"names":["Utils","arrayToLower","mcArray","tmp","join","toLowerCase","split","replaceAll","str","find","replace","RegExp","encrypt","text","algorithm","secret","Buffer","from","process","env","CRYPT_SECRET","iv","CRYPT_IV","cipher","crypto","createCipheriv","encrypted","update","concat","toString","decrypt","encryptedText","decipher","createDecipheriv","decrypted","sleep","ms","promise_sleep","util","promisify","setTimeout","generateKeys","key","randomBytes","flattenObject","ob","toReturn","flatObject","i","hasOwnProperty","Array","constructor","x","isNaN","unflatten","data","result","keys","reduce","r","e","j","Number","length","expressHandler","fn","asyncUtilWrap","args","fnReturn","next","Promise","resolve","_catch","body","recover","then","I18nLoader","watcher","load","custom","lang","DEFAULT_LANG","currentData","currentDataFlat","file","cwd","chokidar","watch","ignored","persistent","on","path","loadFile","readfile","fs","readFile","parsedData","JSON","parse","ex","code","console","log","error","translate","JsonResponse","success","message","total","toJson","TokenGenerator","privateKey","options","sign","payload","jwtSignOptions","jwtid","uuid","v4","jsonwebtoken","verify","token","refresh","sub","iss","aud","iat","exp","nbf","jti","Server","config","statics","routes","app","express","express_config","lodash","defaultsDeep","helmet","json","urlencoded","compression","cors","origin","credentials","fileupload","socketio","transports","traceRequests","initialize","configureRoutes","errorHandler","customizeExpress","use","isObject","extended","fileUpload","idx","DISABLE_LOGGER","request","response","requestTime","Date","now","pathname","url","end","user","session","user_id","debug","pid","method","stringify","router","Router","loadRoutes","route","warn","configure","isEmpty","exAsync","cfg","err","req","res","jsRes","status","ClusterServer","PORT","port","normalizePort","clustered","CLUSTERED","workers","executeOnlyMain","setServerCls","cls","server","start","initClustered","configureSocketIO","initUnclustered","io","listen","cluster","isPrimary","messages","ClusterMessages","msg","callback","event","DEBUG_EVENTS","props","owner","events","emit","cpuCount","os","cpus","initWorker","worker","id","fork","push","http","handleErrors","SSL","SSL_KEY","SSL_CERT","SSL_PASS","exit","readFileSync","cert","passphrase","SSL_PORT","sslPort","serverSsl","https","createServer","afterListen","beforeListen","val","parseInt","syscall","bind","EventEmitter","EventHandler","isWorker","evt","send","log4js","getLogger","Logger","log_logger","error_logger","debug_logger","prototype","slice","call","arguments","info","logger","level","custom_logger","AuthController","publicPathsList","AuthHandler","check","post","loginPost","logout","expr","pathToRegexp","exec","username","validate","password","IAuthHandler","Error","JwtAuthHandler","UserDao","tokenGenerator","JWT_SECRET","audience","JWT_AUDIENCE","issuer","JWT_ISSUER","subject","JWT_SUBJECT","JWT_ALGORITHM","expiresIn","JWT_EXPIRES","userDao","headers","authorization","decoded","moment","isAfter","findByUsername","omit","CookieAuthHandler","creds","login","destroy","KnexConnector","init","connection","Knex","setColumnAliases","aliases","columnAliases","test","raw","KnexFilterParser","parseQueryString","builder","string","tableName","allowGlobalSearch","caseInsensitive","undefined","parser","FQLParser","KnexParser","toKnex","parseFilters","filter","query","prop","elm","type","value","whereBetween","where","whereRaw","whereExists","whereNotExists","propComplex","includes","isArray","whereIn","map","value_likeraw","value_nolikeraw","value_rawilike","value_notrawilike","parseSort","sort","field","direction","BaseKnexDao","loadAllData","limit","select","offset","loadFilteredData","filters","sorts","orderByRaw","countFilteredData","count","as","loadById","objectId","save","object","insert","returning","newObject","existing","IUserDao","BaseController","entity","get","listEntidad","getEntidad","saveEntidad","put","updateEntidad","deleteEntidad","service","table","list","params","setHeader","BaseService","dao","st","lm","Object","filteredData","Runtime","optimist","_optimist","usage","argv","h","help","App","serverClass","clusterClass","runtime","serverConfig","i18n","REPL_ENABLED","startRepl","net","socket","remote","repl","prompt","input","output","terminal","useColors","preview","context","db","REPL_PORT"],"mappings":"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"}